<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>00 开篇词 爱与被爱，是人一生最值得学习的能力</title>
    <url>//posts/71104663/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="00-开篇词-爱与被爱，是人一生最值得学习的能力"><a href="#00-开篇词-爱与被爱，是人一生最值得学习的能力" class="headerlink" title="00 开篇词 爱与被爱，是人一生最值得学习的能力"></a>00 开篇词 爱与被爱，是人一生最值得学习的能力</h1><p>从蹒跚学步到牙牙学语，从徒手开根号到闭眼背英文，我们一直在孜孜不倦地学习获取新的技能。然而学校从来没有开设一门课，教你如何去爱一个人，或者怎样享受被一个人爱。</p>
<p>甚至教导主任们视恋爱如洪水猛兽，一发现爱的苗头就要赶尽杀绝、斩草除根。</p>
<p>以至于当你遇到那个让你魂牵梦绕的人时，当你父母开始着急忙慌催婚时，你只能像一个从未训练过的士兵，手无寸铁地走向战场。更有甚者，有人相信了损友们不知道从哪个网络小说中学到的恋爱宝典，简直就像拿着贴了双面胶的炸药包上战场，结果可想而知。</p>
<p>谈恋爱看似很容易，只要不太挑，总能搂到人跟你组 cp。两个人眼一闭一睁，恋爱就算谈上了。谈恋爱又很难，找人难、追求难、维系关系难、分手也很难，相见时难别亦难。</p>
<p>这么多年，我看过许多以幸福模样开局，却草草收场的恋情，也见过很多在恋情中相互折磨的恋人。不是不爱，只是不懂如何去爱。</p>
<p>你是不是也曾经为了一个人，茶饭不思辗转反侧，费尽心力也只是友情以上恋爱未满；</p>
<p>你是不是也曾经在某个深夜，骤然醒来回想起某个人如同月光皎洁，却遗憾就此错过；</p>
<p>你是不是也突然醒悟，当初那句话若是换个说法，现在那个人是否还会留在身边。</p>
<p>于是，我们总在一遍遍地感叹，感叹命运为何如此残酷，总是让我们在错的时间遇到对的人，让我们一次次地在 KTV 大声唱着，“后来，当我学会如何去爱，你却已经不在。”</p>
<p>打住，不要伤春悲秋，这还上升不到命运的高度。其实，恋爱就是个技能问题。</p>
<h2 id="恋爱，是一项技能"><a href="#恋爱，是一项技能" class="headerlink" title="恋爱，是一项技能"></a>恋爱，是一项技能</h2><p>但是，从理论上来说，恋爱这个技能，你也可以不学。</p>
<p>因为在一段长时间、近距离、高频次接触的、密切的亲密关系中，两个人一切的性格缺陷都会被放大。所以理论上，如果你是性格特别圆融的人，根本没有缺陷，那自然不用学，就像练了九阳神功的张无忌，什么武功都不用练，一路平 A 别人也破不了防。</p>
<p>不过一般历史上，我们称这种没有缺陷的人为完人、圣人，比如孔子、王阳明。这是最治本的路子，但也是普通人最难以企及的路子。</p>
<p>对我们普通人来说，学习这项技能就显得性价比非常高。恋爱技能就像太极剑，是让你掩盖破绽、化解矛盾，和自己，也和对方的缺陷达成和解的一种能力。</p>
<p>培养爱的能力，这里既涉及知识，也包括方法，最终上升到能力。</p>
<p>比如，我们经常聊防渣的话题，如果你连渣男渣女是什么样都不知道，以为只要女孩前凸后翘、性感妩媚、长袖善舞就是渣女，那自然防不住。识渣是防渣的第一步，这类知识不学自然不会，如果靠自己在恋爱中学习，那代价往往是撞得头破血流。</p>
<p>所以，学习这样一门课，往小了说，避开一个雷，能为你节约多少时间精力；往大了说，北大包丽、WePhone 苏享茂，不就是“死于”渣男渣女之手，学会这课还能救命。</p>
<p>再比如，我们还会聊“暧昧”的话题，就要讲如何利用暧昧期推进关系，讲亲密关系的六层交互理论。这种方法不学，你也有可能会不自觉地用，就好像很多人没上过游泳课也会游泳，没上过羽毛球课也会打羽毛球一样。但是成系统成体系学习过的人，稍加训练就比自己领悟的野路子强。</p>
<p>知识和方法，都是可复制、可传授的，所以恋爱能力是能够习得的。当然，我们在恋爱课堂里谈不成恋爱，还需要你在掌握了知识和方法，构建了正确的恋爱框架后，在生活中不断地积极实践，才能真正将其内化为自己的能力。</p>
<p>但是，恋爱这种能力，是一种需要长期学习和培训的能力。</p>
<p>它不像 21 天就能玩转的 Python 或者每天 5 分钟就能轻松记下的单词，“爱”这个能力没法突击。但是，越早学习，你就越不容易错过天命之人，而留下不容挽回的遗憾。</p>
<p>你也发现了，这个专栏叫《恋爱必修课》，不是想鼓吹人生要以恋爱为中心，而是想告诉你，爱与被爱，是人一生最值得学习的能力。其他技能，最多也只是支撑你事业发展的一条腿，爱的能力却是通向你爱情和家庭唯一的一张船票，现在这张船票的票价仅仅是两杯星巴克的价钱。</p>
<h2 id="恋爱，是自我成长"><a href="#恋爱，是自我成长" class="headerlink" title="恋爱，是自我成长"></a>恋爱，是自我成长</h2><p>既然讲恋爱课，要讲什么呢？</p>
<p>有人问过我，要不要学习和了解一下最近大火的 PUA、茶艺学等学问；还有人问我，网上的恋爱套路，到底有几分可以效仿。我理解这种心态，在这个普通人都会几句土味情话的时代，好像学了就有可能找到对象，不学就要落后，落后就要孤单。</p>
<p>可是，为什么套路化和模板化的东西这么流行？背后的根本原因就是，我们害怕没人爱，害怕自己是单身。人口焦虑还未结束，信息焦虑的脚步就跟上了，随之而来的就是“爱情焦虑”。</p>
<p>别急，先停止你的焦虑。我们先来想一想，恋爱到底是什么？</p>
<p>在我做情感咨询的这么多年，问我“为什么和怎么办”的人很多，问我“是什么”的人还没碰见过。偏偏这个问题又极度重要，对“是什么”理解得越深刻，对“为什么”分析的原因才能越精确，“怎么办”的方法才能越有效。</p>
<p>现在搜索引擎的强大往往让人产生一种错觉，认为是什么这个问题只需要敲击几下键盘就唾手可得。不过互联网或者书本上给你的概念、定义、结论都是他人对经验的总结，是外在的认知。</p>
<p>在我看来，恋爱是自我成长。所有情感问题都是内在的领悟，是处理自己与这个世界的关系。</p>
<p>你好像觉得，有些人天生就受欢迎，总是有很多追求者，还有的人谈恋爱就像过家家一样轻松简单，但这都不是厉害，谈得多谈得快不代表谈的好。很多帅哥美女，追求者很多，但是饱受情伤，在爱情中是非常苦恼的。你必须要靠自己培养爱的能力，不断去解决爱情难题，在爱情这条路上，最终修炼和找到更好的自我，这才是爱情带给你的真正财富。</p>
<p>所以，我必须声明的是，这与你看到的大部分情感课都不一样。</p>
<p>在某些人眼里，或许是史上最没用的情感课。因为这个课程既不会讲搭讪技巧也不会提供撩妹的话术，我绝不会保证你学完这个课程后就成为恋爱达人，三言两语就轻松让人投怀送抱。</p>
<p>我甚至不能承诺，学完这个课程，你就能熟练掌握爱的能力。因为爱的能力没法凭空获得，只有在不断实践中才能掌握属于自己的秘籍。但是漫无目的地盲目实践，对于绝大多数人来说都没有效果，你往往不是谈了三次恋爱，而是把一个错误的恋爱模式重复了三次。</p>
<p>但是，我能够承诺的是，通过本次课程，帮助你建立一个正确的恋爱框架，让你在未来的人生中能够始终朝着正确方向构筑自己爱的能力。</p>
<p>以道驭术，术必成；离道之术，术必衰。人要成长，根本永远重于枝节。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>01 是终点也是起点：你的恋爱目标是什么？</title>
    <url>//posts/62b42c0f/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="01-是终点也是起点：你的恋爱目标是什么？"><a href="#01-是终点也是起点：你的恋爱目标是什么？" class="headerlink" title="01 是终点也是起点：你的恋爱目标是什么？"></a>01 是终点也是起点：你的恋爱目标是什么？</h1><p>今天是我们这堂恋爱课的第一讲，我想先和你聊聊“恋爱目标”这件事。</p>
<p>谈起目标，看似画饼充饥，可实际上，却是整个战略中最重要的一环。</p>
<p>正如每一个玩命复习的学生，目标大多是在考试中拿到理想分数；每一个玩命加班的打工人，目标大多是月底拿到更多薪水；每一个玩命忽悠你加班的资本家，目标都是先挣他一个亿。</p>
<p>但是，绝大多数玩命谈恋爱的人，投入了大量的时间、精力、金钱和情绪后，却自始至终都没搞懂自己的目标是什么，更说不出自己在一段恋爱中究竟想得到什么。</p>
<h2 id="为什么要有恋爱目标？"><a href="#为什么要有恋爱目标？" class="headerlink" title="为什么要有恋爱目标？"></a>为什么要有恋爱目标？</h2><p>也许你会说了，没有目标不行吗？人生这场旅途，不就是边走边看边观摩吗？还真不是。</p>
<p>之前，有一个妆容精致的 OL 小姐姐，当时，她来找我做情感咨询。这个点奶茶都恨不得给我做个 SWOT 分析的女生，跟我大讲她的每一段情感遭遇，问我为什么她的恋情总是失败？</p>
<p>本来气势汹汹的她，被我问到你的恋爱目标是什么时，像一个课堂上开小差被抓包的学生，犹豫了半天，思索了半天，最后试探性告诉我，不以结婚为目的的谈恋爱都是耍流氓？</p>
<p>你看，这个答案说出口，她自己都没底。爱情跟考试一样，没学就是不会，“三短一长选一长”纯粹是求个心理安慰。我为什么要先问她恋爱目标？恋爱目标真的很重要吗？</p>
<p>是的，方向不正确，越努力，越失败。我举个例子，在金庸武侠中，有一个叫杨过的人，即使你没看过《神雕侠侣》，我相信你也多多少少听说过他和小龙女的“恋爱事迹”。</p>
<p>其实除了小龙女之外，杨过这一生遇见了无数妹子，郭芙、陆无双、程瑛、完颜萍、耶律燕、公孙绿萼、郭襄等等。这些小姐姐，梅兰菊竹各有所长，有颜值高的、武功高的、性格温柔的、有文化的、家世好的，可是为什么都是一见杨过终身误，却没有一个能拿下杨过的？</p>
<p>因为，她们不符合杨过的恋爱目标。杨过自幼失怙，说是找对象，实际上都是在找母爱。</p>
<p>这些妹子看见杨过，都是杨大哥、杨大侠，都把他当朋友、当暗恋对象、当救星、当武林豪杰，都是平视甚至仰视杨过的。所以，靠传统江湖女侠撩汉那一套都不好使啊！管你英雄救美、霸道女侠、刁蛮公主、古灵精怪的，杨过全然不吃这一套，杨过谈恋爱就是要弥补家庭温暖的呀。</p>
<p>而小龙女呢？小龙女拿杨过当儿子养了好几年，又当爹、又当妈，又管生活，又管教育还管思想，一把屎一把尿把他拉扯大，所以杨过认准小龙女生死相许。</p>
<p>只有小龙女拿杨过当孩子，一见面就摸摸头，说过儿长大了。其中蕴含的真意，翻译过来大概就是：儿子，叫爸爸。也只有在小龙女这里，杨过才会扔下大侠包袱，翻跟头、耍无赖，回归他最喜欢的小孩状态。</p>
<p>所以神雕同人小说都喜欢拿黄蓉去配杨过，这还真是书糙理不糙。因为神雕出场的所有女性，有一个算一个，能跟小龙女争一下的只有黄蓉，因为她是唯二能让杨过感受到母爱的角色。</p>
<p>这就叫，目标不对，努力白费；目标搞对，一步到位。</p>
<h2 id="什么是好的恋爱目标？"><a href="#什么是好的恋爱目标？" class="headerlink" title="什么是好的恋爱目标？"></a>什么是好的恋爱目标？</h2><p>那么，什么是好的恋爱目标呢？这显然是一个没有标准答案的问题。</p>
<p>有人觉得理想的恋爱是琴瑟和谐、相敬如宾；</p>
<p>有人觉得恋爱是同生共死、轰轰烈烈到白头；</p>
<p>有人觉得非要天雷勾地火，看见对方就想“繁衍后代”才算真正恋爱；</p>
<p>有人觉得恋爱就是为了结婚，结婚了就算恋爱成功。</p>
<p>其实每一种都行，无所谓对错。这种只要你自己信就好的东西，我们统称为价值观。</p>
<p>就好比电影《姜子牙》里面说的，救一人还是救苍生。你爱救一人就救一人，你爱救苍生就救苍生，这种价值选择怎么样都不能称之为错。这个问题上，唯一可能出现的错误就是，打着救苍生的牌子害一人或者打着救一人的牌子害苍生——救谁都没有错，害人才有错。有人打着结婚的牌子骗人恋爱，或打恋爱的牌子骗人结婚——结婚和恋爱都没错，骗人才有错。</p>
<p>虽然，我们说，不同的人在不同的人生阶段，面对不同的恋爱对象，内心的恋爱目标也是不同的，我们无法给每个人确定一个一以贯之的目标。但是，我可以给你三条恋爱目标的原则。</p>
<h3 id="第一条：再差的目标，也胜过没有目标。"><a href="#第一条：再差的目标，也胜过没有目标。" class="headerlink" title="第一条：再差的目标，也胜过没有目标。"></a>第一条：再差的目标，也胜过没有目标。</h3><p>当你有了一个恋爱目标，哪怕你定的不是特别准，你也可以在生活中慢慢修正。但是，就怕你毫无目标，始终在原地兜兜转转；有一个恋爱目标，哪怕定的特别高，你也可以在人海中慢慢寻找，就怕你一点头绪都没有，碰见对的人都不自知。</p>
<p>《天龙八部》中有一个叫虚竹的人物，他的恋爱目标就是找初恋，但是初恋叫啥名、长啥样，一概不知。你看，这个恋爱目标是不是差到不能再差了，无异于大海捞针，几乎不可能实现。</p>
<p>但就是抱着这样的目标，他在西夏招亲的时候，碰见了梦姑。这是不是像极了我们的现实生活，所以说，只要你目标明确，从不彷徨，人口基数这么大，你总能碰到你想找的那个人。</p>
<p>你可能想问了，那我就想找个好看的、有钱的行吗？当然可以。</p>
<p>你可以在恋爱中追求阶级跃升，找家庭条件最好的，也可以在恋爱中追求精神契合，找兴趣爱好最一致的；你希望在一段恋爱关系中得到生活的照顾，可以专找贤妻良母型为你洗衣做饭的；也可以在一段恋爱关系中想得到事业的支持，专找女强人型愿意陪你披荆斩棘的。</p>
<p>但你不能不知道自己到底要什么，也不能什么都想要。</p>
<p>其实，最痛苦的就是这种半吊子。半吊子们，既无法彻底坚持理想主义，搞纯粹的爱情，又无法彻底向功利主义低头，去做现实的奴隶，他们站在此岸望彼岸，两头不靠岸。</p>
<h3 id="第二条：再好的目标，也得服从人生目标"><a href="#第二条：再好的目标，也得服从人生目标" class="headerlink" title="第二条：再好的目标，也得服从人生目标"></a>第二条：再好的目标，也得服从人生目标</h3><p>恋爱是人生的一部分，不能孤立地评判爱情，好的感情应当是让人生变得更好，而不是相反。</p>
<p>最近有部大热的剧叫《沉默的真相》，不知道你有没有看过？剧中的主人公叫江阳，是一名检察官，本来有着大好前途，但为了查清一起因高官性侵女童引发的冤案，也为了给山村支教同学侯贵平一个清白，付出了无数代价甚至身陷囹圄。</p>
<p>当然，在这个专栏里，我们要分析的不是江阳的正义感。我要讲的是，我当时在看剧时，观察到的剧中的一些情节，也就是江阳的爱情，虽然着墨不多，但也值得分析。</p>
<p>江阳的初恋是市副检察长的千金吴爱可，但是，最终他选择了和一名纺织厂女工郭红霞结婚。论出身、论颜值、论学历、论工作，吴爱可都是秒杀郭红霞的存在。那为什么江阳不选吴爱可呢？</p>
<p>因为，再好的恋爱目标，也要服从于人生目标。</p>
<p>江阳自从介入这个案件后，人生目标就是一件事——求个公道。吴爱可也很愿意求公道，但求公道的前提是她那个副检查长老爹能摆得平，当她发现对方势力过于强大可能伤及自身的时候，吴爱可就怂了，这就是我们经常能遇到的，精致的理想主义者。</p>
<p>相反，郭红霞出场不多，寥寥几笔我们就能发现，这个女人不是英雄江阳背后的女人，而是英雄本雄。无论顺境逆境、贫穷富贵，始终无怨无悔支持丈夫追查案件真相，可谓坚定执着、深明大义。我想作者将其命名为郭红霞的时候，必然脑海里也闪现过郭靖郭巨侠那平凡又伟大的母亲。</p>
<p>如果说，江阳是跃向空中划开乌云的追光者，一心只为求公道、求得人间正义，那么，红霞就是替他承受现实引力的守护人，志同道合、一体两面。</p>
<p>爱情就是一场自我修炼，找对象其实也是在找寻自我。</p>
<h3 id="第三条：恋爱目标，要以我为主"><a href="#第三条：恋爱目标，要以我为主" class="headerlink" title="第三条：恋爱目标，要以我为主"></a>第三条：恋爱目标，要以我为主</h3><p>所谓的以我为主，就是恋爱目标的制定，决定因素应当在自己而不是在他人。当你把目标从取悦他人转到取悦自己上来，你会发现恋爱将变得前所未有的简单，也前所未有的充满意义。</p>
<p>我曾经做情感咨询的时候，遇到过一个男生，他自嘲自己是标准的舔狗。每天给人发几十条消息却收不到几条回复，逢年过节就绞尽脑汁给人送礼物，却频频被拒收，只有在人家失恋空窗期的时候，他才能捞着几次约会机会。</p>
<p>他自我感觉状态很差，却又欲罢不能。姑娘对他的拒绝和冷漠让他十分痛苦，但偶尔的联系却又让他激动不已，见一次面就像打了兴奋剂，充能好几天。</p>
<p>我帮他分析，他之所以处于这种状态，未必是他真有多喜欢那个姑娘，更多是他沉浸于自己设定的游戏，只是想赢而已。偏偏这场游戏还不受他自己控制，纯 AI 代打，输赢皆在人家一念之间。</p>
<p>与其用尽心机、想尽办法让别人过得更好，不如让自己过得更好。当他下定决心斩断这段关系，开始尽力过好自己生活后没几个月，这个姑娘居然开始主动联系他，约他出去吃饭看电影了。</p>
<p>所以，尽管恋爱目标没有标准答案，但我都推荐你将这条作为自己的恋爱目标之一。</p>
<p>那就是通过一段感情，变成更好的自己，这不是鸡汤。</p>
<p>这个好，可以是事业的提升，我努力升职加薪，当上 CEO，就是为了迎娶白富美，走上人生巅峰，这当然没有问题；这个好，也可以是视野的开阔，为了一个人，去到了从未踏足的地方，见到了从未看过的风景，吃到了从未尝试的美食，多了以前想象不到的人生体验，这非常美好。</p>
<p>这个好，还可以是情感能力的提升，学会了如何爱一个人，也学会了如何享受被爱，明白了如何在习惯的生活中接纳一段亲密关系，这都是宝贵的财富。只有当你把恋爱的出发点和落脚点转回到自己身上时，你才会发现很多困扰自己的问题，都不再是问题。</p>
<h2 id="如何找到自己的恋爱目标？"><a href="#如何找到自己的恋爱目标？" class="headerlink" title="如何找到自己的恋爱目标？"></a>如何找到自己的恋爱目标？</h2><p>现在，你应该对恋爱目标有一个新的认知了，那么，怎样才能找到自己的恋爱目标呢？我给你提供了一个简单的“目标三步走”小方法，你可以试一试。</p>
<p>Step1：在任意一个空闲的晚上，在一张纸上列出下面的内容：</p>
<p>你希望在一段感情中得到什么？</p>
<p>你绝对不能妥协牺牲的底线是什么？</p>
<p>这两点，每一点分别写五条，然后再划掉两条，这是一个不断权衡的过程。</p>
<p>Step2：在纸的另一侧，列出你人生的理想和中期、短期规划目标。</p>
<p>Step3：当你进入一段感情后（包括在追求期），每隔一段时间，你就拿出这个恋爱目标单进行迭代。如果你处于一段感情很久了，你也可以用这个方法，写下这段感情的目标。</p>
<p>当你觉得距离人生理想更接近了，就修改底线；</p>
<p>当你觉得距离人生理想更遥远了，就修改目标；</p>
<p>当你觉得这段感情偏离四个以上的恋爱目标，就认真考虑脱离这段感情。</p>
<p>示意图</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412091902429.jpeg" alt="img"></p>
<p>这个方法也许不会帮你确定一个完美的目标，但是一定会让你在这个过程中，有所收获。有的时候，在情感问题上，万有引力那个公式不重要，那个砸中牛顿的苹果才重要。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>恋爱目标不仅是目标，更是你寻找恋爱对象的标准，是你划定一段恋爱关系空间的依据，是做一切恋爱决策的基础，更是你认清自我的过程。</p>
<p>恋爱目标是个战略问题，市面上那些教你约会的方法，告白的方法，哄女朋友开心的等等具体方法都是战术问题，不解决战略问题，战术问题只会按住葫芦起了瓢。</p>
<p>所以，恋爱问题千变万化，但万变不离其宗。目标不对，努力白费；目标搞对，一步到位。</p>
<p>今天我们讲了三条确定恋爱目标的原则，一是再差的目标，也胜过没有目标；二是恋爱的目标，要服从人生的目标；三是恋爱目标，要以我为主。</p>
<p>丧失自我的恋爱关系，走到一起也是失败；帮你找到自我的恋爱关系，分手了也是成功。</p>
<p>“贵以身为天下，若可寄天下，爱以身为天下，若可托天下”。以我为主，不仅是恋爱的智慧，更是人生的智慧。</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412091902021.jpeg" alt="img"></p>
<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>回忆你的感情经历，或者是展望你的未来，思考一下，你的恋爱目标是什么？有没有发生过变化？你的恋爱目标，是否符合这一讲所说的三个原则呢？</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>02 拒绝焦虑状态：TA到底爱我吗？</title>
    <url>//posts/3b8e8cf3/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="02-拒绝焦虑状态：TA到底爱我吗？"><a href="#02-拒绝焦虑状态：TA到底爱我吗？" class="headerlink" title="02 拒绝焦虑状态：TA到底爱我吗？"></a>02 拒绝焦虑状态：TA到底爱我吗？</h1><p>在我做情感咨询的这么多年里，你猜一下，我被问的最多的一个问题是什么？这个问题就是：“老师，你觉得 Ta 到底喜不喜欢我？”或者，“Ta 到底爱不爱我？”</p>
<p>比如，曾经有个朋友问我：“有个女生主动给我发‘在吗’，是不是说明她喜欢我？我回复她以后，她又不理我，是不是说明她对我欲擒故纵？以后会不会对我有情感 PUA 呀？”</p>
<p>嗯，我看了看他聊天记录，告诉他，你隔了十几个钟头才回复人家，可能人家已经借到钱了……</p>
<p>还有人拿着图来咨询我，这个人以日期为横轴，以双方发信息的条数比为纵轴，做了一个点状图。他说，最近比例显著升高，是不是说明妹子开始对我感兴趣了？我好奇地问了一下他的职业。结果他告诉我，他是搞金属材料的在读博士生。好吧，真·钢铁直男。</p>
<p>可以说，几乎所有刚进入恋爱状态的男男女女，最爱干的事情就是拿着放大镜去观察心仪对象的一举一动，然后化身为福尔摩斯，动不动就能分析出对方一万字的心理活动，而这一切，就只是为了知道对方到底喜不喜欢自己。</p>
<p>那么，我们今天就来研究一下，到底该如何破解这个“千古谜题”。</p>
<h2 id="为什么你这么焦虑？"><a href="#为什么你这么焦虑？" class="headerlink" title="为什么你这么焦虑？"></a>为什么你这么焦虑？</h2><p>想要找到破局之道，我们就先来好好研究一下这个“论题”。</p>
<p>先要思考的是，你为什么会问这个问题？在我看来，当你开始有这种困惑，迫切地想知道一个人对你的心意时，我不用听你任何的介绍，当然无法确定 Ta 是不是喜欢你，但有 3 点可以肯定：</p>
<p>第一，你对这个人有好感；</p>
<p>第二，你对这个人没把握；</p>
<p>第三，你希望找到一些依据给自己勇气，来支撑自己继续坚持。</p>
<p>因为，我完全能体会，当你深深爱上一个人的时候，Ta 的一言一行、一颦一笑都让你不能自已，你急切地希望从中能解读出一点蛛丝马迹，给自己支撑下去的力量和勇气。</p>
<p>我曾经也研究过语义分析来解析聊天记录；研究过摄影构图用以解析朋友圈自拍；当然，我也研究过心理学和微表情学，甚至研究过易经、塔罗牌、星座、星命术这些奇门异术。</p>
<p>目的只有一个，就是为了向自己证明——她也爱我。</p>
<p>但是，这种状态其实非常糟糕。以金庸老爷子的小说为例，在他的武侠世界里，有多少男男女女，但是，就有那么两个人，特别纠结别人喜不喜欢自己，还是两个男人。</p>
<p>一个是《书剑恩仇录》里的男主陈家洛，另一个是《飞狐外传》的男主胡斐。这两个人，你可能认识，听说过，但是不认识也不要紧，我来给你简单地讲讲。</p>
<p>首先是陈家洛这人，他喜欢一个叫霍青桐的妹子，但是他又不敢表达，一天到晚猜来猜去的，思考霍青桐到底喜不喜欢自己。结果，他看见了霍青桐和一个女扮男装的妹子在一起神态亲昵，陈家洛就醋意大发、自暴自弃，最后他选择了另一个女人的怀抱。</p>
<p>胡斐这个人更惨一点，他爱上了一个叫袁紫衣的妹子，那叫一个心生爱慕，小鹿乱撞。但是他也不敢表达，也是一天到晚猜来猜去，纠结袁紫衣到底喜不喜欢自己。两人不清不楚了一整本书，到最后，袁紫衣告诉胡斐，自己已经遁入空门，两个人不可能。</p>
<p>有没有觉得这两个人在感情中失败，还挺可怜的？但是，在武侠论坛，陈家洛和胡斐这哥俩，不仅没被同情，还常年高居渣男榜、最惹人嫌男主榜等各大负面榜单的前列，甚至超过很多反派。</p>
<p>为什么会这样？</p>
<p>关键原因就在于，他们在这种试探中太优柔寡断、太犹豫不决，以至于无论是武功低微、脚踏七条船的韦小宝，还是绝对反派、专干坏事的金轮法王，人气值和好评率都远远超过这两位男主。</p>
<p>也就是说，痛痛快快地勇敢追求心中所爱，成了，你抱得美人归；没成，你也可以昂首挺胸走出这段关系。任何人挑不出你毛病，拒绝你追求的姑娘，也得给你点个赞：“是个坦荡人”。</p>
<p>最糟糕的就是爱情中黏黏糊糊的人，当断不断、循环往复、来来回回、不清不楚，既浪费自己的时间，也浪费他人的时间。</p>
<p>当你一直焦虑对方是否喜欢你时，你在这段感情关系中的行动策略已经不取决于你自身的意志，而是被他人的情绪操控，处于一种被决定的状态，这和上一讲所说的以我为主的原则是冲突的。</p>
<p>所以，破局之道的第一要点就是，你要先改变自己这个状态，千万不要因为对方可能喜欢你，你才去喜欢人家，你最需要做的不是焦虑对方是否喜欢你，而是要确定自己是否喜欢对方。确定了这一点之后，我们才可以进入下一个环节。</p>
<h2 id="你是主动派-or-被动派？"><a href="#你是主动派-or-被动派？" class="headerlink" title="你是主动派 or 被动派？"></a>你是主动派 or 被动派？</h2><p>当你确定了自己的心意之后，后续策略无非就是两种：一种是原地等待，创造机会让对方举着爱的号码牌来找你；一种是你主动出击，大胆地去确认对方对你的心意。</p>
<p>所以，现在你的面前，摆着两条路，一条是被动等待，一条是主动出击，你会选择哪种？</p>
<h3 id="如果你选被动等待"><a href="#如果你选被动等待" class="headerlink" title="如果你选被动等待"></a>如果你选被动等待</h3><p>做出这个选择很好理解，这样更安全。只要等对方去推动关系后，你再去跟进，你就可以一直立于不败之地。进可攻退可守，主动权永远在自己手上。但是我还是有一件重要的事情要告诉你，这件事是关于自我：主动出击并不会受制于人。</p>
<p>很多人觉得，在爱情中先行动的人是输家，投入更多的人是输家，这其实没有看到本质。</p>
<p>当初，郭靖为了要跟黄蓉在一起，郭靖又是请客吃饭，又是赠衣赠马，是不是看起来，他是主动示好、率先行动的一方，但在郭黄两人的情感中，掌握主导权的永远是郭靖。</p>
<p>他要闯赵王府，黄蓉就陪他闯，他要守襄阳，黄蓉就陪他蹲在襄阳几十年。</p>
<p>因为你看见和你认为的主动出击，都是主动出击讨好对方，是把决定权交到了对方手里，是渴望对方关注自己。但是，郭靖的主动示好，是他的本性如此，不管黄蓉认不认同，他在那个情况下都会请客吃饭。</p>
<p>所以，你根本不需要去猜测对方心意到底如何，你要拥有一种勇气，一种哪怕到了最后对方不喜欢自己，但你做过的事情仍然是你愿意做、喜欢做的事情的勇气。</p>
<p>“为爱痴狂，并非为你痴狂，所谓少年，不过如此而已！”</p>
<p>你可能不知道，往往这个过程的你是最能展现自我价值的时刻。</p>
<p>赵敏和张无忌在一起，赵敏主动，全书倒追男主，但魅力爆棚；</p>
<p>段誉和王语嫣在一起，段誉主动，全程跪舔女主，但人气超高。</p>
<p>因为他们享受这种主动出击的过程，即便他们喜欢的人对他们态度毫无改变，他们依然享受。</p>
<p>所以，选择被动等待的策略并不意味着始终等待对方先行动，适时主动出击不但不会让你受制于人，而且能够让你更加享受这段关系。</p>
<p>还有我想说，当你选择被动策略时，意味着你的目标对象承担了更多的责任和压力，一点点的主动，也会让 Ta 感受到莫大的安慰。在恋爱中，永远要做个善良的人，这比恋爱更加重要。</p>
<h3 id="如果你选择主动出击"><a href="#如果你选择主动出击" class="headerlink" title="如果你选择主动出击"></a>如果你选择主动出击</h3><p>如果你选的是主动出击，那么我很开心你有这样的勇气，在你“出征”前，我想交代给你一件事情，这件事是关于魅力的吸引力法则：吸引力不仅取决于价值，也取决于可得性。</p>
<p>价值很好理解，就是身高体重、家世学识、颜值收入等等这些客观条件，传说中的高富帅、白富美，都是在形容价值，当然，我们都知道，价值越高的人吸引力越大。</p>
<p>可得性的意思，就是成功牵手的期望值。期望值过高，人家觉得吃定你了；期望值过低，根本没戏，这样即便你价值很高，也没有吸引力。这期望值必须不高不低刚好合适，有个最佳范围。</p>
<p>比如说，对于一个男生来说，如果范冰冰和隔壁颜值很高的同事小姐姐，同时放在他面前，让他选择，他大概率会选后者，因为前者对于他来说，可得性太低。</p>
<p>你看，这个法则也有力解释了一个现象，就是为什么男神女神经常没人追，为什么有些人条件一般却很有异性缘。有时候，单身，可能不是你不够好，而是你太好。</p>
<p>短时期内，人的价值很难发生大幅变动，而决定两个人吸引力大小的关键变量就是可得性。</p>
<p>无论对方价值高低，当你主动出击时，又纠结对方爱不爱你时，一定是对方可得性处于最佳值。而你恰恰相反，对方一旦稍加示好，让你解读出积极信号，你就会喜上眉梢，使你可得性过高，吸引力大大降低。</p>
<p>能猜对人家心思不是高手，适当让人家猜你心思才是高手。</p>
<p>所以，主动不该是每天一成不变的硬刚，而是以一种时强时弱、时快时慢的节奏，让对方无法准确预测你下一步行动，同时知道你的心意，也期待你的行动，更害怕你的失去。</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412091902442.jpeg" alt="img"></p>
<p>也许，你发现了，我给被动等待的人的建议是，别太被动；我给主动出击的人的建议是，别太主动。这看似朴实无华的道理，蕴藏了深意，总结就是：既不刻意讨好，也不掩饰喜欢。</p>
<p>主动和被动从来都没有明确的界限，两个人的关系应该像弹簧，Ta 强你就弱，Ta 弱你就强，和谐的起点就是让爱情的小树苗在相互试探、相互追逐中茁壮生长。</p>
<h2 id="爱情是从“我”入手"><a href="#爱情是从“我”入手" class="headerlink" title="爱情是从“我”入手"></a>爱情是从“我”入手</h2><p>其实，找对象的本质是个信息交换的过程，“喜欢你”是这个过程中最基础、最先发的信息。最好的关系是，既不用表白也不用猜，互相喜欢这件事，你们就是“两个心里都知道的”。</p>
<p>因为喜欢一个人，不管怎么藏都是藏不住的，再迟钝的汉子，也能第一时间感知到。比如说，《天龙八部》里面，绝对感情迟钝、钢铁直男的萧峰。</p>
<p>阿朱：“我小时候睡不着，我妈便在我床边唱歌儿给我听。只要唱得三支歌，我便睡熟啦。”</p>
<p>萧峰：“这会儿去找你妈妈，可不容易。”</p>
<p>萧峰面对马夫人这样的人间绝色，喝酒后被猛撩，他一样毫无知觉，甚至都忘记了这件事。但是阿朱陪在他边上没几天，萧峰就说“四海列国，千秋万代，就只有一个阿朱！”</p>
<p>真心爱慕和蓄意撩拨，完全不同。真正的喜欢，是一片赤诚的坦然相对，是自然而然的真情流露，是不加修饰的一尘不染，你根本不会有丝毫犹豫就能确定。</p>
<p>而人总是想给自己留一点余地，你明知道对方大概率不是特别喜欢自己，但想作弊看看对方的底牌，然后我再考虑在这个爱情的赌桌上加注，所以要反复猜测对方到底有多喜欢自己。</p>
<p>但是，要记住，找一个人谈恋爱绝不是因为这个人在暗暗喜欢你，而必须是因为你足够喜欢这个人。因为足够喜欢，所以勇敢，这种勇敢不是直勾勾地表白，也不是惨兮兮地跪舔，而是坚持自我、展现自我、享受自我的过程。</p>
<p>所以，即使看牌的机会有很多，但真心喜欢的人错过一个就少一个，偶尔也勇敢点，该 all in 就大胆上。毕竟，有时候，感情不是稳扎稳打的将就，而是一往无前的梭哈。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>打游戏都希望自己有能开全图的作弊器，谈恋爱都希望自己有知人心意的金手指。</p>
<p>这虽是人之常情，但不是明智之举。因为它本质上是一种不自信，不自信会降低你的自身魅力，也会干扰你的决策判断。所以，相比猜测对方心思而言，不如先改变自己的状态。</p>
<p>如果你选择被动等待，那么我想告诉你，主动出击并不会受制于人；如果你选择主动出击，那么你要记住吸引力不仅取决于价值，也取决于可得性，可以主动，但要有节奏的变化。</p>
<p>最后，我想说，爱情的牌怎么打，不单单取决于对方的底牌，更重要的是自己有哪些牌。如果你确定自己足够喜欢足够爱，拿着 4 条 A 就该勇敢甩出啊。</p>
<p>比起开全图的上帝视角，飞龙骑脸他赢得不是更香吗？</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>04 亲密关系的本质是分享：如何把握暧昧的窗口期？</title>
    <url>//posts/54d4db9e/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="04-亲密关系的本质是分享：如何把握暧昧的窗口期？"><a href="#04-亲密关系的本质是分享：如何把握暧昧的窗口期？" class="headerlink" title="04 亲密关系的本质是分享：如何把握暧昧的窗口期？"></a>04 亲密关系的本质是分享：如何把握暧昧的窗口期？</h1><p>我曾经做过一个小调查，问很多情侣这样一个问题，“你们在这段感情中印象最深刻，让你最心动的事情是什么？”</p>
<p>事情当然各不相同，但发生的时间惊人一致，百分之七十都发生在暧昧期。</p>
<p>大家普遍反映，在暧昧期的时候，对方的一举一动都会引起自己几分猜想，两个人相处时还带着点拘谨和不自然，会不停地试探，试探中带着点期待，没有哪个阶段会这么让人心跳不已了。</p>
<p>的确，从心理学的角度来讲，有理论说一个情绪周期是 28 天的，还有说新鲜感只能维持三个月的，还有从生物学角度分析激素分泌周期的。但是，无论我们采取哪一种说法，男男女女在一起确实有个微妙的窗口期。</p>
<p>在这个窗口期，双方既建立了初步的信任，又还保留着神秘的面纱，相互之间吸引力、安全感都处于最佳状态。我们管这个窗口期就叫作暧昧期，把握住这个时期，升级关系会事半功倍。</p>
<p>所以，这一讲我们就来聊聊，在这段非常关键的暧昧期，我们应该做些什么。</p>
<h2 id="怎样判断自己处于暧昧窗口期？"><a href="#怎样判断自己处于暧昧窗口期？" class="headerlink" title="怎样判断自己处于暧昧窗口期？"></a>怎样判断自己处于暧昧窗口期？</h2><p>在分析应该做什么之前，我们得先学会判断自己和对方真的进入了暧昧期。不光可以检查自己是不是想多了，还可以及时适当地提醒自己，该改变自己的状态和心态，来迎接这一阶段。</p>
<p>从我接触过的人来看，最短的认识一天就开始暧昧，最长的我见过维持了八个多月的。暧昧这件事，不像炒菜，有个煎炒烹炸的时间指标，而是一种感觉指标，偏感性。</p>
<p>所以，要记住，我们不能用时间的长短来判断是否进入了暧昧窗口期。</p>
<p>其次，暧昧的核心感觉是不确定性，既对对方的心意不确定，也对自己的心意不确定，正是这种不确定加强了这段关系的吸引力。这就好比 100% 获得两千万和 10% 的机会获得 10 亿，虽然后者的收益期望值比前者高五倍，但绝大多数人仍然愿意选前者，这叫风险厌恶。但是同理，当你打牌赢了上万块时获得的愉悦感，远远超过月底搬砖结工资时候获得那约定好的上万块。</p>
<p>所以，如果说恋爱像是发工资，暧昧就像是赌博，同样是收钱，但心态和感觉完全不同。</p>
<p>根据暧昧的这种特点和性质，我总结了以下进入暧昧期和退出暧昧期的几个标志。</p>
<h3 id="进入暧昧期的三个显著标志"><a href="#进入暧昧期的三个显著标志" class="headerlink" title="进入暧昧期的三个显著标志"></a>进入暧昧期的三个显著标志</h3><p>第一是特别感。</p>
<p>特别感是一种神奇的感觉，张无忌遇到周芷若可以感觉很特别，胡一刀遇到苗人凤可以感觉很特别，郭靖遇到男装的黄蓉也可以感到很特别，令狐冲遇到老丈人任我行同样可以感到很特别。</p>
<p>特别感就是一种独有的吸引力，大千世界、芸芸众生，唯有在你身上见到这种别样的特质，这当然是一种好感。同时表达特别感又很安全，朋友之间、对手之间、恋人之间都可以有特别感。</p>
<p>因此，一旦有异性表示，你在任何一个方面有 Ta 从未遇到过的特别之处，哪怕是一个很奇怪的特别，都说明你俩关系可能已经进入暧昧期。</p>
<p>此时此刻的你，至少已经与别人不一样，值得 Ta“另眼相待”。</p>
<p>这个时候，你看诸葛丞相说的那句“我从未见过如此厚颜无耻之人”，是不是有种万人会场公然秀恩爱的 cp 感了？</p>
<p>第二是细节感。</p>
<p>如果说特别感是一种吸引力，那么细节感就是一种注意力。</p>
<p>比如说，你随口说过的一句话，做过的一件事甚至是一桌人聚餐时多吃了两口喜欢吃的菜，这些小小的细节，却被对方不经意间都记在心里，那么你们细节感就很满了。</p>
<p>特别感是因，细节感是果，在这个注意力极其珍贵的移动互联网时代，能够在你身上投入相当程度的细节记忆力，已经充分说明了你的重要性。但同时，表达细节感的时候又带有一点犹豫。</p>
<p>毕竟，一个细心的人、体贴的人对谁都可以满满细节感，也不能实锤就是喜欢吧。所以，如果出现了这种欲说还休的感觉，把细节感的张力拉满，这就是一种暧昧的小表现。</p>
<p>第三是抗拒感。</p>
<p>我们刚才说了，暧昧的本质是不确定性，那么抗拒感就是不确定性的原因。所谓暧昧，一定是两个人互有一定好感的同时，还有一定防备。这种抗拒感可能因为抗拒确立双方关系，也可能是抗拒关系太快发展、抗拒肢体接触、抗拒主动表白、抗拒在朋友前暴露对方存在等等……</p>
<p>金海心有首歌，叫《那么骄傲》，里面有句歌词是，别那么骄傲，我随时可能走掉。而这种随时可能失去对方的抗拒感，却恰恰是暧昧期特有幸福感的重要来源。</p>
<p>如果出现以上三个信号，那么恭喜你，大概率你和对方已经进入暧昧窗口期。</p>
<p>当然聪明如你，看到这里肯定也想到了，这不仅是个判断标志，也是实操手册。如何与异性营造暧昧氛围，按着这三条来，不比买个花、点个蜡烛什么的来劲多了。给你举几个例子：</p>
<p>偶尔表达对方的特别感，“哇，你是我遇见过的姑娘里面，第一个会自己动手装家具的耶。”</p>
<p>在不经意间表露自己的细节感，“哈哈，你上个月有一次听这首歌的时候循环了好几遍，我就猜你喜欢这首歌~”</p>
<p>在安全范围内，制造一点点抗拒感，“今天聊得很开心，明天还要上班，早点休息吧。”</p>
<h3 id="退出暧昧期的三个显著标志"><a href="#退出暧昧期的三个显著标志" class="headerlink" title="退出暧昧期的三个显著标志"></a>退出暧昧期的三个显著标志</h3><p>如果在窗口期，你没有果断把握机会，随着时间流逝、生理心理各种因素共同作用，你们也许就会失去成为恋人关系的可能，向好朋友的方向狂奔。所以能识别退出暧昧期的标志也很重要。</p>
<p>第一，抗拒感逐步消失。</p>
<p>有人觉得，抗拒感逐步消失是不是说明对方在接受我？不是的，因为如果你在暧昧期没有什么有效行动的话，抗拒感逐步消失的更大一种可能就是，你的异性吸引力在逐步消退。</p>
<p>可能以前拒绝你晚上来家里坐坐，是怕控制不住自己和你擦枪走火。现在邀请你进屋，不是同意和你做点什么，反而是笃定你俩啥也干不了。是你在对方眼里的异性攻击力不断消退，显得越来越安全，所以人家不拒绝和你进一步深入接触。</p>
<p>这也就是为什么一旦成了朋友，再想转身份成为恋人就会难度翻倍！</p>
<p>第二，开始公然损你。</p>
<p>你知道暗暗喜欢你的朋友和真正朋友之间最大的区别是什么吗？</p>
<p>真朋友可能会在别人面前损你，抖你的糗事；但喜欢你的人，私下里或许也会挖苦你几句，但在有其他人在场的情况下，Ta 绝对会小心翼翼地避过所有可能让你没面子的事情。所以，当对方开始频频当着其他人的面，毫不顾忌开玩笑嘲讽你的时候，你们的暧昧期就即将到头了。</p>
<p>第三，规律性逐渐增强。</p>
<p>暧昧的核心在于不确定性，而这种心理感觉消失的表现就是一切可预测。</p>
<p>本来两个人是忽冷忽热、忽近忽远的关系，现在两人关系在靠拢的过程中形成了平衡。每天固定会聊天道晚安，每周固定时间约会吃饭，互相了解程度增加，你说 A 大概率猜到对方会说 B。当两个人一切互动开始不可避免地固化之后，暧昧的因素也就即将消失了。</p>
<p>所以，当以上三个情况逐一出现时，暧昧窗口期即将关闭，此时你必须抓紧时间、加快进度了。</p>
<p>不过，和暧昧期即将关闭相比，还有一种情况我们需要注意，就是恶性暧昧关系。</p>
<p>什么是恶性暧昧关系？在异性关系的发展过程中，自然进入的暧昧关系，终点指向确定的恋爱关系，可以称之为良性暧昧关系。然而恶性暧昧关系，指的是不想承担责任，不愿给予承诺而只享受暧昧的红利。如果你遭受这种关系，你必须学会坚决斩断。</p>
<p>良性暧昧关系和恶性暧昧关系的区别主要有三点：</p>
<p>一是良性暧昧的感觉是双方，恶性暧昧的感觉是单向的；</p>
<p>二是良性暧昧关系可互动可升级，恶性暧昧关系始终无法升级；</p>
<p>三是良性暧昧关系的发起方抗拒感较弱，恶性暧昧关系的发起方反而抗拒感较强。</p>
<p>最后，恶性暧昧关系的时间一般长于良性暧昧。</p>
<h2 id="窗口期最重要的任务"><a href="#窗口期最重要的任务" class="headerlink" title="窗口期最重要的任务"></a>窗口期最重要的任务</h2><p>我们现在已经学会如何分辨暧昧窗口期的进入和退出“标志”了，那么，我们在这段重要和关键的时期，到底应该做什么呢？仅仅是说几句话术，多约出来见几次面吗？</p>
<p>并不是。暧昧窗口期最重要的任务，就是借助这段时间特有的吸引力，迅速升级双方关系。那么问题来了，亲密关系或者说恋爱关系的本质是什么？什么叫升级关系？</p>
<p>血缘关系很简单，看 DNA；雇佣关系也很简单，看合同。那亲密关系看什么？有人觉得相互确认关系就是情侣，也有人觉得对外宣布关系了才算情侣，还有人觉得要上了几垒才算情侣。</p>
<p>但是，现代社会越来越开放，就算上了本垒也未必就能成为情侣。在我看来，所谓关系，更多是精神上的定义，也是更稳定可靠的定义。恋爱关系的核心在于信息交互！</p>
<p>信息交互的层级决定了两个人关系的远近，交互层级越浅，可交互人数就越多，关系就越疏离；交互层级越深，可交互人数也就越少，关系也就越亲密。</p>
<p>比如说，如果有一个异性和你成为少数一两个可以相互交换某些深层次信息的时候，注意！是相互交换。无论你们有没有表白，你们已经实质上进入一段亲密关系中了。</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412091903762.jpeg" alt="img"></p>
<p>我粗略地将信息交互的层级分为六层：</p>
<p>\1. 兴趣爱好</p>
<p>这是非常开放的信息，也是作为朋友的起步层级。</p>
<p>如果两个人之间愿意交流兴趣爱好，在一起打牌、玩游戏、看话剧等等，并就这些爱好展开聊天互动，就可以成为朋友。这个层级人数最多，也是你和异性之间互动的起点。</p>
<p>\2. 价值观</p>
<p>这个信息相对私密，起码要进入密友的程度，才会围绕这个主题展开信息交换。</p>
<p>你很难想象两个相识不久，只是在一起作为牌搭子的人会在一起谈人生、谈理想、谈未来，那是很尬的。能谈这些的，一定得是非常好的朋友。当你和某个异性进入这个话题，说明你们之间关系已经开始不一般，有一些感觉了。</p>
<p>\3. 社交关系</p>
<p>每个人都有自己的核心社交圈，当你向某个人开放自己核心社交圈的时候，这个人显然已经是你极其亲近的人。当你和异性能够频频地、又自然地出现在对方核心社交圈内，无论互相怎么介绍，在旁人看来，你们之间肯定有点什么了。</p>
<p>\4. 情绪</p>
<p>成年人的世界没有容易二字，崩溃都需要找个合适的时间。分享情绪信息给他人是一件非常危险的事情，一般也只有家人会无条件接受你的情绪输出。所以说，当你能够和一名异性在任意时间分享情绪信息的时候，你们可以说已经实质上建立了情侣关系。</p>
<p>\5. 性</p>
<p>滚床单不等同于性层面的交互，其实握个手、抱一抱都算作这方面信息的交互，当然了，滚床单也可能完全不涉及这个层级的互动。语言、肢体甚至眼神都可以是这个层级交互的媒介，而这也是可能恋爱甚至结婚多年都达不到的交互层级。</p>
<p>\6. 隐秘</p>
<p>人心里都有一个隐秘的角落，藏着自己不为人知的秘密、不堪回首的事情，这是一个人最软弱的要害。当你可以放心和一个人互相分享这个隐秘的角落时，你们已经成为密不可分的整体了。</p>
<p>窗口期最重要的任务，就是根据这个信息交互层级，一层一层地深入下去。主动方首先表露自身某个层级的部分信息，然后引导对方表露。当双方都可以稳定开展某个层级的信息交互后，就可以开启下一个环节了，亲密关系就会越来越近。</p>
<p>这个进度表最大的好处在于，不会给你们之间带来很多压力。云淡风轻一层层聊下去，每一层都很自然，也不像送人礼物，约会吃饭之类的需要承担被追求的压力。</p>
<p>比如说，当你们都开始顺利交换情绪信息，人家什么开心的事先告诉你，难过的事情也告诉你后，在你这里寻求你给 Ta 的情绪支持，那你还要表什么白呢？</p>
<p>但是，注意，千万不要越级自爆。刚刚认识一个同样喜欢打游戏的异性，一起玩了几把游戏，你就直接越级去聊性话题，就自爆内心最深处的秘密，那叫交浅言深，毫无效果且危害极大。</p>
<h2 id="粉红色的回忆"><a href="#粉红色的回忆" class="headerlink" title="粉红色的回忆"></a>粉红色的回忆</h2><p>曾经有个颜值不错，性格更加不错的姑娘问我，为啥感觉对她有意思的男生不少，但最后都处成了兄弟？我只能告诉她，搞对象如同烹小鲜，火候没到贸然越界会吓跑对方；火候过了又失去新鲜感只能做好朋友，必须把握这个既熟悉又陌生的机遇期。</p>
<p>《倚天屠龙记》里面我最喜欢的赵敏，她就非常善于把握时机，绿柳庄初见张无忌时，虽然敌友难辨，她也疯狂秀了自身的价值，之后又狠狠坑了张无忌的明教一把。张无忌为了逼问离开陷阱的方法，把赵敏的鞋袜都脱了搞人家的 jio，这时候气氛已经有那味了。</p>
<p>不过两个人初次相见，相互之间防备心还很重，赵敏就啥也没说。直到武当山交锋，互有胜负后赠珠花示好，升级暧昧气氛，元大都再遇后才开始表露心迹，节奏这块拿捏的死死的。</p>
<p>回到今天一开始我说的那个调查，难道确定关系后的热恋期不香吗？为什么这么多人对暧昧期的印象如此之深？因为，暧昧期的确有它的魅力所在，你看电视剧里那些处于暧昧期的小男生小女生，看个电影吃爆米花，只是手不小心地碰到了，两个人就脸红心跳个不行。</p>
<p>在暧昧期，你爱的那个人仿佛身上有光，你看 Ta 的时候眼里都自带滤镜；你们不需要多大的磨合，Ta 说什么你都爱听，更没有柴米油盐的烦恼，让你们疲于生计，忘了爱情。</p>
<p>“虽然我不确定会不会真的喜欢你一辈子，但是，当下爱你的程度，让我想说出这句话。”</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>暧昧是恋爱的窗口期，是双方安全感和神秘感处于最佳状态的机遇期。</p>
<p>尚未进入暧昧窗口期，两个人恋爱火候还没到，推进关系可能会把人吓跑；已经退出暧昧窗口期，两人恋爱火候已老，推进关系变成朋友兄弟。所以要精确判断窗口期的进出标志：</p>
<p>进入标志：1. 特殊感；2 细节感；3 抗拒感。</p>
<p>退出标志：1. 抗拒感逐步消失；2. 开始公然损你；3. 规律性逐渐增强。</p>
<p>还要强调一句，面对恶性的暧昧关系，一定要学会立即斩断。</p>
<p>恋爱关系的核心在于信息交互！窗口期就是要推进信息交互层级的深入。</p>
<p>六个交互层级层级越浅，关系越疏离；层级越深，关系越紧密。两个人交往中表白不重要，能够交互什么信息很重要，真正的高手都是在不知不觉之中拉近双方关系的。</p>
<p>我知道，你也知道，我们有一天可能会分开，但都不知道是哪一天。</p>
<p>或许是明天，或许是永远——暧昧让人最难受的是不确定性，让人最惊喜的也是不确定性。愿你珍惜这段暧昧时光，也愿你能找到那个让你在不确定中相信确定的那个人。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>05 创造型与消费型活动：两个人在一起没事干怎么办？</title>
    <url>//posts/ec953ef6/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="05-创造型与消费型活动：两个人在一起没事干怎么办？"><a href="#05-创造型与消费型活动：两个人在一起没事干怎么办？" class="headerlink" title="05 创造型与消费型活动：两个人在一起没事干怎么办？"></a>05 创造型与消费型活动：两个人在一起没事干怎么办？</h1><p>今天是我们这堂恋爱课的第五讲了，前四讲我们一直在探讨双方在没有确定关系之前，有哪些注意事项和原则。从这一讲开始，我们就要进入恋爱后的世界了。</p>
<p>不过，这谈恋爱后，和谈恋爱前相比，问题是只多不少。其中，最常见的一个问题，也是起码三成以上情侣最终分手的原因，就是两个人在一起没事干，觉得谈恋爱越来越无聊。</p>
<p>热恋期不会有这种问题，两个人身处热恋期，在一起干啥都得劲，就是躺在一起发呆都很甜；恋爱一年以上，这个问题也不是很要紧，因为两个人有很大的可能也找到了相处模式。</p>
<p>最要命的就是热恋期刚过这段时间，两个人尚未磨合完毕，最初的新鲜感、激情又消耗殆尽。这时候，情侣之间会出现一段不知所措的空白期。每次约会不是吃饭，就是看电影，特别单调；聊天也没有共同话题，虽然也开始绞尽脑汁想一些新鲜的点子，却反而弄巧成拙、频频踩雷。</p>
<p>两个人内心自然都不约而同产生一个疑惑，是不是我俩其实没那么合适，在一起只是一时冲动？</p>
<p>最终，两个人也找不到答案，恋情慢慢地走向破裂，就这样无疾而终。很多人就此错过一段姻缘，付出了大量的时间、精力和情绪，美好的恋情却遗憾地收尾了。</p>
<p>所以，这一讲我们就来分析下这个问题。即使你还没有确定关系，我也建议你跟着我一起来探讨这个话题，毕竟，“两个人在一起没事干”这个问题会发生在各个阶段。</p>
<h2 id="消耗价值，边际递减"><a href="#消耗价值，边际递减" class="headerlink" title="消耗价值，边际递减"></a>消耗价值，边际递减</h2><p>首先，我们来对这个问题作一个简单的分析。</p>
<p>两个人在一起没事干，换句话说就是，两个人不知道如何组织两个人在一起的时间。而这种组织时间的能力，不仅是热恋期刚过，其实包括追求阶段在内的整个恋爱过程都特别需要构建。</p>
<p>那么，既然要解题，就要先了解一下题的背景。要是想学会如何组织两个人在一起的时间，起码我们得知道两个人在一起的时间，能做点什么，有哪些活动。</p>
<p>其实，大部分情侣在一起的活动，一般来说可以分为以下三类：</p>
<p>消耗经济价值的活动；</p>
<p>消耗时间价值的活动；</p>
<p>消耗情绪价值的活动。</p>
<h3 id="消耗经济价值的活动"><a href="#消耗经济价值的活动" class="headerlink" title="消耗经济价值的活动"></a>消耗经济价值的活动</h3><p>消耗经济价值的活动就是以消耗钞票为主的活动，比如去餐厅吃饭、看演出、买礼物……在《了不起的盖茨比》中，盖茨比和黛西相处的模式就是这种。</p>
<p>这种活动的好处是，不需要特别多的准备，门槛也低。反正餐厅有贵有贱、礼物有好有坏，总有一款适合你。当然，这里面也有门道，讲究个性价比，在行的一百块钱能花出一千块的效果；不在行的，一千块钱可能只是花了个寂寞。</p>
<p>这应该算入门级活动，所以，如果仅仅停留在这个层次，对推进两人关系其实帮助不大。</p>
<h3 id="消耗时间价值的活动"><a href="#消耗时间价值的活动" class="headerlink" title="消耗时间价值的活动"></a>消耗时间价值的活动</h3><p>消耗时间价值就是不花钱或少花钱，主要是消耗时间，例如看电影、打游戏、聊天、逛街……</p>
<p>这种活动需要一定的前期积累，有一定的技能门槛。比如，逛街你得认识各种牌子吧，人试个衣服化妆品，你能品个优劣；就算打游戏带妹上分，你也得先练几局，别自己菜的抠脚。</p>
<p>两个人在一起，起码要有这种程度的活动，才能算是真正谈恋爱。能够腻在一起浪费时间，起码要有相近的爱好，有共同的话题，互相之间也有足够的兴趣。</p>
<h3 id="消耗情绪价值的活动"><a href="#消耗情绪价值的活动" class="headerlink" title="消耗情绪价值的活动"></a>消耗情绪价值的活动</h3><p>什么是消耗情绪价值的活动呢？就是无论你花费了多少时间还是金钱，但是一定刺激了你们两个人分泌多巴胺的活动。比如说，密室逃生、坐过山车、极限运动、赌博……有部法国电影叫《两小无猜》，男女主人公见面就玩各种刺激的活动，就属于这种相处模式。</p>
<p>网上有很多人推荐这种活动，说是当一个人处于紧张环境中，就会分泌多巴胺，这个人就会把这种记忆跟你绑定在一起。据我观察，这话可能只说对了前一半，刺激性活动确实能够让人记忆深刻，但跟你绑定的未必是什么美好的多巴胺，很可能是惊恐和惊吓。</p>
<p>这三种活动，可以统称为消费型活动。</p>
<p>它们有一个共同的特点，就是存在明显的边际递减效应。再贵、再精美、再喜欢的礼物，你送第二次，也很难博得对方开心了；再好看的电影、再炫酷的演出，你陪人家看第二次，也很难找到当初的感觉了；再吓人的密室、再惊险的活动，玩得久了总会感到腻味。</p>
<p>这也就是你们度过热恋期后，两个人会感到在一起没事干的根本原因。</p>
<p>你们的大部分活动都只是消费型活动，而消费型活动天生受到边际递减效应约束。你们要是想通过这种消费型活动，突破这个约束。你们只能选择不断加量，不断重复，就如同吸毒一样，但你们的钞票、时间和情绪总是有限的，最终还是摆脱不了这种空虚。</p>
<p>如何解决这个问题呢？如果想让星光照进自己生活，最聪明的办法是关上屋里的灯。</p>
<h2 id="创造价值，方为上策"><a href="#创造价值，方为上策" class="headerlink" title="创造价值，方为上策"></a>创造价值，方为上策</h2><p>下面我要隆重推荐第四种相处模式：创造价值的活动。</p>
<p>创造价值的活动，不是简单购买或使用已有事物，而是两个人一起“无中生有”地创造新事物。</p>
<p>比如一起做饭、健身、做手工、考证、创业等等。虽然，创造价值的活动也会消耗你们的时间、金钱和情绪，但这种活动一定有所产出，而且是好处多多。</p>
<p>好处一：有利于营造专属记忆。</p>
<p>在工业时代，绝大多数消费型活动都是流水线产品（当然您要是有钱，样样都是私人订制，可以自行跳过这一点），然而创造型活动却是在生产只属于你们两人的，独一无二的体验和记忆。当你们生命中有了足够多这样的记忆，就永远不用担心没有共同话题。</p>
<p>好处二：有利于推进双方关系。</p>
<p>共同完成一件事的奋斗过程是最容易培养感情的过程。因为历经风雨后的关系愈加的珍贵，所以那些一起扛过枪、一起同过窗的人往往有特别深厚的情感羁绊。</p>
<p>郭靖黄蓉相识是源于小饭店里推衣赠马，但感情升温还得是共同夜闯赵王府寻药救王初一；</p>
<p>杨过小龙女相识是源于孙婆婆的好心，但感情升温还得是共同脱光衣服，修炼玉女心经；</p>
<p>张无忌和赵敏相识是源于绿柳庄里张无忌耍流氓，但感情升温还得是共同寻找金毛狮王对抗明教总坛等一应强敌。</p>
<p>好处三：有利于克服边界效应。</p>
<p>创造型活动不但不会随着次数增加产生厌倦，反而容易上瘾。战胜困难取得成功的快感，是最为强烈又令人着迷的。而且消费型活动会受到资源约束，创造型活动却可以永无止境地发展。</p>
<p>那么，我们该如何去设计两个人共同的创造性活动呢？</p>
<p>其实也非常简单，只要你们把以前爱干的消费型活动往前推一步，也许就是创造型活动。</p>
<p>比如把刷抖音变成拍抖音，你可以和对象共同研究拍摄技巧和套路，然后成为 Ta 的专属摄影师或者模特，一起设计你们的创意视频，每周都拍根本不会腻（除非你们懒）。比如看电影变成拍电影，额，这个太难了划掉，变成写影评，两个人共同写影评记录观影感受。</p>
<p>当你们习惯这些创造型活动带来的快乐，就可以考虑共同升学考证、共同创业这些高端操作了。</p>
<h2 id="成长，永不过时"><a href="#成长，永不过时" class="headerlink" title="成长，永不过时"></a>成长，永不过时</h2><p>原来和对象每次吃人均一百块的餐厅，改吃个人均一千块的，一定会有很好的体验；习惯了每次带对方吃牛排，突然整顿火锅，也一定会有很好的体验。但是，当你自己买菜回家给 Ta 做，不管你烧出什么奇形怪状的东西，一定会别有一番体验。</p>
<p>加量很好，换门类也不错，但是都是治标不治本，只有设计和创造才是绿色健康可持续。</p>
<p>这就是为什么创造性活动能起到这么大的作用。因为从根本上来说，培养了更好的你。</p>
<p>买一个名牌不会让你更高贵，刷一天抖音只会徒增你胳膊的疲惫，一次又一次的娱乐活动只能满足你即时的快乐，但每一次创造型活动的背后都是技能的提升、经验的积累和信心的沉淀。</p>
<p>当恋爱开始和工作、和自我成长接轨，你们就会被对方规划到未来的日子里。</p>
<p>所以，最好的感情经历，莫过于两个人相互陪伴，共同成长。</p>
<p>送礼物、打游戏、去网红地打卡、看最近大火的电影这些活动，依旧可以增温你们的感情，但是只有共同克服困难、携手陪伴进步，才会成为你们想一直走下去的理由。</p>
<p>要记住，在感情里，经营一段感情永远都比寻找一段感情更为重要。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>经营爱情是人生的必修课，而且是性价比巨高的必修课。</p>
<p>其中最为关键的就是经营两个人在一起的时间。但是，很多人却忽视了经营的重要性，让时间久、感情变腻等理由背了锅。两个人在一起没事干，其实就是没有组织时间的能力。</p>
<p>所以，从问题出发，我们分析了情侣常见的三种活动模式，分别是消耗经济价值的活动、消耗时间价值的活动和消耗情绪价值的活动。但无论是哪种，都会受边际递减效应的影响。</p>
<p>唯有创造型活动能够克服边际效应的影响，营造专属记忆和推进双方关系。想要设计创造性活动，也很简单，把以前爱干的消费型活动往前推一步，也许就是创造型活动。</p>
<p>最后，我们要学会赋予爱情更多能量和意义，让爱情推动人成长，因为成长才是永恒的课题。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>06 小心看上去平平无奇的陷阱：如何防范高级渣？</title>
    <url>//posts/d919358/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="06-小心看上去平平无奇的陷阱：如何防范高级渣？"><a href="#06-小心看上去平平无奇的陷阱：如何防范高级渣？" class="headerlink" title="06 小心看上去平平无奇的陷阱：如何防范高级渣？"></a>06 小心看上去平平无奇的陷阱：如何防范高级渣？</h1><p>古往今来，在恋爱这个话题分组下，总有很多让人印象深刻的痴男怨女，但其中，也不乏一些渣男渣女。可以说，在深深地爱着的很多，正在渣人或者变渣路上的也不少。</p>
<p>近几年，相关的话题更是热度不减。网上充斥着大量的“鉴渣”攻略，这些攻略详细地列出了 123，教你如何分辨男男女女怎么脚踏 n 条船，有哪些是他们万花丛中过、片叶不沾身的迹象。</p>
<p>但其实，以我做情感咨询的经历来看，就算不用特别教，那些真正的海王、捞女，正常人都能一眼分辨且高度提防。老实人只是老实，又不傻，对被吊着当备胎、当钱包、当饭票这些事情其实是很敏感的，教他们防范这种渣，有点画蛇添足、多此一举的感觉。</p>
<p>所以，为了区别市面上那些林林总总的鉴别海王、踢翻鱼塘的“低级攻略”，我们这一讲就突出了“高级”二字。一般，我不爱用“高级”这样的字眼做题目，因为一看就显得很低级。</p>
<p>但是，因为今天我们要讲的高级防渣，防的其实是大众渣。</p>
<h2 id="高级防渣，防的是什么？"><a href="#高级防渣，防的是什么？" class="headerlink" title="高级防渣，防的是什么？"></a>高级防渣，防的是什么？</h2><p>越是大众，越是“杀人于无形”。真正致命的渣，看起来往往朴实无华。</p>
<p>比如说，之前有个新闻，WePhone 的开发者苏享茂被前妻翟欣欣逼得自杀身亡。网友纷纷猜测与好奇，这翟欣欣到底长什么样子，可以逼得自己老公自杀，难道是天仙下凡？</p>
<p>后来，照片流出来后，要说这翟欣欣吧，还真不算什么倾国倾城的美女，照片里她的打扮也都比较正常，根本不像一个玩咖。但越是这样看上去人畜无害的翟欣欣，渣起来却要了命。</p>
<p>如果你爱看娱乐八卦，那你一定听过王宝强的前妻马蓉；如果你爱看学术圈八卦，那你也一定听说过“学术圈四大妖姬”的赫赫威名。保守地说，这几位的颜值最多也就是中人之姿，却能搅动风云，将人玩弄于股掌之上。所以，千万不要以为看上去平平无奇的大众脸，就不会渣。</p>
<p>那么在恋爱中，什么样的算是“大众渣”呢？请记住，遇到以下这三种人，务必果断止损。</p>
<h3 id="第一种：自我感动渣"><a href="#第一种：自我感动渣" class="headerlink" title="第一种：自我感动渣"></a>第一种：自我感动渣</h3><p>第一种叫作自我感动渣。如果纯粹是自我感动，那倒好说，也没什么危害，谁还不能自嗨一下呢。但在我这些年见过的许多自我感动型选手中，没有一个是止步于自嗨的。</p>
<p>好一点的，比如说小龙女的师傅，林朝英。</p>
<p>林朝英这个人特别喜欢王重阳，然后天天不是找王重阳大战三百回合（是真的比武那种大战），就是用计谋打赌赢王重阳一个古墓，她还专门自创了一门武功专克王重阳的全真剑法。</p>
<p>拜托，人家王重阳好歹也是五绝之首，天天被你打败不要面子吗？还怎么跟你在一起？</p>
<p>可是，林朝英觉得自己心里特别委屈，因为她花了好多心思在王重阳身上。但说白了，她根本不知道王重阳要什么，死后王重阳去祭奠她，心里还很不舒服，写下了“重阳一生，不弱于人”。</p>
<p>这种自我感动不过是只认自己的经验来付出，根本不考虑别人感受。有一个这样的伴侣，你要么就是天天被她折磨，还得鼓掌表扬；要么就是天天拒绝折磨，两人吵架。</p>
<p>还有更厉害的，比如小龙女的师姐，李莫愁。</p>
<p>李莫愁特别喜欢一个叫陆展元的。她跟陆展元处了一段时间后，因为追求爱情违反门规，干脆退出师门。但是陆展元又移情别人，和别人结了婚。本来陆展元和李莫愁自由恋爱，一清二白，分手也是正常，但李莫愁认为自己都为了你叛出师门，你居然不爱我，跑去杀人满门。</p>
<p>这种自我感动更像一种要挟，通过对方并不需要的牺牲，占领道德高地，强迫对方接受自己。</p>
<p>这种自我感动最极端的形式，就是自我伤害。曾经有个男生就来问我，他前女友找他求复合，他只是稍微犹豫了一下，他的前女友就从行驶的出租车里面跳出去了。男生说，这是不是证明，这姑娘太爱他了？现在，两个人分手以后都还没找，是不是该考虑一下复合的事情。</p>
<p>我回答他，兄弟，快跑，想啥呢，有多远躲多远，千万不要复合。</p>
<p>如果一个人今天能打着爱你的旗号跳车，明天她就可能会因为不满意你的爱，推你下车；一个人今天要是能打着爱你的旗号拿刀划自己，明天她就可能因为不满你的爱，拿刀捅你。</p>
<p>有的渣要钱，这种渣要命，不分男女。所以我放在第一位说，你千万要注意甄别。</p>
<h3 id="第二种：偏执控制渣"><a href="#第二种：偏执控制渣" class="headerlink" title="第二种：偏执控制渣"></a>第二种：偏执控制渣</h3><p>第二种叫作偏执控制渣。谁都希望把一切掌控在自己手上，对于恋爱对象有控制欲也实属正常。两个人在一起本来就是互相影响、互相妥协的，但是我们特别要提防偏执控制狂。</p>
<p>经典老剧《不要和陌生人说话》里的安嘉和就是典型的偏执控制狂。冯远征老师用其过人的演技塑造了一个频繁使用暴力以维护自己对妻子绝对控制权的角色，被称为中国第一家暴代言人。</p>
<p>这种人的偏执和控制，归根结底就是一句话：我不要你觉得，我要我觉得。</p>
<p>不过，用暴力控制对象的这种行为，还是很好分辨的。一旦恋爱对象对你动了手，不管什么理由，立刻分手。动手这件事，只有零次和无数次，不存在其他情况。</p>
<p>但是，有一种暴力之外的偏执控制，它更多地表现在软控制，也就是所谓的 PUA。</p>
<p>大部分控制狂并不是面目狰狞的，像冯远征老师所演的，而是在你表现出他希望的样子时，彬彬有礼，极致温柔；但一旦你违背了他的意愿，他就会向你疯狂输出负面情绪，包括但不限于：</p>
<p>贬低你，否定你；</p>
<p>让你感到内疚、惭愧；</p>
<p>数落你的缺点和错误；</p>
<p>将自身不安的根源强加于你。</p>
<p>很多人觉得 PUA 很厉害，其实并没有那么高深。背后的原理，无非就是巴浦洛夫训狗那一套，将自己的正负面情绪输出作为奖励 / 惩罚，训练对象服从自己，形成条件反射。</p>
<p>你可能觉得自己意志坚定，不会轻易被洗脑。那么，你可以去看看北大包丽的新闻，她就是被男朋友 PUA，最后自杀身亡的。接受过高等教育的人尚且如此，我们也不能太理想化自己的意志。</p>
<p>所以，一旦你发现，你的恋爱对象企图通过这种方法控制你的生活，你就要考虑分手远离了。</p>
<h3 id="第三种：全面依赖渣"><a href="#第三种：全面依赖渣" class="headerlink" title="第三种：全面依赖渣"></a>第三种：全面依赖渣</h3><p>这第三种平平无奇的渣叫作全面依赖渣。恋人作为最亲密的人，互相支持、互相慰藉是很正常的。但是，恋人之间不应该有过多的依赖感，尤其是全面依赖感，这很容易改变感情的性质。</p>
<p>前两年的热播剧《我的前半生》中，马伊琍饰演的罗子君就是因为对雷佳音饰演的陈俊生过于依赖，事事依靠陈俊生，把自己给养废了。讽刺的是，剧情后续试图拍出罗子君离婚后自立自强的形象，但其实还是事事依靠老干部靳东饰演的贺函，只能说罗子君在依赖这方面有天赋。</p>
<p>有人说，能够什么事都依赖伴侣，那也是凭本事赖上的，有什么不行的？</p>
<p>其实，全面依赖和偏执控制是一体两面。如果你能全面依赖一个人，慢慢地，你就会想偏执控制 Ta；你能偏执控制一个人，最终必然会导致你全面依赖那个人。</p>
<p>前面说的翟欣欣、马蓉就是在经济上依赖，学术圈四大妖姬是在学术上依赖。我都不用直接接触，我都能猜到，这几个人对伴侣必然有偏执控制和情感操控的心思。</p>
<p>这种恶性循环发展到一定阶段，可能就会直接上手了，也就是家暴。</p>
<h2 id="如何防范高级渣？"><a href="#如何防范高级渣？" class="headerlink" title="如何防范高级渣？"></a>如何防范高级渣？</h2><p>识渣讲完了，但是识渣容易防渣难。</p>
<p>很多找我做情感咨询的人，就表示过，明明在一段感情中很难受，也意识到对方很渣，可就是沉沦于其中无法自拔。即使知道只有零次和无数次，还是会一次又一次地原谅对方。</p>
<p>离开，这个办法的确说起来很简单。可是，能下定决心、快刀斩乱麻的人太少了。</p>
<p>但你知道吗？人的体验和感受都是有阈值的，渣也算其中一种。当一个人渣别人的时候，Ta 会获得某种心情的愉悦、刺激感的满足等。随着时间推移，次数增加，阈值上限会越来越高。</p>
<p>今天，可能 Ta 只是低等级的渣，明天就是高等级的渣，这种属性一旦形成，会自动强化。</p>
<p>你改变不了，只有离开才是最好的选择。如果觉得困难，你可以提醒自己以下三点：</p>
<p>坚持自我，不要迷失；</p>
<p>天涯何处无芳草，世上没有唯一；</p>
<p>拯救别人是上帝干的事，你要做的是拯救自己。</p>
<p>也许每一段感情都会有办法维持，但不是每一段感情都值得继续维持。不要等对方渣的阈值上限提高才选择离开，也不要让自己遭受痛苦和悲伤的忍耐上限提高，痛苦也是会让人沉沦的。</p>
<p>所以，一定要有勇气断绝和离开“渣”的怀抱，你才有走出黑暗、拥抱阳光的机会。</p>
<p>接下来，我还要说一点，破山中渣易，破心中渣难。防渣除了要防别人渣，更要防自己内心的渣，这才是高级防渣的真正含义。请你记住，当你凝视深渊的时候，深渊也在凝视你。</p>
<h2 id="底线思维，了解一下"><a href="#底线思维，了解一下" class="headerlink" title="底线思维，了解一下"></a>底线思维，了解一下</h2><p>人生在世，有几种意识可以培养，好处多多，其中最重要的一种就是底线思维。</p>
<p>理财利息说的贼高，本金被卷了；职场 996 前景说的大好，人猝死了……我们普通人本钱有限，很多事情赚得再多，赔一次就会让全部努力付之东流，甚至再无翻身的机会。</p>
<p>所以，你一定要给自己立个底线，这个底线就是为了防止你这种情况的发生。</p>
<p>在恋爱过程中也是这样，对绝大多数人来说，投入到感情中的金钱、精力、时间和机会成本都是非常宝贵而有限的。如果你在最好的年华被渣男 / 渣女耽搁两三年，你的择偶质量可能就要凭空下降一档。更何况，那些对爱情的信心和憧憬，被狠狠撕碎一次后，就再也找不回来了。</p>
<p>所以培养恋爱中的底线思维，加强识渣防渣能力非常重要。</p>
<p>追不到男神女神最多失落一阵子，追到了渣男渣女很可能要失望一辈子。选择离开，未尝不是一种更好的选择。毕竟，对于普通人来说，及时止损永远比盈利更重要。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>防范海王、捞女、绿茶其实很容易，这种人我们一看自己段位不够是不会跟进的。</p>
<p>难得在于防范大众渣。因为，真正坑死人的，都是那些看上去平平无奇、人畜无害的。</p>
<p>自我感动、偏执控制和全面依赖，遇到这三种渣男 / 渣女务必要远离，没有第二条路。</p>
<p>还有，要记住，己所不欲勿施于人，不仅要防范别人的渣，还有自己的渣。</p>
<p>给自己留下底线，底线思维很重要，识渣防渣就是恋爱过程中最重要的底线思维之一。</p>
<p>山中渣易破，心中渣难除。</p>
<p>愿你不受世间疾苦，也愿你温柔以待世人，这才是真正的“高级”防渣。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>03｜冒犯有时是必要的：如何开启一段亲密关系？</title>
    <url>//posts/f28338a3/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="03｜冒犯有时是必要的：如何开启一段亲密关系？"><a href="#03｜冒犯有时是必要的：如何开启一段亲密关系？" class="headerlink" title="03｜冒犯有时是必要的：如何开启一段亲密关系？"></a>03｜冒犯有时是必要的：如何开启一段亲密关系？</h1><p>今天，我们来聊一个话题，如何开启一段亲密关系。</p>
<p>从陌生到认识、从认识到熟悉、从熟悉又到暧昧、从暧昧到确定关系，在每一个阶段，我们都想和自己喜欢的人更进一步，想要有更亲密的感情。这是每个人谈恋爱的必经之路。</p>
<p>但是正因如此，这个问题也成为了恋爱过程中争议最大，也是雷区最多的一个问题。</p>
<p>阶段多、变数也多，过程不一样，人和人的情况又各有不同。想找到一种可以一刀切的方法，来一揽子解决这个问题，这几乎是不可能完成的任务。</p>
<p>而问题就在于，偏偏有不少人根据自身经验给出所谓的必胜方法，却犯了瞎子摸象的经验主义错误，让我们离修成正果、恋爱胜利的目标，越来越远。</p>
<p>那有哪些错误示范呢？我们一起来看一看。</p>
<h2 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h2><p>第一就是土味情话流。在抖音快手上，有大量土味情话系列的视频，类似于：</p>
<p>“你知道我的缺点是什么吗？”</p>
<p>“什么呀？”</p>
<p>“缺点你。”</p>
<p>用这样的土味情话跟陌生妹子或者小哥哥聊天，如果人家没听过还好，再或者有点创意、新颖一点也行，要是你直接照搬照抄的话，那绝对是溢出屏幕的尴尬之情。</p>
<p>以前我一直觉得大家都是把这当作段子看的，直到最近一两年，我发现还真有拿这来实战的。至于效果，凡是能看到这个专栏的人所接触到的对象圈层，肯定都不吃这套。</p>
<p>第二就是公式模板流。类似于考试作文模板，列出各种情况的聊天公式，让人自行带入内容。</p>
<p>倾听 + 共情 + 好奇 + 欣赏</p>
<p>悬念开局 + 角色代入 + 植入关系 + 画面感</p>
<p>不得不说，有几个公式给的还有点意思。可是问题主要在于，光有公式，却没有足够的内容去支撑模板。如果仅仅掌握模板就能 hold 住聊天，那么看过高考作文书的人，高考作文都该拿满分。</p>
<p>第三就是 cos 角色流。典型的就是霸道总裁、高冷别扭怪，就是那种压根你就不要表白，直接上肢体接触，什么过马路拉手、下雨打伞搂肩膀、对视三秒直接亲、吃对方嘴上的奶油等等。如果说上面的作文模板最多是把对象吓跑，那么这个方法可能给你直接送进派出所。</p>
<p>类似的错误示例还有很多。一些初入情场的老实孩子，简单照抄照搬，反而弄巧成拙。</p>
<p>你知道为什么这些模板用起来没有效果，还很尴尬吗？因为这些东西是适用于那些已经进入恋爱关系的人的，什么土味情话、cos 霸道总裁，都是老夫老妻拿来增添点生活乐趣的。</p>
<p>小情侣玩这些模板，是胜利凯旋的赞歌，可是你却把这些东西当作冲锋陷阵的号角。尴尬了自己，也尴尬了别人。恋爱目标没达成，还实实在在地留下了不走心、只会套模板的印象。</p>
<p>说白了就是，你对你们之间关系的亲密程度并没有一个准确的判断。</p>
<h2 id="从关系维度入手"><a href="#从关系维度入手" class="headerlink" title="从关系维度入手"></a>从关系维度入手</h2><p>大到一个国家，小到一个企业，每一种事物都有不同的发展阶段，每个阶段的主要矛盾都不一致。恋爱也是如此，我们无法按照统一的方法划分阶段，但是我们可以从关系维度入手。</p>
<p>在确定关系之前，我们可以把两个人的关系，简单地分为前期、中期和后期。因为，每一个阶段的主要矛盾都不一样，我们的行为侧重点也就不一样。</p>
<h3 id="前期：务必真诚"><a href="#前期：务必真诚" class="headerlink" title="前期：务必真诚"></a>前期：务必真诚</h3><p>在两个人刚认识的前期，双方都不太了解对方。这个阶段，大家主要考量对方是否靠谱。所以，在这个阶段，真诚就显得尤为重要。但真诚是一种看上去很简单，做起来很难的事情。</p>
<p>在现代社会，人太需要给自己戴上各种面具，塑造各种人设。有面对老板的、面对同事的、面对客户的、面对父母的、面对同学的……你要考虑的东西太多太多。但是，正因为这样，每个人都希望感情是一片净土，希望在感情中可以真诚纯粹。</p>
<p>不光是对方，你也会希望自己找到的是一个真诚没有套路的人。</p>
<p>世纪佳缘曾做过一个问卷调查，调查男女双方谈论婚姻时最重视的品质是什么。最后，真诚这一项，以碾压性优势超过了自信、体贴、睿智、财富。求真是人类的永恒追求之一。</p>
<p>比如说，《笑傲江湖》中，真小人左冷禅远比伪君子岳不群受欢迎，就是求真本质的一种体现。</p>
<p>那怎么才算是真诚呢？有人说，既然我喜欢，就去表白，这是不是够真诚；还有人说，我喜欢的人穿的衣服不好看，我直接告诉她，是不是够真诚？可为什么这样的“真诚”，往往换不来一个好结果呢？</p>
<p>第一，这确实不是真诚。你看见一个姑娘，心生好感，你内心真实的想法会是“我喜欢你”吗？绝对不是，你要是真正的喜欢一个人，真正的内心感觉应该是非常具体细腻的：</p>
<p>“昨天你跟我讲 xxx 的时候，好有道理，我觉得你浑身都在发光。”</p>
<p>“昨天本来很丧，不知道为什么跟你在一起喝杯咖啡就好了。”</p>
<p>你要是喜欢一个姑娘，内心也绝对不会觉得这件衣服不好看，而是这件衣服本来是不配你，居然被你穿出这种效果。</p>
<p>这不是话术，这就是真诚！真善美为什么是人类的永恒追求？“真”这个东西本身就具有强大的力量和无法抗拒的魅力，你觉得真诚让你碰壁是因为你真的不够真！</p>
<p>而且真这东西太宝贵了，哪怕是非常迟钝的人，也能够清晰地感知到真正的真诚。大家要么虚伪的客套，这叫社交距离；要么炽热的真诚，这是真心以待，都能维持好感。</p>
<p>最怕的就是虚伪的真诚，就和岳不群一样，会引发本能的厌恶。</p>
<p>第二，不够真诚怎么办。多数人在多数情况下，确实没有让你到刻骨铭心的程度，那么碰上一个还可以的对象的时候怎么办？尽量真诚或者说不要显得太假，技巧就一句话——目的性不要太强。</p>
<p>就好像你进商场购物，导购对你微笑，夸你衣服合体；就像你进饭店吃饭，服务员向你微笑，给你洗涮碗筷。绝大部分情况，你是不是第一时间就会一眼看破他们的虚伪，然后感到十分反感，因为他们的微笑往往很假，唯一支撑他们微笑的理由就是让你花钞票。</p>
<p>偶尔，你会发现不是特别在意你买不买东西的导购，如果他是发自真心喜欢这只口红，那么你反而更愿意在他这里买口红——我想这就是李佳琦走红大江南北能成为带货一哥的原因。</p>
<p>偶尔，你会发现不是特别在意你点多少菜的服务员，如果他们是发自真心在意这家火锅店，那么你反而更愿意在这家店吃饭——我想这就是海底捞走红大江南北能成为火锅一哥的理由。（请运营小姐姐月底找海底捞结一下广告费……）</p>
<p>把对方当成一个人，而不是一个需要拿下的恋爱目标，仅此而已。</p>
<p>有人问过我，真诚会不会显得很傻。我说，嗯，有时候是会有点傻，但是只要你在爱情中，感情是真挚的，不管有多热烈，不管看上去有多傻，都会赢得人的尊重，否则就会引起人的厌恶。</p>
<h3 id="中期：敢于冒犯"><a href="#中期：敢于冒犯" class="headerlink" title="中期：敢于冒犯"></a>中期：敢于冒犯</h3><p>关系发展到中期，两个人已经对彼此足够熟识，可能处于暧昧期，也可能处于朋友阶段。这一阶段，在靠谱的基础上，双方更看重的是对方带来的情绪和体验。</p>
<p>所以，我给你的建议是，敢于冒犯。冒犯是突破现有人际关系距离，入侵对方的领域，形成新的平衡的过程。比如，《天龙八部》里，乔峰和阿朱相恋，其实就是阿朱不断“冒犯”的过程。</p>
<p>阿朱易容进少林之后，受了玄慈大金刚掌隔空掌力所伤，恰好被乔峰所救。</p>
<p>不过阿朱伤势很重，需要乔峰不停用真气为其续命。两人非亲非故，一面之缘，但是，阿朱还是请乔峰不断损耗真气救助自己，这真可谓是不情之请，算是一种“冒犯”。</p>
<p>乔峰大英雄气概发作，答应了阿朱这个要求，最后独闯聚贤庄请薛神医治病，小半是为了阿朱，倒有大半是一口气咽不下。但阿朱病好以后克服重重困难，找到乔峰，在整个中原武林与之为敌的情况下坚定支持他，为乔峰提供了特别需要的情绪价值，这是阿朱“冒犯”之后的回报。</p>
<p>所以，冒犯——回报的循环，就是两人升级关系的过程，阿朱和乔峰就是在这样的多个轮次中，不断加深关系，最终许下塞上牛羊之约，确定了关系。</p>
<p>在现实生活中，不同的关系层级也有不同的社交距离。比如大街上素不相识的两个人，你问人家要电话号码，当然就是不符合陌生身份的一种“失礼”。比如我俩普通同事，我贸然请你单独来家里吃饭，那也算是没有分寸感的一种“冒犯”。</p>
<p>关于如何正确地“冒犯”，我有三点告诉你：</p>
<p>一来要讲究善意，我问你要电话，是为了能跟你联系，不是转手给人卖掉信息；</p>
<p>二来要讲究分寸，不要越级突破，明明是点头之交，跑人家楼下唱歌摆鲜花求人家做自己女朋友就是过于急躁了；</p>
<p>三来要讲究平衡，今天麻烦你帮我取了快递，明天给你带一份水果。</p>
<p>两个人要建立亲密关系，就不能总是客客气气按照社交礼仪，时刻注重保持双方的合适距离，把界限分得很清楚，必须有人率先打破现有关系水平，提出一些略有“冒犯性”的要求。</p>
<p>当然，敢于冒犯不是粗鲁猥琐，冒犯并不是让你把人按在墙上壁咚，也不是打着心直口快的幌子说黄段子，而是敢于示弱，告诉别人，你需要帮助。示弱是开启亲密关系的精髓所在，强而示之弱，能而示之不能，这既代表了你的态度，也显示了你的能力，更为对方提供了价值需求。</p>
<p>示弱不代表无能，而是勇敢地深入一段关系，没有冒犯，关系也就无从推进。</p>
<p>在感情的世界里，没有“君子动口不动手”，只有“自己动手，丰衣足食”。</p>
<h3 id="后期：及时止损"><a href="#后期：及时止损" class="headerlink" title="后期：及时止损"></a>后期：及时止损</h3><p>你看，建立亲密关系的本质过程，就是两个人互相冒犯，侵入到一方觉得受不了，就散了；又或者侵入到足够近，双方还能接受，那就瓜熟蒂落，水到渠成。</p>
<p>所以，一般到了后期，不是要成了，就是久久都没成。成了固然好，但是如果花费了很长的时间和精力，关系还是没有进一步的突破呢？这也正是我想说的，要及时止损。</p>
<p>谈恋爱如同炒股票，不怕你没有把握住机会，就怕你被套牢。</p>
<p>你甚至可以完全不用了解如何开启亲密关系，因为只要尝试足够多，就可以碰到喜欢你的人，这个开启过程是自然而然、无师自通的，但是你必须学会及时止损！人的一生很长，足够你遇到相伴一生的爱侣；人的一生很短，不要把时间浪费在根本不爱你的人身上。</p>
<p>那么当对方有哪些表现，你就应当立刻抽身离开呢？不算其人本身人品、性格的缺陷，我认为有以下几种情况，你就可以考虑马上止损了。</p>
<p>明确拒绝或暗示你，你俩不可能。（说到这得补一句，人家说现在不想谈恋爱的意思不是现在不谈，是不想跟你谈，要听懂拒绝。）</p>
<p>有意或无意让你知道，她有对象 / 喜欢的人，无论这个人是不是真实存在的。</p>
<p>从来不主动，爱答不理，有你也行没你也行，对你不感兴趣，不愿意主动了解你的生活。</p>
<p>只索取不付出的，包括但不限于金钱、情感、时间、精力等等。</p>
<h2 id="对套路-Say-No！"><a href="#对套路-Say-No！" class="headerlink" title="对套路 Say No！"></a>对套路 Say No！</h2><p>其实，开启亲密关系，并不需要高深莫测的技巧。对于喜欢你的人来说，你只需要开个头，对方一定会想法设法回应，跟你共同推动关系向下一阶段发展，不要过于迷恋撩人的技巧。</p>
<p>如果太讲技巧，反而会弄巧成拙。比如说，有很多男生的撩妹技巧很深厚，但是在和女孩子接触的时候，痕迹过重，显得油腻，在女生那里反而频频吃瘪，越装越惹人讨厌。</p>
<p>正确的办法不能搞定错误的人，但错误的办法可以搞砸正确人。</p>
<p>开启亲密关系，并没有百试百灵的办法，要勇敢地对套路 Say No！世界上没有任何一种恋爱技巧，可以让你学会了以后，直接搞定刘亦菲或者吴彦祖，务必要抛弃不切实际的幻想。</p>
<p>毕竟，喜欢你的人不用你拼命追，不喜欢你的人拼命也追不到。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>好的开始是成功的一半，成功开启亲密关系是让人特别激动兴奋的一件事。</p>
<p>在这个过程中，教程虽然特别多，但是千万不要照抄照搬，否则就会赔了夫人又折兵。</p>
<p>那么，我们到底该如何开启亲密关系？要从双方的亲密关系维度入手，我们可以简单地把这一进程分为前期、中期和后期，要把握好每一阶段的主要矛盾，有意识地推进关系。</p>
<p>首先是前期，务必要真诚，真诚足以打动适合你的人；然后，到了中期，要敢于冒犯，你要起个头表达好感，敢于打破社交距离冒犯一个人，既是示好的方式，也是提供进一步接触的机会。</p>
<p>但是冒犯要注意，一要善意，二要谨防越级，三要记得找补。冒犯的最高级是示弱。</p>
<p>到了后期，如果关系迟迟没有进步，一定要学会及时止损。因为不喜欢的人拼命也追不到，所以不要在一棵树上吊死，一定要有止损的意识及时抽身。</p>
<p>最后，要记住，不要玩套路。开启亲密关系，是两个人互相了解、互相试探、逐步加码的过程，正确的办法不能搞定错误的人，但错误的办法可以搞砸正确人。</p>
<p>搞清局面，将心比心，才是问题解决的关键。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>08 七年未必痒：如何营造亲密关系的新鲜感？</title>
    <url>//posts/681722e3/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="08-七年未必痒：如何营造亲密关系的新鲜感？"><a href="#08-七年未必痒：如何营造亲密关系的新鲜感？" class="headerlink" title="08 七年未必痒：如何营造亲密关系的新鲜感？"></a>08 七年未必痒：如何营造亲密关系的新鲜感？</h1><p>你发现了吗？童话故事的最后，都是王子和公主从此过上了幸福的生活；很多电视剧和电影的结尾，也是只演到男女主人公走入婚姻的殿堂。可是，再往后呢，再往后就不敢写了……</p>
<p>因为，故事在这里戛然而止，一切爱情的美好才可以停留在原地，停留在人们心里。</p>
<p>在金庸武侠里，唯一敢于破例的就是《神雕侠侣》。射雕里古灵精怪的蓉儿妹妹成了神雕里面令人生厌的中年黄大妈、黄帮主、黄女侠，以至于我小时候读神雕一度认为是别人冒名写的。</p>
<p>但是不得不说，在一段感情里，可悲的也莫过于此。两个人经得起轰轰烈烈的紧张冒险，却躲不过平平淡淡的似水流年。三年之痛、七年之痒，握着你的手，就像左手牵右手……</p>
<p>之前，有很多朋友也跟我咨询过，为什么在一起久了，明明感觉自己还是很爱对方的，却总是提不起精神和另一半相处，甚至精神上会偶尔开个小差，对一些一面之缘的小姐姐却想入非非。</p>
<p>其实，这个问题很普遍，不仅会出现在相处多年的情侣之间，也常见于恋爱的各个阶段，</p>
<p>就比如说，两个人谈恋爱了一段时间，都觉得对方的各方面感觉还不错，可是就差了那么一点点触电的感觉。还比如说，有人留言问我，对方说和我相处像朋友多过像恋人怎么办？</p>
<p>这些都指向同一件事——新鲜感。</p>
<p>新鲜感有一种魔力，可以让普通人光彩照人、魅力爆棚；可以让寻常事咫尺兴波、跌宕起伏。这种魔力有多强，失去就有多痛。它可以轻松让你爱上一个人，也可以让你失去一个人。</p>
<p>今天，我们就来探讨一下关于新鲜感的话题。</p>
<h2 id="新鲜感的本质是什么？"><a href="#新鲜感的本质是什么？" class="headerlink" title="新鲜感的本质是什么？"></a>新鲜感的本质是什么？</h2><p>第一个问题，新鲜感究竟是什么？是一种感觉？还是一种对于未知的好奇心理？</p>
<p>有一位著名心理学家，曾提出了一个“恋爱三角形理论”。他认为一段完美的爱情应该由以下三个因素构成——激情、亲密和承诺。</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412091904243.jpeg" alt="img"></p>
<p>我们口中所说的新鲜感，就是激情因素中的一种。如果给激情下个定义，激情就是两个人在一起因相互吸引而产生的高强度体验。据统计，激情的巅峰期往往只能维持半年左右。</p>
<p>有人认为，激情就是多巴胺的分泌，但这个想法对我们来说，没什么意义。在我看来（说明这是个独家理论），支撑激情的两个主要因素，分别是不确定性和异性攻击性。</p>
<p>不确定性很好理解，什么是异性攻击性？其实，和我们之前提到的“敢于冒犯”差不多。</p>
<p>这个理论很好地解释了为什么和“渣人”谈恋爱特有激情。第一，因为“渣人”的攻击性特强，一切都以拿下你为目标，持续推进关系；第二，他们又很不靠谱，也就是不确定性特别强。</p>
<p>老实人吃亏就吃在这，一方面，老实人非礼勿视、非礼勿言，攻击性弱到让有些人觉得“禽兽不如”；另一方面，老实人计划性极强，他们习惯把一切行动安排好，讨厌 list 出现任何变化。</p>
<p>所以，当你还在追求期或热恋期的时候，如果对方埋怨你木讷、不解风情、直男 / 直女，你不妨从这两个角度下手，增加你们关系中的激情因素比重，提升双方的新鲜感。</p>
<p>还有一个问题，为什么新鲜感难以保持？我们用上面的理论，同样可以来解释这个问题。因为双方呆的越久越熟悉，不确定性就越弱；同时该攻击的也都攻击完了，变得很安全。</p>
<p>你可能会想起来，这节课和我们在第 5 讲，探讨两个人在一起没事干怎么办的问题时，面临的困境有些类似，都属于激情过后的如何面对低谷期的问题。但是第 5 讲，我们主要从“亲密”和“承诺”这两个因素来展开，讲的是如何通过构建三角形的另外两级来替代激情的消逝。</p>
<p>亲密和承诺就像一道菜的食材，而激情却是食材的调味品。光吃调味品的话，入口可能很鲜，但是吃不了几口；但是如果没有调味品，再好的食材也会差了点味道。</p>
<p>那么，接下来，我们就来看看，如何持续营造新鲜感，给爱情调调味。</p>
<h2 id="新鲜感的提升思路是什么？"><a href="#新鲜感的提升思路是什么？" class="headerlink" title="新鲜感的提升思路是什么？"></a>新鲜感的提升思路是什么？</h2><p>首先，我们要明确，提升新鲜感，是和旧人做新事，不是和新人做旧事。通过不断更换伴侣寻找新鲜感的做法，无异于饮鸩止渴，从长期看是有损于新鲜感建立的。</p>
<p>其次，我们还要明确，提升新鲜感并不是靠所谓的创意和惊喜，没有人的创意是可持续的，最伟大的作家也做不到。你在网上搜索的所有创意套路也都是有限的，且很可能别人见过。</p>
<p>所以，从不确定性和攻击性两个维度来看，持续营造亲密关系的新鲜感主要有以下两种思路：</p>
<h3 id="思路一：于变局中开新局——拥抱变化"><a href="#思路一：于变局中开新局——拥抱变化" class="headerlink" title="思路一：于变局中开新局——拥抱变化"></a>思路一：于变局中开新局——拥抱变化</h3><p>每个人都有自己的生活习惯和规律，当两个人成为情侣的时候，其实互相磨合对方的习惯和规律就是一件特别有新鲜感的事情。你会发现，哦，原来生活还可以这样过。</p>
<p>所以，情侣刚在一起的时候，新鲜感十足，每天都在享受新鲜感带来的变化。</p>
<p>但是磨合完毕后，一切又变得完全可以预测，新鲜感也随之消失。所以，营造新鲜感的第一个重要的方法，就是拥抱变化。可能你要问，生活中哪里会有那么多变化呢？</p>
<p>拥抱变化其实很简单。</p>
<p>生活中每一件小事，我们都可以用 5W+1H 来总结。也就是，时间、地点、对象、目的、人员、方法。咱们除了人不变，其他都是可以变的，一变感觉就全变了。</p>
<p>比如说，之前我帮助一个朋友解决新鲜感的问题。我就问他，你和女朋友下班回家都干啥？他说，没啥事呀，吃完饭就躺在床上刷剧。我说那好办，你就改成坐在沙发上刷剧试试。</p>
<p>结果就因为挪了这么几步路，换了一个地方刷剧。他说两个人的感觉就变得不一样了，沙发上搂着的感觉跟床上搂着的感觉完全不同。他还想继续说下去，我及时制止了他。</p>
<p>拥抱变化更是一种心态，一种富有新鲜感的心态。</p>
<p>我有个朋友和对象出去旅行总是一肚子气，她作为一个女生，会把行程规划的井井有条、十分精致。但是她男朋友什么攻略都不做，出门一问三不知又拖拖拉拉，导致她频频打乱自己的计划，就会发生争吵。她男朋友还常常抱怨，跟她出去玩是个苦差事，比上班打卡还累。</p>
<p>于是，我就劝她，尝试一次没有行程单的旅行，每天就列一个必去的景点，其他都随心安排。结果怎么着，那次她玩完回来跟我说简直 high 爆了，虽然没有精确到分钟的行程计划，但是也不会按照预想，逐一地去看已经反复筛选过的景色，最美好的都是旅途的相遇。</p>
<p>这就是新鲜感，有的人浑身充满这种感觉，Ta 对于别人来说，就会有强烈的吸引力，但这种感觉是需要进行专门训练的。是的，拥抱变化不仅是一种意愿，也是一种能力的训练。</p>
<p>最基础的训练，就是观察变化、记录变化。比如说，每隔一个周期，可以是天，也可以是周，是月，记录一次你们两个人发生的事情，观察和之前比有哪些变化。</p>
<p>坚持一段时间，你很快就会变成一个“善变”的人，给爱人带来足够的新鲜感。</p>
<h3 id="思路二：于危机中育先机——制造矛盾"><a href="#思路二：于危机中育先机——制造矛盾" class="headerlink" title="思路二：于危机中育先机——制造矛盾"></a>思路二：于危机中育先机——制造矛盾</h3><p>当你们把情侣该做的事情都做完了，你们的苦恼也就从求而不得变成了按时上班、赚钱养家，这样的话，你们的异性攻击性直接降为负数，怎么办呢？</p>
<p>其实很简单，就是一句话：有困难要上，没有困难创造困难也要上。</p>
<p>明明没有危险的事情，要制造危险：你的小宝贝要被渴死在沙发上了，能不能有好心人端杯水出来拯救她啊；</p>
<p>明明没有门槛的事情，要制造门槛：你要是晚上陪我看十五分钟曼联的比赛，今天的晚饭就由我来做；</p>
<p>明明没有矛盾的事情，要制造矛盾：你明知道我今天心情不好，为什么要左脚先进门，罚你说一分钟好听的话来夸我。</p>
<p>你可能会说，这样是不是很作呀？</p>
<p>对，会作的女人最好命嘛，不但女生要会作，男生也要会作，作就能制造新鲜感。</p>
<p>端水、做饭、夸人可能是两个人每天都要做的事情，但是当你为这些日常的事件制造了一点困难后，立刻就会产生别样的新鲜感，成功之后你还会有满足感。就像打游戏一样，刀刀都死一屏幕的怪一点意思都没有，要好死不死才打死一个怪才有意思。</p>
<p>但是，这个矛盾的制造一定要讲究时机，讲究方法。原则就一条，要记住，越是毫无矛盾的事情越要作，这叫有情趣；越是容易发生矛盾的事情，越不作，这叫识大体。</p>
<p>这个矛盾可以是你们两个人之间的，也可以是你们和外部的。</p>
<p>比如说，给娃娃贴上讨厌人的名字，再痛殴一顿；或者找辆灰尘很重的车子，在窗上一起画只小猪，一起做一点小小的违背传统道德的事情，也会极大产生新鲜感。</p>
<p>香港有部电影《志明与春娇》，两个人就是在禁烟背景下，从烟友发展而成的爱情。</p>
<p>所以你看，新鲜感从来不需要什么炫酷的招式。新鲜感就是使某一天与其他日子不同，使某一个时刻与其他时刻不同，如此而已。重剑无锋、大巧不工。</p>
<h2 id="内生的新鲜感"><a href="#内生的新鲜感" class="headerlink" title="内生的新鲜感"></a>内生的新鲜感</h2><p>最后，关于新鲜感，我还要讲一点注意事项，就是什么是真正的新鲜感。</p>
<p>你可能要问，什么？还有真正的新鲜感？难道刚才我讲的都是假的新鲜感？当然不是，上面所说的方法确实是营造且持续营造新鲜感的好方法。但是通过前面的课程，你可能已经了解，我这个人特别喜欢讲道与术的差别，上面说的方法，只是术，下面我想再上升到道的层面说两点：</p>
<p>第一，享受新鲜感，就不能过于追求新鲜感。</p>
<p>这就跟吃饭一样，在口味太重尝不出味的时候，定期清淡饮食一两天，之后吃什么东西都有别样的味道。这个道理用佛家的话来讲就是：空即是色、色即是空</p>
<p>新鲜感也是一样，当你在内心将其作为奢侈品而非必需品的时候，才能更好地享受新鲜感。我们必须认识到，新鲜感不是亲密关系的全部。管你黛西艾比莫妮卡，过年回家还不是乖乖回到翠花丫蛋和二妮的状态。因为你和父母之间，不用新鲜感，也可以保持几十年如一日的生活模式，</p>
<p>所以，平淡和规律才是生活的常态，能够坚守常态的人才有能力享受偶尔打破规律的新鲜感；相反，企图把无规律的新鲜感作为常态的人，必然遭受失去新鲜感的反噬。</p>
<p>进一步地，你还需要认识到，亲密关系也不是生活的全部。</p>
<p>亲密关系也只是你生活的一部分，如果将其置于生活之上，那就是本末倒置。相反，保持独立的生活，保持独立的人格，你才能保持给对象的神秘感。360 度无死角展现在对象面前的人是不可能有新鲜感的，千呼万唤始出来、犹抱琵琶半遮面的人才有新鲜感。</p>
<p>第二，生活是新鲜感的源头。</p>
<p>武侠小说里的男女主人公可能会面临很多问题，生离死别、正邪有别，但就是不会出现没有新鲜感的问题。你看郭靖这样木讷的人，按理说营造新鲜感的能力很弱，但是也没这问题，为啥呢？</p>
<p>因为武侠里，他们的日子一天天太新鲜了。又是国仇家恨、又是拜师习武、又是路见不平、又是闯关打怪的，天天肾上腺素爆棚，哪里有功夫闲下来想没有新鲜感的事情。</p>
<p>每个人都是一个世界，亲密关系的新鲜感是你进入对方世界，分享自己世界的过程中产生的。</p>
<p>有的人可能比较擅长营销，他分享自己世界的窗口时，就十分酷炫，所以很容易让人着迷，大家都觉得这个人有激情。所以，纵然我们在前面讲了如何多维度地展现自己的世界，如何高亮度地装扮自己的窗口，但是最根本的还是你这个世界够大、够精彩。</p>
<p>在作家圈里，刘慈欣遣词造句的能力不算一流，但《三体》火到出圈的背后，就是足够精彩的世界，不假外物的内生新鲜感才是真正的新鲜感，这就是三体对大量文学作品的降维打击。</p>
<p>过好自己的每一天，就是营造自己新鲜感的降维打击。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>情侣交往的各个阶段，特别是关系稳定之后的长期阶段，往往会出现缺乏新鲜感的问题。</p>
<p>今天，我们利用恋爱三角形理论（激情、亲密和承诺）分析了激情因素的产生，也就是新鲜感的实质，指出新鲜感的关键其实在于不确定性和异性攻击性。</p>
<p>利用这个理论，我们讲了两个提升新鲜感的方法，一是拥抱变化；二是制造矛盾。拥抱变化是一种意愿，也是一种要训练的能力；制造矛盾要选择合适的时机，以及合适的方法。</p>
<p>最后，我们从内生角度，探讨了更加持久稳定的新鲜感构建方法。一是降低预期，保持独立，不要一味追求新鲜感；二是花若盛开，蝶自然来；你若精彩，天自安排。</p>
<p>愿你每一天的太阳都是新的。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>07 无法回避的现实问题：“亲对象”也要明算账？</title>
    <url>//posts/bb30e962/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="07-无法回避的现实问题：“亲对象”也要明算账？"><a href="#07-无法回避的现实问题：“亲对象”也要明算账？" class="headerlink" title="07 无法回避的现实问题：“亲对象”也要明算账？"></a>07 无法回避的现实问题：“亲对象”也要明算账？</h1><p>俗话说得好，谈钱伤感情，谈感情伤钱。身处情感关系中的双方，总是对“钱的问题”唯恐避之不及，担心会尴尬、会影响到感情，但是却会偷偷以钱为标尺，衡量自己在对方心中的位置。</p>
<p>特别是在进入谈婚论嫁或者长期同居状态后，柴米油盐酱醋茶等等一系列现实的经济问题，开始超越琴棋书画诗酒花的精神问题，成为影响两个人关系继续深入的主要矛盾。</p>
<p>而且，在这个现实问题上，男孩女孩没有任何一方是“无辜”的，是可以回避掉的。</p>
<p>因为，男孩会很苦恼。就算是两个人的大额开销采取了 AA 制，但是他作为男生，还是应该尽量去负担那些小额的开支。不光如此，作为男朋友，他认为自己应该在各种节日购买礼物，还要时常接济由于买买买月光的女朋友。这让他感到有些不堪重负，又不知道从何说起。</p>
<p>女孩，也很纠结。虽然两个人采取了 AA 制，甚至自己的男朋友经常会多付一些，送给自己的礼物价格也远远高于她为对方准备的。但是，毕竟自己的收入远远低于男朋友，她觉得对方还是不够爱自己，常常发生争吵。吵完后，又觉得自己好像错了，女生不是应该经济独立吗？</p>
<p>所以你看，即便是 AA 制，也可能让两个人同时感到不快，并进一步影响双方的感情。花钱这件事就是这样，在两个人的恋爱过程中，越前期越无所谓，越后期越影响大。</p>
<p>今天，我们就来聊一聊，在一段感情中，钱到底该怎么花？</p>
<h2 id="情侣消费的常见模式"><a href="#情侣消费的常见模式" class="headerlink" title="情侣消费的常见模式"></a>情侣消费的常见模式</h2><p>一对情侣在一起，主要开销大体包括约会活动费用、礼物费用和旅行费用；同居或者结婚后还有双方的共同生活费用，以及男女双方的个人开销这几块。</p>
<p>首先，我们来看一看，当下情侣之间相处，有哪些常见的消费模式。</p>
<h3 id="男生买单模式"><a href="#男生买单模式" class="headerlink" title="男生买单模式"></a>男生买单模式</h3><p>第一种模式，就是男生买单模式。</p>
<p>顾名思义，就是男生负担全部或主要开销，最常见的是在一场旅行中由男生承担大部分费用。然后男生会从承担约会费用到共同生活费用，甚至最后是女生的个人开销，难度依次升级。虽然现在讲究个男女平等，但是在中国传统观念中，男女交往由男生买单仍然是非常自然的一个选项。</p>
<p>这个模式比较适用于男生经济条件较好的情况，这时候，女生往往就会主要负担家务、情绪等其他方面的责任。好处在于两个人的经济关系和社会主流方向贴合，不容易出现什么分歧，坏处就是男生负担可能会比较重，女生在经济上形成依赖，难免在相处中会引发关系失衡。</p>
<h3 id="男女-AA-模式"><a href="#男女-AA-模式" class="headerlink" title="男女 AA 模式"></a>男女 AA 模式</h3><p>这种模式现在比较普遍，指的是两个人对于产生的共同开销，比如约会和共同生活费用会进行 AA。常见于两个人相识前期，且更多见于一线大城市的白领们，思维更能对抗传统观念。</p>
<p>但实际上这种模式问题也很多，一是伤感情，双方算的太细容易伤感情；二是压力，当双方经济能力不对等的时候，容易给低收入一方产生较重的负担；三是委屈，即便是两个人共同开销，肯定用的也不是一样多，简单 AA 每次都会有人吃亏，日积月累就会造成很强烈的损失感。</p>
<h3 id="轮流买单模式"><a href="#轮流买单模式" class="headerlink" title="轮流买单模式"></a>轮流买单模式</h3><p>第三种模式，就是轮流买单模式，又可称为模糊 AA 模式。</p>
<p>双方轮流买单，支付约会活动费用，推而广之，循环往复。比如共同生活费用，你负责电费我就管水费，你出房租我就出伙食，大家算个大概齐就行，出的差不多。</p>
<p>这可能是大部分人理想中的开销模式。我问过很多人，他们觉得 AA 过于生分，一方全买又过意不去。最好是大家都很自觉地互相承担，抢着买单然后最终两个人分担开销。不过这个模式的缺点在于囚徒困境，因为没有明确规则，所以必须两个人都做相同选择才行，不然很容易崩。</p>
<h3 id="共同基金模式"><a href="#共同基金模式" class="headerlink" title="共同基金模式"></a>共同基金模式</h3><p>这种模式比较友好，就是双方每月各拿出一定数额的收入，放进一个“共同基金”中，用于支付共同开支。不过，这个模式多见于长期同居或者已经结婚的恋人之间，有信任基础。</p>
<p>这个模式优点很多，既讲灵活也讲公平，很多家庭都是采取这种消费模式。</p>
<p>不过，这个模式最大的短板在于，两个人对共同基金的投入份额和支出用途可能会存在一定的分歧。如果没有两个人较为一致的观念，很容易就这一进一出两个问题发生争执。</p>
<h3 id="其他模式"><a href="#其他模式" class="headerlink" title="其他模式"></a>其他模式</h3><p>每对情侣的情况各不相同，消费模式自然也是百花齐放。有女生全包的、有男生管饭女生管穿的，也有前半月男生买单尽情潇洒，后半月女生包养细水长流的……</p>
<p>所以你看，其实情侣之间的消费模式，会受两个人的观念、收入、消费习惯和家庭影响等等因素影响，并无定法。没有哪种模式百试百灵，也没有哪种模式是只有优点没有缺点的。</p>
<h2 id="情侣谈钱的时候，究竟是在谈什么？"><a href="#情侣谈钱的时候，究竟是在谈什么？" class="headerlink" title="情侣谈钱的时候，究竟是在谈什么？"></a>情侣谈钱的时候，究竟是在谈什么？</h2><p>那你可能要问了，既然消费模式没有普世的最优解，那么我应该选哪种？</p>
<p>选哪种这个问题，应该由你和你的对象共同决定。不过，今天我想跟你说点比消费模式更高层级的东西。也许你听完我的分析过后，你就可以解决包括消费模式在内的更多的困难。</p>
<p>我们在谈钱的时候，究竟是在谈什么？</p>
<h3 id="谈感情"><a href="#谈感情" class="headerlink" title="谈感情"></a>谈感情</h3><p>当你在审视你和另一半之间经济开销的时候，你考虑的实际上是双方对这段感情的投入程度。因为，真金白银的投入，的确是检视一个人投入程度的重要指标之一。</p>
<p>如果一个男生明明经济条件很好，却吝啬于和你在一起的每一顿饭钱，我们当然有理由怀疑他的真心；如果一个女生明明自己有收入，却要她的伴侣承担全部开销，并不断索要贵重礼物，我们当然有可能怀疑她把这个男生当成钱包和饭票。</p>
<p>但是，如果你们双方都有金钱投入的时候，仅仅是在消费事项和投入比例上产生矛盾，我不建议你把经济问题上升到感情问题。因为这时候你们谈钱，大概率谈的是下面的两个问题。</p>
<h3 id="谈价值"><a href="#谈价值" class="headerlink" title="谈价值"></a>谈价值</h3><p>常有人说自己三观跟着五官走，但在一段亲密关系中，三观还是比五官更为重要。三观相合不是虚无缥缈的嘴炮，体现在生活的方方面面。特别容易凸显的，就是在消费问题上。</p>
<p>有人觉得谈恋爱就该男生付钱，但也有女生觉得男生全部付，是大男子主义；</p>
<p>有人觉得共同开销就应该 AA，还有人觉得男生吃饭吃的多，凭啥 AA；</p>
<p>有人觉得谁提议谁买单，有人觉得怎么我爱吃日料你爱吃麻辣烫，活该我倒霉呀；</p>
<p>有人觉得怎么花钱应该靠自觉，谈钱太俗气，有人觉得先说定后不乱才不会伤感情；</p>
<p>……</p>
<p>价值观这东西，你聊不出对不对，只有合不合。</p>
<p>就比如在武侠江湖中，你站在方证、冲虚两个外人的视角上，你目睹岳不群坑女儿、偷剑谱、练辟邪，作为外人，你会觉得岳不群真是虚伪无耻，野心勃勃。</p>
<p>但是，你要是站在岳不群的视角，你觉得自己是忍辱负重、死中求活，通过个人不懈的奋斗保住了祖宗基业，把华山派死局盘活了。而方证、冲虚维持武林旧秩序，那才是虚伪无耻，野心勃勃。令狐冲要不是人生开挂，先捡风清扬老爷爷后捡圣姑，那就是胸无大志的败家玩意。</p>
<p>所以，一个月生活费两千块的女学生，很难理解自己年薪三十万的男朋友，为什么两个人出来约会如此抠门。毕竟，在她看来，生活费两千块是全部可以用掉来买买买的。</p>
<p>但是，在她男朋友看来，手头的钱除了当前支出，还要储备买房的钱、应急的钱，养老的钱等等，每一笔都要精打细算的。你看，三观不一致，说不到一起去，肯定是白天不懂夜的黑。</p>
<p>情侣谈钱的时候，就是在谈消费观。衣食住行应该怎么分配、远中近期资金应该如何储备、先买房还是先租房；买房买多大、租房租哪里等，这一项一项是非常具体，无所遁形，绕不过去的。</p>
<p>消费观是价值观的最直接反映，所以谈钱是个验证和磨合三观的好机会。</p>
<h3 id="谈妥协"><a href="#谈妥协" class="headerlink" title="谈妥协"></a>谈妥协</h3><p>正如这个世界上没有完全相同的树叶，也没有完全相同价值观的人。</p>
<p>两个人三观完全一致，那是不可能的，我们也无须抱着这样的目标去寻找爱人。问题更加关键的地方在于，当两个人意见不一致的时候，能不能相互接受、相互配合。</p>
<p>比如说，任我行的价值观就是千秋万载、一统江湖，这和令狐冲的琴瑟和谐、笑傲江湖的梦想自然没法磨合。但是最后向问天当了教主，他价值观是大路朝天、各走半边，这和令狐冲虽然不一样，却差不多一个意思，还是可以磨合的。</p>
<p>换在现实生活中，有人觉得应该少挣多花，所以去借套路贷之类的，这和秉持多挣少花原则的人肯定没法磨合。但是，有人觉得应该多挣多花，有人觉得应该少挣少花，这在一定程度上和多挣少花的人完全可以互相包容，无非是一个度的问题。</p>
<p>在这个过程中，可能两个人会暴露出很多不一致的问题：</p>
<p>多挣是多少？</p>
<p>多花和少花的界限在哪？</p>
<p>如何排除情绪、意气之争进行协商？</p>
<p>……</p>
<p>这都是你们在谈钱的时候要训练的事情。与此同时，这些问题的度究竟维持在什么程度，以及你们愿意为对方付出多大程度的妥协，也是一个重要的感情考验。</p>
<p>但是，好在消费观念是可变的，今天我觉得天天喝星巴克难以负担，是多花了；可能明年我收入爆炸增长，就觉得天天喝星巴克也不过如此。</p>
<p>怕就怕出现决不妥协的价值观排异。我不喝星巴克，我还要说喝星巴克的都是小资装逼犯；我不吃汉堡包，我还要说那不就是个肉夹馍；我不用化妆品，我还要说买化妆品都是交了智商税。</p>
<p>你要记住，越强大的人，越能兼容别人的价值观。这是爱的能力的修炼，也是人生的修炼。</p>
<p>所以，如果你和对象谈钱，仅仅是在讲我花多了你花少了，又或者是今天这钱该不该花，那你们就会陷入无休止的争吵中去，永远没有尽头。你如果跳出钱来谈钱，从更高层级去谈感情、谈价值、谈妥协，这才是更长远、更全局的，达成一致后，钱怎么花的问题自然也会迎刃而解的。</p>
<h2 id="如何谈钱不伤感情？"><a href="#如何谈钱不伤感情？" class="headerlink" title="如何谈钱不伤感情？"></a>如何谈钱不伤感情？</h2><h3 id="谈不谈"><a href="#谈不谈" class="headerlink" title="谈不谈"></a>谈不谈</h3><p>其实很多人在这个问题上就停住了，很多人觉得和伴侣谈钱太刺耳，不能提。但实际上，这个问题你回避不了，你在心里憋久了，总会找一个出口爆发。不要觉得谈钱是算计，其实不谈更煎熬。两个人在一起，经济不平等，多花钱的人固然难受，少花钱的也未必就舒服。</p>
<p>最痛苦的莫过于在交往中无时不刻地计算，对方在自己身上花了多少钱、自己这份爱在对方那里余额还有多少、自己还能值多少钱。有时候这不是想占便宜，是怕占便宜却无能为力地彷徨。</p>
<p>所以情侣之间，钱还是要谈一谈的好。</p>
<h3 id="何时谈"><a href="#何时谈" class="headerlink" title="何时谈"></a>何时谈</h3><p>应该谈钱，不代表立刻马上就要谈钱。时机很重要，错误的时间说正确的话，那依然是个错误。</p>
<p>如果你们刚刚建立情侣关系，这时候开销不多，两个人了解也有限，非要就消费模式定个 123，那就显得你对人家防范心理过重了。除非你有王位等着继承，否则，我建议你还是等合适时机，再来谈论钱的问题。</p>
<p>什么叫合适时机？</p>
<p>第一种情况就是双方关系稳固了，准备进入谈婚论嫁阶段了，这时候必须要谈一谈这个问题。虽然恋爱关系本质是精神关系，但是婚姻却是法律关系，法律关系的本质是经济关系，经济关系就肯定是要谈一谈经济问题的。</p>
<p>第二种情况就是当花钱的问题给你造成了实际负担和困扰，那你必须要谈。恋爱既然本质上是精神上追求幸福，那么当恋爱关系附带的花钱问题让你不幸福，你就必须正视这个问题了。</p>
<p>在这两种情况下谈，利大于弊，对感情的帮助大于伤害。</p>
<h3 id="怎么谈"><a href="#怎么谈" class="headerlink" title="怎么谈"></a>怎么谈</h3><p>到了谈的时候，要把握这几个原则，双方更容易达成一致：</p>
<p>第一，相互体谅</p>
<p>能力有大有小，消费有多有少，所以你要本着相互体谅的态度去求同存异。我们最理想的心理状态应该是这样：你有倾其所有的态度，对方却没有理所应当的想法。</p>
<p>第二，量力而行</p>
<p>钱不是问题，没钱才是问题。我认为绝大多数关于花钱的争执，还是在于经济能力跟不上物质需求。顾头不顾腚，顾腚就不能顾头，这才引发矛盾。就像韩国电影《寄生虫》里所说的，钱就是熨斗，能烫平一切褶皱。作为一个穷人，我想象如果有足够多钱的话，这方面矛盾自然会消解。</p>
<p>不过，除了提高经济能力，还有一个解决方法就是降低物质需求，不能开源，就节流。两个人在一起，经济开支出现压力，共同降低消费水平，量力而行也是一个比较可行的方向。</p>
<p>第三，控制范围</p>
<p>无论是 AA 还是一起花钱，都只是消费观的一种差异而已。</p>
<p>你们要做的是求同存异和磨合价值观。万万不要放大问题矛盾，说一个女生物质，说一个男生不爱自己，这一下就把中性的价值观问题，上升为人品问题和感情问题了。</p>
<p>第四，不行就分</p>
<p>如果对方真的很物质，真的不爱自己，没什么好谈的，也不可能靠谈解决问题，那就分手吧。</p>
<p>在一段感情中，绝不轻言分手，但也绝不害怕分手，这样反而更容易保持独立，吸引对方。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>怎么花钱是两个人交往过程中绕不开的话题，爱情当然高于面包，但没法脱离面包谈纯爱。</p>
<p>今天，我们总结了当今情侣之间花钱的几种常见模式，主要有男生买单模式、男女 AA 模式、模糊 AA 模式以及共同基金模式，我们还分别研究了各个模式的利弊。</p>
<p>结论就是，没有完美的花钱模式，所以解决问题的关键在于认清花钱模式背后的本质，然后根据自身情况加以选择。情侣之间谈钱，其实谈的是感情、谈的是价值、谈的是妥协。</p>
<p>我们要跳出就花钱谈花钱，要从更高的层级来审视花钱的问题。</p>
<p>如何谈钱也有很重要的三点要注意，一是必要性的问题；二是时机的问题；三是方式的问题。</p>
<p>最后，我想说，仰望星空，脚踏实地。两个人的爱情不会因为谈钱变得琐碎，就此向现实低头，而是会因为谈钱变得更加真实，就此更加灿烂。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>10 恋爱成功不是只有结婚一条路：分手是我错了吗？</title>
    <url>//posts/3e54b6fc/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="10-恋爱成功不是只有结婚一条路：分手是我错了吗？"><a href="#10-恋爱成功不是只有结婚一条路：分手是我错了吗？" class="headerlink" title="10 恋爱成功不是只有结婚一条路：分手是我错了吗？"></a>10 恋爱成功不是只有结婚一条路：分手是我错了吗？</h1><p>这些年，我被问过最多的情感问题大体上归为两类，一类是如何开始，一类是不想结束。</p>
<p>无论多么艰难的开始，总是伴随着希望和憧憬；但表面再和平的分手，也总伴随着内心的挣扎与伤痛。曾经爱得有多么刻骨铭心，结束之后，就有多么的念念不忘。</p>
<p>感情结束，关系终结，回忆消散。有人开始陷在过去的伤痛中，不知如何走出来；也有人一心想要挽回求复合，天天辗转反侧；也有人选择用大量短期高强度的刺激来麻痹自己。</p>
<p>人生若只如初见，何事秋风悲画扇。</p>
<p>我们当然希望把美好永远定格在初见时心动的那一刻，但越是害怕失去，往往越容易失去。</p>
<p>所以，无论你是单身，还是正处于一段恋情之中，又或是不幸正在分手的阵痛期，这一讲，我都希望和你来聊聊分手这个悲伤的话题。</p>
<h2 id="分手后千万不要干这几件事"><a href="#分手后千万不要干这几件事" class="headerlink" title="分手后千万不要干这几件事"></a>分手后千万不要干这几件事</h2><p>为什么我们都不愿意分手？因为，分手不仅仅是和一个人的告别，更是对一种已经习惯的生活方式、一段充满美好的青春时光和一个酝酿多时的未来期许在挥别。</p>
<p>所以，伤心、难过和痛苦都是非常正常的情绪，我们称之为恢复性悲伤，不用刻意控制。</p>
<p>但是，如果我们长时间地陷入这种情绪无法自拔，出现以下几种情况，我们称之为破坏性悲伤，这个时候，我们就得有意识地进行调节了：</p>
<h3 id="1-纠缠"><a href="#1-纠缠" class="headerlink" title="1. 纠缠"></a>1. 纠缠</h3><p>有些朋友难以接受分手的事实，第一反应就是用尽全力去挽回这段感情。</p>
<p>但是，我们要知道，很多事情并非是大力就能出奇迹的。</p>
<p>一天发一百多条微信，甚至平铺六十秒语音方阵；</p>
<p>一个小时打几十个电话轰炸，不接就一直打；</p>
<p>白天去公司找人聊聊，半夜在人家楼下站着；</p>
<p>通过对方家人朋友去喊话；</p>
<p>……</p>
<p>我其实完全理解，当一个生命中如此重要的人要消失在你的世界里时，你心情有多么迫切。无论是语音、文字还是见面，只有建立起和这个人的联系，才能够缓解那种无处不在的溺水感。</p>
<p>但是两个人的关系，不能仅仅考虑自身的情感需求。当这些做法影响到他人生活的时候，必须加以控制。而且就挽回这件事来说，这样死缠烂打毫无帮助，且会进一步增加对方的恶感。</p>
<h3 id="2-跪舔"><a href="#2-跪舔" class="headerlink" title="2. 跪舔"></a>2. 跪舔</h3><p>比纠缠更用力的，恐怕就是跪舔了。</p>
<p>当一段感情终结时，道歉、表态以试图挽回这段感情是很正常的。但是，很多人会把这种道歉表态上升到写万言血书、立生死大誓、斥巨资买礼物之类的行为，就把自己降格了。</p>
<p>自爱者人恒爱之，自轻者人恒轻之。即便没有分手，还处在一段亲密关系之中，两个人关系一旦失衡，也是很容易导致感情破裂的，更何况是已经分手想要挽回？</p>
<p>之前有个新闻，说一个姑娘不远千里从浙江赶到北京，穿着婚纱参加前男友的毕业典礼。结果她前男友连感动都没有，直接拒绝了她。跪舔的行为看似大胆，看似牺牲，其实都是自我感动。</p>
<p>记住，分手后千万不要妄图用诸如“付出”“痴情”“跪舔”来挽回对方，这些事情会让前任看不起你，也会让未来的你看不起现在的你，更会降低你的社会评价，给你未来的对象凭空增加很多包袱。</p>
<h3 id="3-自虐"><a href="#3-自虐" class="headerlink" title="3. 自虐"></a>3. 自虐</h3><p>比跪舔更用力的，莫过于自虐了。我一般不批评人，但是自虐的确是件傻事。</p>
<p>自虐自伤是自轻的最高级，也是情绪不稳定的最高级，同样还是暴力倾向的一种前兆，基本集合了所有的情感大雷。一旦我们做出这种行为，几乎就直接宣判了感情的死刑。</p>
<p>除了自伤之外，自虐还有一些其他的表现形式，比如借酒消愁、比如一场大病、比如消沉低落。这些广义上的自我伤害可能会引起一些人甚至包括前对象的关注。</p>
<p>当年，令狐冲被小师妹甩了之后就是这个状态，不过丝毫无助于挽回。</p>
<p>但是，就算自虐赢得了对方关注，也不会长久。记住，怜悯永远换不来爱情。</p>
<h3 id="4-甩锅"><a href="#4-甩锅" class="headerlink" title="4. 甩锅"></a>4. 甩锅</h3><p>不愿接受分手现实，除了以上三种企图挽回的思路，还有一种常见的态度，就是甩锅。</p>
<p>比如说，被提分手的时候，勃然大怒，“你还跟我分手，我跟你分手还差不多”；又比如，在分手的时候，指责对方种种不好，四处倾诉自己在这段感情中，受了多少委屈。</p>
<p>这是人之常情，人在失去的时候会本能地进行归因。当这个归因指向外部的时候，才会降低失去的焦虑感。我们都习惯于在一个失衡的环境下，合理化自己的处境，这符合人的天性。</p>
<p>但是，成年人的世界要讲成年人的法则，买卖不成仁义在。</p>
<p>如果对方真的是一个一无是处的混蛋，那这种甩锅在旁人眼里，不过是对你自己眼光的否定。所以，只要对方没有犯什么原则性的错误，比如出轨、家暴，还是得饶人处且饶人吧。</p>
<p>特别是男生，如果一个男生在分手之后，能把分手的责任都揽到自己身上，和外人说“是我当时太年轻了，还不懂爱”，会对自己形象有很大的加分。</p>
<h3 id="5-放纵"><a href="#5-放纵" class="headerlink" title="5. 放纵"></a>5. 放纵</h3><p>还有一种朋友，看似已经走出了一段恋情，马不停蹄地进入了一段新的恋情，甚至日日狂欢，夜夜笙歌，疯狂在朋友圈秀恩爱，其实这都是心里没放下。</p>
<p>宣布新的恋情，亦或是高调宣示自己有的是人追，说白了都是秀给前任看的。</p>
<p>恰恰说明其内心还在乎，但是这种走出恋情的方法，不会让前任觉得嫉妒，反而会让人家觉得自己离开是正确的。同时，这对新恋情也十分不公平，有把新对象沦为工具人之嫌。</p>
<p>而且，还要强调一点的是，如果一个人处于失恋的痛苦中，却迅速走入了一段新的感情，其实也是对自己的不负责任。因为这个时候人的判断能力是受到干扰的，很多人在经历一段爱情长跑分手后，倘若短时间就进入一段新感情并结婚，后面多少会有点后悔。</p>
<p>分手后痛苦是必然，失恋对于大部分人来说，也真的不是一件小事。</p>
<p>你越难受，说明你对这一段感情投入得越多。你曾经为对方不远千里来到一个陌生的城市定居，举目无亲重新开始；你为对方放弃了坚持多年的兴趣爱好，攒下所有积蓄期盼着能买房结婚；为对方主动萎缩了自己的社交圈，从学校风云人物变成街边买菜大叔……</p>
<p>这哪只是一段感情呀！这是全部的过去、现在和未来，这是纯粹的热血、青春和希望。</p>
<p>所以，说没就没了，难受是正常的。可是，就算是难受，我们也不能做上述五件事。这种坚持，才是给这段承载了太多的感情留一个最体面的落幕。</p>
<p>同理，如果分手后，你的前任有上面五种行为，我也不建议你考虑复合。</p>
<h2 id="恋爱不是单选题"><a href="#恋爱不是单选题" class="headerlink" title="恋爱不是单选题"></a>恋爱不是单选题</h2><p>不知道你有没有发现，越优秀的人越难走出失恋的阴影。</p>
<p>因为他们从自身经历习得了这样一种逻辑：好好学习——考上好初中——考上好高中——考上好大学——找个好工作。只要足够投入、战胜对手，就会赢得回报。</p>
<p>然后这套逻辑在感情里就成了：用力爱 Ta——对象搞起——领红本本——白头偕老。所以，一旦他们和恋人分手，这个逻辑指向就是我肯定有哪里做得不够好，才导致了最终的失败。</p>
<p>所有破坏性悲伤，本质都是自我否定。</p>
<p>一旦进入自我否定，就仿佛进入了一场死循环。自身的行动会反复强化这种自我否定，拼命挽回是希望通过前任的再度认可，来证明自己纠错成功；迅速进入另一段未经成熟考虑的恋情，也不过是希望通过第三人的肯定，来认可自己。这些做法之所以弊大于利，原因在于两点：</p>
<p>第一，我们是在把自身价值寄托于他人的判断之上。这只能是镜花水月、梦幻泡影，以我为主的原则前面已经说过很多次，这次就不展开讲了。</p>
<p>第二，我们对恋爱成功的定义过于一元化了。喜欢一个人并不是只有成为情侣才叫成功，情侣也不是非要结婚领证才叫成功，结了婚也不是非得生了娃才叫成功……</p>
<p>成熟的重要标志之一，就是认识到人生是多元的。</p>
<p>恋爱不是升学考试，也不是闯关打怪，不存在非要拿了一血才能进入下个地图。生命中出现一个你喜欢的姑娘，如果她恰好也喜欢你，那么很好，你们可以相伴走过一段人生的旅程；如果她并不喜欢你，那么也很好，邂逅了别样的风景，也是为你的旅途增添了一抹亮色。</p>
<p>旅行重在那一刻的心情，重在你内心感受的美丽，不是非要写下 xx 到此一游或者在一块印着超级大 logo 的大石头旁边，打卡拍照发朋友圈才算旅游。</p>
<p>恋爱也是一样，如果每一段感情都得走向婚姻才算成功的话，那表白都应该选在民政局门口。</p>
<p>罗密欧与朱丽叶、梁山伯与祝英台、萧峰和阿朱都没结成婚，但是，你能说这感情不成功吗？事实上，按照平均一个人谈 3 次恋爱才会结婚的标准答案，分手才是常态。</p>
<p>要相信，今天的你我都是由过去的你我经历集合而塑造的。在一段感情中，成功和美好之处在于和这个人走过的独一无二的经历有多丰富，而不是这个人最后的肉身归属。</p>
<p>另外，从现实角度看，相比于和一个并不合适的对象走进婚姻，分手就是巨大的成功。毕竟，分手的成本比离婚可要小太多了。此外，分手还强行赋予你一种能力，一种保持独立生活的能力。</p>
<p>所以从各个角度看，分手仅仅代表一段感情的结束，并不意味着任何人或者一段感情的失败。当我们走出成者王、败者寇的内卷思维后，才能放下自我否定而去真正享受每一段感情。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>《孙子兵法》有云：昔之善战者，先为不可胜，以待敌之可胜。不可胜在己，可胜在敌。</p>
<p>毛主席也教导过我们，要从最坏处着眼，向最好处努力。所以，无论你处于爱情的什么阶段，了解一下分手这件事，总没有坏处。</p>
<p>今天，我们谈到了分手之后感到痛苦是很正常的，但是，我们绝不要做以下五件事——纠缠、跪舔、自虐、甩锅和放纵。</p>
<p>这既是基于现实主义的考虑，对个人社交形象的一种维护；也是基于理想主义的考虑，给一段真挚的感情留下最后的体面。</p>
<p>最后，我们溯源根本，这些破坏性悲伤的本质，其实都是一种自我否定。我们要摒弃一元的价值判断体系，采取更为多元的方法去判断人生。</p>
<p>分手不意味着失败，结婚也不意味着成功，每一段经历都是生命不可分割的色彩。</p>
<p>不轻言分手，但也不害怕分手，才会让你更好地享受恋情的美好。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>09 相亲与恋爱套路不一样：相亲有哪些需要注意的？</title>
    <url>//posts/c86907a3/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="09-相亲与恋爱套路不一样：相亲有哪些需要注意的？"><a href="#09-相亲与恋爱套路不一样：相亲有哪些需要注意的？" class="headerlink" title="09 相亲与恋爱套路不一样：相亲有哪些需要注意的？"></a>09 相亲与恋爱套路不一样：相亲有哪些需要注意的？</h1><p>最近几年，在春节期间，很多单身的男男女女回家之后，除了和家人欢聚和团圆之外，还有一个重要的任务，就是在父母亲戚的催促或者朋友的牵线下——相亲。</p>
<p>曾经就有朋友告诉我，过年回家的时候，相亲了好几个人，最后虽然对象没找到，但是三天之内看了四遍的《流浪地球》，写的影评大受好评。</p>
<p>这要只是多看了几遍电影，倒也还好，最怕的就是相亲碰上一些奇葩。</p>
<p>比如说，有第一次见面就约人家姑娘晚上九点出门压马路的；有还没见过面就喊姑娘过年陪自己回农村老家的；还有第一次微信聊天就交代跟自己谈恋爱的三大纪律八项注意的。</p>
<p>所以，一说起相亲，就总有人吐槽这些另类的、夺人眼球的奇葩体验，导致不少人对相亲心存顾虑。还有人把对长辈催婚的不满情绪代入了随后的相亲环节，产生了一些先入为主的不良印象。</p>
<p>正是因为相亲中的这种负面体验内容频频上热搜，相亲妖魔化似乎成为了一种潮流。</p>
<p>其实，相亲只是一种开启恋情最为常见的方式，是一种打破社交圈壁垒结识异性的有效方式，也是一种缩短试探期，加速恋情的高效方式。因此，我们既不应该妖魔化这种方式，还要正确地认识到相亲与其他恋爱模式的特殊之处，有效地利用这种模式。</p>
<h2 id="先别排斥相亲"><a href="#先别排斥相亲" class="headerlink" title="先别排斥相亲"></a>先别排斥相亲</h2><p>其实相亲就是以恋爱为目的，通过他人介绍去结识异性的方法，和其他认识异性的方式，没有什么本质区别。所以，在介绍相亲这件事之前，我们先纠正几个对相亲的错误认识：</p>
<h3 id="错误一：相亲是对爱情的玷污"><a href="#错误一：相亲是对爱情的玷污" class="headerlink" title="错误一：相亲是对爱情的玷污"></a>错误一：相亲是对爱情的玷污</h3><p>很大一部分拒绝相亲的朋友，往往是对感情特别认真和投入的人。</p>
<p>因为，他们认为爱情是一件非常神圣的事情。然后觉得，相亲这种速配模式本身是对爱情神圣性的玷污，更何况相亲中还总是夹杂着一堆物质条件的匹配，让人更加难以接受。</p>
<p>首先，这种对感情的认真态度是非常值得肯定的，但是有一句话，还是不得不讲的：神圣的事情不拒绝现实的细碎，现实的细碎无损于神圣的意义。</p>
<p>比如说，苏联卫国战争就是件足够神圣的事情，但这样伟大的胜利不是靠口号和理想就能完成的，是由无数件细碎甚至卑微的小人物小事件支撑的。很多时候，红军战士哪怕一枪不发，顶着伤痛和敌人周旋，在斯大林格勒的极寒大雪中孤独地活下来，本身就是神圣的一部分。</p>
<p>爱情的神圣之处也在于，它不仅能容纳阳春白雪，也能容纳下里巴人，而且丝毫无损爱情的神圣。《小时代》里摇着高脚杯，满身奢侈品的叫爱情，难道《乡村爱情》就不叫爱情？</p>
<h3 id="错误二：相亲是对人的商品化"><a href="#错误二：相亲是对人的商品化" class="headerlink" title="错误二：相亲是对人的商品化"></a>错误二：相亲是对人的商品化</h3><p>在相亲前，或者相亲的时候，往往有一个双方条件交换的过程。比如说，最为知名的相亲角——上海人民公园，那里有拿着子女信息的大爷大妈，把相亲搞得就像是互投简历。</p>
<p>许多人就觉得，相亲这件事太物质、太功利了，是把人作为商品。实际上，任何感情最终走到一起，必然存在一个价值匹配的过程。只不过有的匹配是多元的，而相亲初期的匹配是一元的；有的匹配是隐性的，而相亲是显性的；有的匹配是长期试探的，而相亲是一锤子买卖。</p>
<p>但是，实质上都是感情双方的价值和需求匹配过程，只是形式的不同。</p>
<h3 id="错误三：相亲意味着我没异性缘"><a href="#错误三：相亲意味着我没异性缘" class="headerlink" title="错误三：相亲意味着我没异性缘"></a>错误三：相亲意味着我没异性缘</h3><p>还有一部分朋友认为相亲是最后的办法，如果自己去相亲的话，被别人或者朋友知道，就意味着自己在平时生活中找不到对象，很丢脸，所以不到万不得已，不想走到相亲这一步。</p>
<p>我们要改变这种认知，相亲不过是一种社交模式，这种模式与你在酒吧喝酒认识异性、在饭局吃饭认识异性，或者是在牌桌上打牌认识异性，其实没有什么本质区别。</p>
<p>两个人最终走到一起，最根本的还是看人。</p>
<p>一个优秀的人能够选择你，就是你价值的体现。至于这个人是相亲认识的，还是喝酒吃饭打牌认识的，又或是图书馆健身房公益活动认识的，并不存在什么高下之别。</p>
<h3 id="错误四：相亲对象不靠谱"><a href="#错误四：相亲对象不靠谱" class="headerlink" title="错误四：相亲对象不靠谱"></a>错误四：相亲对象不靠谱</h3><p>有人经历了几次不成功的相亲后，就开始对相亲这件事充满失望，觉得相亲对象不靠谱。甚至还常有人说，别人给你介绍什么样的对象，你在别人眼里就是什么人。</p>
<p>其实大可不必生气，当你没有给出任何明确相亲条件的时候，介绍人牵线的心态特别简单。只要是男的单身，女的也单身，那就是天造地设的一对，没有比这更合适了。</p>
<p>假设媒人的社交圈内，只出现了刘亦菲和隔壁二狗子两个单身男女，他都敢把刘亦菲介绍给隔壁二狗子。情商低的介绍人甚至还会加一句，年纪都这么大了，别太挑，我看二狗子这人就挺好。</p>
<p>所以，当你没有方向的时候，哪里都是逆风，与相亲无关。</p>
<h2 id="读懂相亲与其他恋爱模式的异同"><a href="#读懂相亲与其他恋爱模式的异同" class="headerlink" title="读懂相亲与其他恋爱模式的异同"></a>读懂相亲与其他恋爱模式的异同</h2><p>相亲只是一种认识异性的方式，依然和所有其他恋爱模式一样，要走完两个人相互了解、相互吸引的过程，最终才能走到一起。所以，千万不要觉得今天相亲看对眼了，明天就可以去民政局领证了，就像不要在大街上问一个异性要到了微信，就把两个人孩子去哪上幼儿园都想好了。</p>
<p>但是相比于其他模式，相亲确实有一些独特之处，知道这些特点，才能制定出合适的相亲策略。</p>
<h3 id="第一，讲究效率"><a href="#第一，讲究效率" class="headerlink" title="第一，讲究效率"></a>第一，讲究效率</h3><p>在其他模式下认识的异性，由于相识场景各不相同，信息交互可能非常不充分，因此效率可能比较低。我甚至见过一种情况，就是追了人家姑娘三个月以后才知道人家有男朋友。</p>
<p>但是相亲因为有介绍人环节的存在，一些显性条件的提前筛选是比较有效的。</p>
<p>比如照片、年龄、学历、工作单位这些情况不容易踩雷。当然，你还要学会分辨介绍人的话，他们一般不会故意欺骗，但一定会有选择地进行吹嘘。例如：</p>
<p>男的，长得很好，身高 170，人有上进心，性格很好，风趣幽默，年薪 20 万。</p>
<p>这里面只有性别、身高和年薪三件事是有效信息，其他都是虚的，这是信息筛选的第一层。</p>
<p>第二层，就是在这个有效信息里面，身高 170 和年薪 20 万这两条都含有比较敏感的数字，一般这种恰好整数的，你也要长个心眼，可能都是要差一点的。</p>
<p>比如说，身高 166~169 的一般都会报 170，年薪 16~19 万的一般都会报 20 万。所以，身高 171 是真的 171，但是 170 一般会少一点。当然，还存在女生个子比较高，为了成功率往低里报的情况。在南方就有很多这种情况，女生报 175 的身高，往往都超过 175.</p>
<p>第三层，不仅要看他说了什么，更要看他没说什么。比如只说年薪不说工作单位，那么工作单位多半没什么好吹的，职务也可能并不高。只说了身高没说年龄，一般年龄会有点偏大。</p>
<p>第四层，不仅要看有效信息，也要看虚话。比如说长得很好，但没有细节，那一般不会长得特别惊艳。长得特别帅，一定会有进一步的细节介绍。但是，既然说了长得很好，肯定不会特别难看，特别难看的话，介绍人也会回避掉，这个信息就会选择不说。</p>
<p>再比如说，性格很好，幽默风趣这两条呢？幽默风趣未必是一定的，但是人起码是比较外向的。如果不太爱说话、比较闷的，介绍人就会介绍对方说，为人稳重，老实可靠。</p>
<h3 id="第二，目的明确"><a href="#第二，目的明确" class="headerlink" title="第二，目的明确"></a>第二，目的明确</h3><p>其他模式认识的异性，在没有明确关系之前，双方可以是多元发展的。可以做朋友、可以做兄妹、可以做事业伙伴，即便你察觉到对方的异样，在没有积累足够好感度之前，你也可以装傻充愣，假装不知道。甚至在表白的时候还可以无辜地说，我只是想学编程，你居然想睡我。</p>
<p>但相亲的目的是很明确的，双方认识的唯一目的就是搞对象，双方应该建立这个基本共识，不然就不用谈了。因此，在双方确立关系之前，所有负面反馈都应该视为拒绝，不接电话、约不出来、回消息慢，都可以视为拒绝。相亲是不能拿慢热、懵懂之类的原因当借口的。</p>
<h3 id="第三，推进速度"><a href="#第三，推进速度" class="headerlink" title="第三，推进速度"></a>第三，推进速度</h3><p>在之前的课程里，你可能也感觉到了，感情是没有一个明确的时间界限的。我认为每一段感情都有自己的时间表，所以从不给一个客观的时间范围，说到什么时间干什么事。</p>
<p>不过由于提问的人很多，我给出一个大概的时间供你参考。</p>
<p>排除校园恋爱这种可以多年长跑的，自由恋爱从确立关系到一年左右的，是比较适合考虑结婚问题的，而相亲由于目的明确，推进速度可以更快。从首次见面到一个月左右时间确定关系，是比较正常的；如果相亲三个月后还不确定关系的，可能就存在某些问题，可以考虑止损了。</p>
<h3 id="第四，并行策略"><a href="#第四，并行策略" class="headerlink" title="第四，并行策略"></a>第四，并行策略</h3><p>爱情有一个鲜明的属性，就是排他的唯一性。</p>
<p>所以恋爱必须是单线的，同时追求几个对象，那肯定不是真爱，也违背了传统道德，一旦被发现，可能要付出非常惨痛的社交成本。甚至有些女生特别多的师范院校，专门有渣男墙挂人的。</p>
<p>不过相亲只是结识，不算追求，所以是可以并行的。</p>
<p>特别是在过年期间，你完全可以密集安排几个相亲。在没有给出明确答复之前，你可以和不同异性见面相亲。但是相亲一般最晚一周之内要给对方一个明确答复，是否继续接触。一旦你给出肯定答复，就应该停止相亲活动，这是对相亲对象和介绍人的基本尊重。</p>
<h3 id="第五，黑白名单"><a href="#第五，黑白名单" class="headerlink" title="第五，黑白名单"></a>第五，黑白名单</h3><p>其他模式结识的异性，一定是某个瞬间身上的闪光点打动了你，因此你会喜欢上 TA，这种叫作白名单模式。白名单里的人，一定是某些特点吸引了你，比较有魅力，相处比较有激情的。</p>
<p>但是，这个名单里的人由于了解少，很可能也有雷，你们的恋爱过程会是个排雷的过程。随着了解的加深，你要看对方身上有没有让你无法忍受的缺点，没有才能走下去。</p>
<p>相亲恰恰相反，能够走进你相亲名单的人，往往是没什么雷，看着条件都还行，但一时没什么特别打动自己的。这种我建议你采取黑名单模式，只要见面后没有发现什么特别大的缺点，不进黑名单的都可以尝试接触。毕竟，相亲那一两次特定的场合环境，是很难展现一个人闪光点的。</p>
<h2 id="相亲注意手册"><a href="#相亲注意手册" class="headerlink" title="相亲注意手册"></a>相亲注意手册</h2><p>下面，我们来聊聊相亲的一些原则和注意事项。</p>
<h3 id="相亲原则一：明确"><a href="#相亲原则一：明确" class="headerlink" title="相亲原则一：明确"></a>相亲原则一：明确</h3><p>在第一次相亲见面前，最好不要在线聊太长时间。毫无基础的两个人聊起来很容易尬，尬聊久了就容易崩。一般互相交换联系方式后，最好一周内安排“真身”见面。</p>
<p>第一次见面后，最好当天就能有明确答复，最长一般不超过一周。这个答复可以直接和相亲对象交流，也可以通过介绍人转达，觉得行就是行，不行就是不行。如果几天没有答复，一般视作不同意，没答复介绍人还催问你什么意向的话，那说明对方对你的印象还不错，介绍人在给你兜。</p>
<h3 id="相亲原则二：礼貌"><a href="#相亲原则二：礼貌" class="headerlink" title="相亲原则二：礼貌"></a>相亲原则二：礼貌</h3><p>俗话说，买卖不成仁义在，相亲即便没有看上对方，也最好给予基本的礼貌和尊重。</p>
<p>这种礼貌体现在见面时，不要一看对方不是很中意，就爱搭不理地，甚至不停地玩手机；又或者出言讥讽，指点江山。特别是不要讲，自己是被父母逼来的，特别减分。</p>
<p>对任何相亲对象都保持尊重，可以极大提高你的社会评价。就如同千金买马骨，千里马就会源源不断上门的。相反，一旦你做出了什么失礼的举动，很容易失去优质的相亲机会。</p>
<h3 id="相亲原则三：委婉"><a href="#相亲原则三：委婉" class="headerlink" title="相亲原则三：委婉"></a>相亲原则三：委婉</h3><p>拒绝对方要委婉，你不是情感导师，不用干我这活，去给人家指出相亲中存在的不足和缺点。</p>
<p>拒绝人家的话，你可以直接发好人卡，说不太合适就好了。同时，也要读懂对方的委婉，当人家给出一个非常宽泛而不具体的理由拒绝你时，也千万不要再追问别人自己哪里不合适了。</p>
<h3 id="相亲原则四：果断"><a href="#相亲原则四：果断" class="headerlink" title="相亲原则四：果断"></a>相亲原则四：果断</h3><p>相亲始终是效率优先的，根据我这么长的咨询经历，相亲第一次没有看中的，很难通过后续发展挽回了。所以，一旦对方表现出不耐烦、不感兴趣，一聊天就去洗澡睡觉的，一定要果断止损。</p>
<p>以上这些属于原则性和指导性内容，适用范围比较广。</p>
<p>最后，我再介绍一些适用范围相对窄一些，根据经验总结出的相亲 tips：</p>
<p>相亲时间：最好选择晚饭或者周末的下午，时间相对充裕；</p>
<p>相亲地点：最好事前征求对方意见，男方给几个选项交给女方来选，不要选太便宜的路边摊，也不要选太贵的大酒店；</p>
<p>相亲穿着：干净整洁即可，男方特别注意头发，女方不要化浓妆；</p>
<p>相亲话题：自身情况的介绍，和介绍人的关系或趣事，兴趣爱好以及对对方的印象，实在不行就谈谈自己的工作，千万不要开黄腔，也不要攻击对方；</p>
<p>相亲技巧：一句话开场就可以极大缓解双方的尴尬，万一谈不成就当交个朋友也是好的，这是降低对方的压力和紧张，以退为进。一句话总结就能赢得对方好感，听介绍人提起你好几次，夸你非常优秀，今天见面发现你真的很棒，正所谓伸手不打笑脸人，夸人永远不吃亏。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>相亲是一种建立亲密关系的常见方法，甚至是占比最高的一种方法。</p>
<p>但是为数不少的朋友对相亲心存顾虑，比较排斥。今天，我们首先分析和纠正了四种对相亲的错误认识，希望你能够不受当前网络妖魔化相亲的影响，以一颗平常心面对相亲。</p>
<p>其次，我们就相亲和其他恋爱模式进行了比较，介绍了相亲的五个特点，一是讲究效率；二是目的明确；三是推进速度；四是并行策略；五是黑白名单。当然，不管相亲有多少特点，相亲也仅仅是以恋爱为目的，结识异性的一种方法而已，恋爱该有的流程都不能省略。</p>
<p>最后，我们给出了相亲注意手册，给出了四条相亲原则，分别是明确、礼貌、委婉和果断。然后，给你提供了一些关于相亲时间、地点和话题的具体的 tips。</p>
<p>根据六度分隔理论，只要经过五次介绍，你就可以和世界上任何一个人相亲。所以，不要紧紧盯着窝边草，好好相亲，可能 gakki 都真的会变成老婆哦！</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>11 独身主义也不赖：选择不结婚究竟是选择了什么？</title>
    <url>//posts/3a52d6ae/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="11-独身主义也不赖：选择不结婚究竟是选择了什么？"><a href="#11-独身主义也不赖：选择不结婚究竟是选择了什么？" class="headerlink" title="11 独身主义也不赖：选择不结婚究竟是选择了什么？"></a>11 独身主义也不赖：选择不结婚究竟是选择了什么？</h1><p>到目前为止，我们已经结束了对爱情全流程的讨论。从今天起，我们将开启三类常见爱情模式的全新话题。第一个要讲的，甚至不能叫爱情模式，而是一种反爱情模式——独身主义。</p>
<p>正如独身主义的口号宣称的一样，“单身一时爽，一直单身一直爽”。很多大都市的单身男女坚持自由至上的理念，认为任何人都有不结婚、不恋爱的自由，而且一个人也可以过得很好。</p>
<p>本来作为一个讲恋爱课的老师，我应该旗帜鲜明地反对这种砸饭碗的行为。</p>
<p>但是，基于个人的认知和经验，我对独身主义却是非常支持的。的确，每个人都有自己的恋爱自由权。但是我们要认识到，一个人可以过得很好，只是独身主义的前提条件，而不是根本动力。</p>
<p>真正让人坚持选择不恋爱、不结婚的，并不是一股子叛逆心理中的反爱情因素。实际上，恰恰相反的是，多数独身主义的根源在于对爱情有理想主义的坚守，宁可单身，绝不将就。</p>
<p>当然，这是价值观问题，价值观无对错之分。坚持理想一定会幸福吗？认命将就一定不幸福吗？</p>
<p>今天，我们就来对上述正反两个方面的因素做个分析。</p>
<h2 id="真的是自己想结婚吗？"><a href="#真的是自己想结婚吗？" class="headerlink" title="真的是自己想结婚吗？"></a>真的是自己想结婚吗？</h2><p>如今，自由恋爱的观念深入人心，包办婚姻早已经像一张废纸，被扔进了历史的垃圾桶里，现在大部分的结婚都得经过本人同意才行。但是，本人同意就一定是本人意志的体现吗？</p>
<p>并不一定。</p>
<p>绝大多数人选择婚姻当然是为了选择真爱，但不容否认，也有一部分人其实是没有做好婚姻的准备，只是因为被“洗脑包”给洗脑了，慢慢变得盲从，导致自己匆匆忙忙就找人托付了终生。结果呢？要么是痛苦地凑合下去，要么是迅速地离婚。</p>
<p>那么，这些讨厌的结婚洗脑包有哪些呢？这些洗脑包主要分为两种：</p>
<h3 id="第一种：什么时间干什么事"><a href="#第一种：什么时间干什么事" class="headerlink" title="第一种：什么时间干什么事"></a>第一种：什么时间干什么事</h3><p>所有催婚的父母，似乎都不约而同地掌握着同一句至理名言——什么时间干什么事。</p>
<p>你上学的时候，他们会告诉你应该六根清净，两耳不闻窗外事，一心只读圣贤书。谈恋爱？那是绝不可能的事情，是坚决不允许的，这叫什么时间干什么事。</p>
<p>在你工作以后，他们又马上催你找对象，你仿佛就应该秒懂如何找对象，找到对象就要赶紧结婚，结了婚要赶紧生小孩，生了小孩还要赶紧生二胎，这叫什么时间干什么事。</p>
<p>其实，父母们这么想也是情有可原的。我们的上一代，是在集体主义和计划经济氛围下生长起来的人，每个人的人生节奏都差不多，也有相应的条件支撑。在他们的认知里，大家都得对着这个时间表来过，人生才不容易出错，离经叛道的人往往没什么好下场。</p>
<p>但是，时代变了。在当下的中国，人与人的差别在拉大，人生的道路也充满了无限多的可能。我们不能再用同一把尺子去丈量每个人的人生，这在客观上已经不适用了。</p>
<p>但是，还是有很多人在这个洗脑包的洗脑之下，认为三十岁不结婚就是不孝，三十岁不结婚以后就不好结了，所以选择用一种运动式甚至突击式的恋爱来抢占三十岁大关。</p>
<p>因为，纵使时代如风云一样改变，传统的观念却依然强大。</p>
<p>传统的惯性不会仅仅靠一代人的时间就能停下，甚至发生转折。比如说，《傲慢与偏见》写于 19 世纪初，工业革命都已经搞了半个世纪，可是里面的班纳特一家五个女儿还是没有继承权。要再过一百多年直到 1925 年，大清都亡了十几年，英国才废除限定继承权。</p>
<p>这样推算下来，我们想在短期内靠社会自身力量来扭转这种理念是很难的，必须要靠个人的清醒来对抗群体灌输。读书的时间干读书的事情没有问题，但是并不存在什么应该恋爱的时间，应该结婚的时间。你在什么时间遇到那个让你心动的人，什么时间才应该恋爱。</p>
<h3 id="第二种：找不到对象的是-loser"><a href="#第二种：找不到对象的是-loser" class="headerlink" title="第二种：找不到对象的是 loser"></a>第二种：找不到对象的是 loser</h3><p>在我小时候，单身羞辱还仅限于大龄男青年——老光棍。当时的外国电影里，中学生会因为没有对象、没有性经验而感到自卑，甚至受到公开羞辱，这还是一种无法想象的文化环境。</p>
<p>仅仅十来年过去，单身羞辱已经开始无差别火力覆盖了，大龄剩女、屌丝、老处男，直至女博士、老实人、直男癌、小镇做题家等等，只要没对象，总有一个帽子能扣上来。现在流行吹性魅力、吹征服力、吹约炮百人斩，以至于有些小三、绿茶、海王开始不以为耻，却反以为荣。</p>
<p>在这种语境下，个人的拼搏奋斗、学识谈吐都不重要。这个世界上，就分两种人，有对象的和没对象的。人的成功程度，完全取决于其对象的颜值……</p>
<p>连颜宁和杨丽萍这样的女神，都被中年大妈嘲讽说，一个女人最大的失败就是没一个儿女。</p>
<p>正所谓三人成虎，不少人也从内心深处开始认同，有没有对象，或者有多少对象才是衡量人生意义的标尺，为了脱个单不惜耗费大量的时间精力。如果说，到时间就该结婚这种观念，虽然强大，但是终将过去；那么，找不到对象就是 loser 的观念，正在慢慢地占据未来。</p>
<p>一个人，如果把证明自己生命价值和意义的事情，寄托在能否找到一个高颜值对象这种外因上，那么，他整个生活就是颠倒的，无异于缘木求鱼。</p>
<p>爱情可以产生在各种各样的环境和场景，但我希望你在进入一段亲密关系前，千万要反思一下自己，是不是因为这两种洗脑包给你制造的恋爱焦虑，才驱动你谈恋爱的。</p>
<p>反过来说，在当下，如果你坚持独身主义，恭喜你，你起码战胜了以上这两种洗脑包。</p>
<h2 id="独身主义意味着什么？"><a href="#独身主义意味着什么？" class="headerlink" title="独身主义意味着什么？"></a>独身主义意味着什么？</h2><p>有人说，不结婚的独身主义好处多多，自己挣钱自己花，一个人吃饱全家不愁，想干啥就干啥，没人管，没人约束。可是，自由都是有代价的，从来没有不需要抵抗重力的飞翔。</p>
<h3 id="经济代价"><a href="#经济代价" class="headerlink" title="经济代价"></a>经济代价</h3><p>我们前面提过，婚姻作为一种法律关系，实质是一种经济关系。</p>
<p>这种经济关系能经过千百年的传承，说明其效率在一般情况下是高于单身的。</p>
<p>只要有过独身生活的人一定会深有感触，工薪阶层白领两个人在一起无论是租房、吃饭等开销的分担，还是攒钱的速度，都是显著优于单身的。除此之外，两个人通过婚姻关系连接，抗风险能力也会显著增强。独身在外地的朋友只要得过一次病，就能充分体会到其中的艰辛。</p>
<p>我相信，大部分选择独身的朋友，正值壮年，已经做好了承担这些经济代价的准备。但是，从社会的角度来说，希望你还要充分考虑到未来老龄化背景下养老的储备。</p>
<h3 id="舆论代价"><a href="#舆论代价" class="headerlink" title="舆论代价"></a>舆论代价</h3><p>相比经济代价，坚持独身的朋友的压力，更多地来自于舆论。尤其在小城镇，大多是熟人社会，高密度人际关系无处不在。坚持独身是一个态度问题，会被视为异类，继而招来无处不在的说教、嘲讽和排斥。对你抱有善意的人会向你施压，对你抱有恶意的人也会向你施压。</p>
<p>在大城市，舆论环境还算相对友好，大家轻易不会跨越社交边界，干涉别人私事，所以北上广深，坚持独身的朋友相对更多。但是可能依然要付出舆论代价，因为可能会被视为一个能力问题，“年纪大了不结婚，这人多少有点什么问题”。</p>
<p>我一个妹妹在上海外企工作，175cm 的高个，盘靓条顺，过年回来却因为没找对象被长辈集体教育。我打着吃宵夜的旗号把她解救出来，安慰她还好是在上海工作，环境比较前卫开放，我们这种小地方比较保守，女孩过了 30 岁不结婚会被看成异类。</p>
<p>结果她神色一下黯淡，说我在别人眼里早就是个怪胎了。</p>
<p>人生之艰难就是这样，有些事情，我们明知道别人是错的，但他们围观和讨论的成本，却要由对的人来支付。我说让你完全不在意，那是玄学，只能尽量远离这些压力源。</p>
<h3 id="情绪代价"><a href="#情绪代价" class="headerlink" title="情绪代价"></a>情绪代价</h3><p>如果说经济代价和舆论代价都是外部的，那么内部的就是情绪代价。任何人情绪都有高潮和低谷，爱人的陪伴是度过情绪低谷期的良方。可没有爱人，独身就要有强大的自我调节能力。</p>
<p>无人与我立黄昏，无人问我粥可温。</p>
<p>无人与我捻熄灯，无人共我书半生。</p>
<p>或许在年轻的时候，这不是个特别大的问题，按照《三重门》（也可能是花季雨季，记不大清楚了）的说法，小学生是一队一队，中学生是一堆一堆，大学生是一对一对。在我们 18 岁的时候，同学朋友确实一大堆，干任何无聊的事情，你都能找到人陪你一起。</p>
<p>但是，随着时间推移，能够肆无忌惮、无话不谈的朋友越来越少，有的淡出你的生活、有的要回归家庭，有的存在利益冲突，就像《老男孩》歌词唱的：</p>
<p>各自奔前程的身影</p>
<p>匆匆渐行渐远</p>
<p>……</p>
<p>抬头仰望着满天星河</p>
<p>那时候陪伴我的那颗</p>
<p>这里的故事你是否还记得</p>
<p>你曾认为会永远陪在你身边的人，会因为各种各样甚至你想都想不到的原因离开。相比之下，人生这条艰难路上，婚姻伴侣确实是你最坚定也是最稳定的同行者。</p>
<p>所以，如果人生艰难，你选择独身，只身向前的准备，你做好了吗？</p>
<h3 id="价值代价"><a href="#价值代价" class="headerlink" title="价值代价"></a>价值代价</h3><p>“价值代价”这个名字，起得可能不太准确，但确实找不到更好的词。什么意思呢？就是我们每一天都在追求人生价值，到最后，无非是为了“没有白来这个人世间走一遭。”</p>
<p>皮克斯在 17 年有部片子叫《寻梦环游记》，我朋友四岁的小孩看得嚎啕大哭。或许这是他第一次直观地感受到了死亡的恐惧。</p>
<p>人的一生，要死去三次。第一次，当你的心跳停止，呼吸消逝，你在生物学上被宣告了死亡；第二次，当你下葬，人们穿着黑衣出席你的葬礼，他们宣告，你在这个社会上不复存在，你从人际关系网里消逝，你悄然离去；而第三次死亡，是这个世界上最后一个记得你的人，把你忘记，于是，你就真正地死去。整个宇宙都将不再和你有关。</p>
<p>不结婚而保持独身，最高价值层面的代价在于，你将失去一个最容易与这个世界建立羁绊的途径。立德立功立言，我们普通人啥也立不了，程序员倒是可以流传一套代码，被后人吐槽“祖传屎山”又不得不用。但是绝大多数情况下，选择独身，你会发现与这个世界的羁绊越来越少。</p>
<p>哲学最终极的思考是“存在”（出自知名哲学家沃兹基硕德）。</p>
<p>学没学过哲学的人都会有存在性焦虑，缓解这种焦虑的唯一办法，就是在一段关系中能被聆听、被重视、被回应。权力之所以让人陶醉，就是因为权力天然地将人摆在一段关系中的中心位置。而婚姻关系，也是让人真正存在于关系之中，而非简单处于一段关系中的绝佳选择。</p>
<p>所以，遇到真喜欢的人，也不妨松松土，试一试，还能减轻一点双方的存在性焦虑。</p>
<p>我每天熬夜写课程、回答问题、接受咨询，很多朋友常常时隔多年还在向我表示感谢。其实我做的非常有限，是朋友们的支持和鼓励，让我和这个世界建立了多元的联系，是你缓解了我的存在性焦虑，让我感到没有白来这个人世间走一遭。借此机会，向你说一声谢谢。</p>
<h2 id="到底独身否？"><a href="#到底独身否？" class="headerlink" title="到底独身否？"></a>到底独身否？</h2><p>你可能会问了，老师，又是洗脑，又是代价的，我到底要不要继续独身？</p>
<p>无论你是选择结婚，还是选择独身，都应是出自内心真正的热爱，而不是大众的裹挟。幸福不是因畏惧风险而改变，也不是因无惧风险而坚持。幸福是明知风险，但为了心中所爱，坦然承受。</p>
<p>最后给坚持独身主义的朋友讲个故事。</p>
<p>从前，有只小熊喜欢一只小花喵，它采了一大捧玫瑰花送给小花喵，扎得满手是血。可是，小花喵死活不肯收，说自己和小熊不合适。小熊只好把玫瑰一朵朵地发给路上偶遇的小动物，也有小狸喵、小白喵很喜欢小熊，说你要是能给我一整束玫瑰，我们就在一起吧。</p>
<p>但是，小熊再也没有一整束玫瑰了。</p>
<p>我们知道，玫瑰其实一直都有，怕的是满手是血，却没人愿意收。所以，希望支撑你只身前行的，不仅仅是对伤口的恐惧，而是更多的价值思考。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>今天我们讨论的是独身主义，这是相对小众，也非常需要勇气的一种选择。</p>
<p>首先，我们对支持“结婚才是正确”的两个洗脑包进行了批判：</p>
<p>一种叫“什么时间干什么事”，实质上是前人们生活习惯塑造的传统经验；</p>
<p>另一种叫“找不到对象的是 loser”，实质上是盲目接受外部的文化输入。</p>
<p>无论是害怕成为异类，还是彰显自身价值，都不应该是支撑恋爱结婚的理由。我们唯一能接受的理由，应该是真爱。</p>
<p>其次，我们对独身主义要付出的代价进行了分析：</p>
<p>外部的代价包括经济代价与舆论代价；</p>
<p>内部代价包括情绪代价与价值代价。</p>
<p>希望你能够在充分想清楚要面对的困难以后，再决定是否坚持独身。</p>
<p>最后，我想说，理想的婚恋环境，应该是大家都真诚地对待婚恋，但不将其作为人生的全部。</p>
<p>虽然，我们高度认同婚恋幸福的价值，因为这需要能力、精力甚至一点运气，但我们同样认同事业、爱好、友情等一切美好事物的价值，并允许支持鼓励人们将其作为毕生追求。</p>
<p>这样，单身的人会得到幸福和尊重，而不是一个内卷、焦虑和党同伐异的丛林环境。</p>
<p>这需要我们共同努力，以此共勉。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>12 姐弟恋也很可爱：姐弟恋有什么好处和注意事项？</title>
    <url>//posts/15ed87f0/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="12-姐弟恋也很可爱：姐弟恋有什么好处和注意事项？"><a href="#12-姐弟恋也很可爱：姐弟恋有什么好处和注意事项？" class="headerlink" title="12 姐弟恋也很可爱：姐弟恋有什么好处和注意事项？"></a>12 姐弟恋也很可爱：姐弟恋有什么好处和注意事项？</h1><p>如果一个男人找比自己小很多的女人做妻子，舆论往往会去抨击这个女人；那么，如果一个女人找比自己小很多的男人做丈夫呢？是的，舆论还是会抨击这个女人。电视剧里，俞飞鸿这种女神搞姐弟恋，尚且要被骂不要脸，普通人谈姐弟恋的压力也就可想而知了。</p>
<p>但是，无论传统舆论对此有多不满，姐弟恋却还是成为了一种不可阻挡的趋势。</p>
<p>王菲和谢霆锋是姐弟恋、文章和马伊琍是姐弟恋、秦昊和伊能静也是姐弟恋，姐弟恋仿佛成了女明星的标配。但也不光明星，试问，又有哪个女生不想体验一下萧亚轩的快乐？</p>
<p>据统计显示，在 1990 年，男大女小的夫妻占 70%，男小女大占 13%；到 2010 年，男大女小的夫妻占 43%，男小女大占 40%。事实上，根本无需统计数据，随着经济社会发展，女性经济社会地位不断提高，姐弟恋的趋势是一种必然，甚至可以算是对男大女小占比过大的拨乱反正。</p>
<p>既然一件事情能从偶然走向必然，从单发变为趋势，我们就有研究的必要。同时，也是应许多朋友的要求，特别是本课程责任编辑小奶酪的要求，今天我们就来讲一讲姐弟恋的话题。</p>
<h2 id="姐弟恋模式好处多多"><a href="#姐弟恋模式好处多多" class="headerlink" title="姐弟恋模式好处多多"></a>姐弟恋模式好处多多</h2><p>首先，我们来给“姐弟恋”下个定义。你可能会说，什么？姐弟恋还要下定义？</p>
<p>对的，因为从狭义上说，只要女生年龄比男生大就叫姐弟恋。一般来讲，女生比男生大三岁以上才会显著呈现姐弟恋模式。很多女生比男生大一两个月的、一两岁的，可以统一处理为同龄人。</p>
<p>但在我的经验里，这种狭义的说法并不准确。如果女生生理年龄小于男生，但实际心理年龄却大于男生，换句话说，女生要比男生成熟得多，这其实也属于姐弟恋模式的恋情。</p>
<p>总的来说，无论男女生理年龄差有多少，必须心理上处于姐弟恋状态才能叫姐弟恋。</p>
<p>所以，即便你恰好处于男大女小的恋爱组合，又或者你也不准备进入姐弟恋，但这一讲，你也有看一看的必要。毕竟 ，经营爱情这个事，海纳百川有容乃大，它山之石可以攻玉。</p>
<p>分析完了姐弟恋的定义后，我们来看看它有哪些特点。相较于传统男大女小的恋情（叫兄妹恋有点怪怪的，以下简称传统模式），姐弟恋存在以下特点：</p>
<h3 id="第一，生理年龄差异"><a href="#第一，生理年龄差异" class="headerlink" title="第一，生理年龄差异"></a>第一，生理年龄差异</h3><p>这或许是姐弟恋最直观的差异，有很多人将其视为姐弟恋的难点之一。</p>
<p>但请你把关于年龄的刻板印象抛诸脑后，舆论压力、相处模式、生活差异其实都不是年龄差必然带来的问题。如果我们仅就生理年龄讨论生理年龄的话，姐弟恋其实是个优势。</p>
<p>男女在生理上存在差异，所以，男生女生的生理需求峰值是有所错位的。通常来说，女生活力最旺盛的年龄段是要晚于男生的。因此，姐弟恋相比传统模式，更容易在这方面达到适配。</p>
<p>比如说，在《鹿鼎记》里，神龙教教主夫人苏荃这个大美女嫁给了大自己很多的洪安通，却最终叛出神龙教，跟了小自己很多的韦小宝，除了形势所迫之外，很大程度和韦小宝恰好处于胡天胡地的年纪有关。联想到后来，韦爵爷一家在通吃岛住了那么久，孤男七女在岛上也没啥其他娱乐活动，老韦家未添一丁半口，如果是这个状态的小宝弟弟，恐怕就难以拿下苏荃姐姐了。</p>
<p>其次，从人口统计学来看，女性的平均寿命是要高于男性的。所以，从统计意义上讲，姐弟恋共同陪伴的时间也会长一点，不容易出现女方晚年长期处于丧偶状态的局面。</p>
<h3 id="第二，情绪供需差异"><a href="#第二，情绪供需差异" class="headerlink" title="第二，情绪供需差异"></a>第二，情绪供需差异</h3><p>姐弟恋模式最核心的定义，就是女方才是亲密关系中的情绪价值供给的主导者。</p>
<p>这里要敲黑板了！</p>
<p>这里引出一个非常关键的概念——情绪价值。情绪价值定义一套一套的，你只需要知道，它就是情绪收益与情绪成本之差。用大白话讲，就是跟你在一起，开心与难过的差值，就是情绪价值。</p>
<p>不单单是在情侣之间，我们在日常交往中，也一定会注意到，有些人就是具备高情绪价值，跟这种人在一起，就是会感觉特别舒服，你有啥好事都愿意跟他一块。但是，也有些人就是低情绪价值，他整天怨天尤人，杞人忧天，负能量爆棚，你一看见就避之不及。</p>
<p>说到这，就要讲一下如何才能提供情绪价值，最底层的就是要情绪稳定。</p>
<p>如果像炮仗一样一点就着，甚至像吃了枪药一样不点就着。别人说一句，你说三句，那你就是情绪价值的索取者和消耗者。能够保持自身情绪稳定，不受环境和对方影响，本身就是一种价值。</p>
<p>给你举个例子，《资治通鉴》里有描绘东晋淝水之战的文字，仗怎么打的记录甚是粗糙，整个过程甚至也有点玄幻。但是里面却特别详细地记录了东晋大佬谢安啥事不干，一个会都没开，到处郊游下棋，最后谢安听说打了胜仗，还轻飘飘地来了一句，“自有小字辈破贼”。</p>
<p>论卖弄和显摆，魏晋士人堪称史上第一高峰，但谢安这个作秀，绝对魏晋第一。</p>
<p>小时候不理解，谢安这种啥事不干的人，怎么成了淝水之战的代表人物？下面正儿八经打仗的谢玄反倒成了跟班。现在才知道，八十万敌军压境，己方就那么几万人，全国上下惶惶不可终日，一个能够保持情绪稳定的当事人是多么可贵，他是在以一人之力向满朝公卿提供情绪价值。</p>
<p>提供情绪价值，再高级一点的就是消解对方负面情绪，俗称“哄人开心”。在对方焦虑、紧张、害怕、愤怒、忧郁时，能够帮助对方走出负面情绪的泥潭，尽量不让对方消耗自身情绪价值。</p>
<p>著名人民艺术家范伟老师演过一部电影，陈数女神在里面饰演他的妻子。两个人有一次吵架，陈数情绪爆炸，吼范伟说，“你倒是说话啊！”范伟异常平静地对陈数说，“实在不好意思，吵架时候，你也美的不可方物，让我不忍打断。”简直太会了，我都要为他鼓掌。</p>
<p>提供情绪价值，最高级的是带动对方情绪。消解对方负面情绪，终归还是会有所损耗，真正的高手是把正面情绪传染给对方，最终生成更多正面情绪，实现正和博弈。</p>
<p>虽然这些年正能量这个词都要被玩坏了，但正能量爆棚的小太阳，确实是恋爱中的一个宝藏。</p>
<p>说回到姐弟恋的话题，在传统模式中，男方是情绪价值的主要提供者，或主动、或被动地要负责哄女孩子开心。姐弟恋模式则相反，女方会成为情绪价值的主要提供者。所以，即便有时女方生理年龄要小于男方，但如果女方更加成熟，情绪更加稳定，其实也可以称之为姐弟恋模式。</p>
<p>在恋爱里，男生本身的情绪需求和消耗就要小于女生，再加上姐弟恋中的女生更为成熟，对情绪价值的消耗与索取也比传统模式中的女生更少。总体来看，这或许也算姐弟恋的一个优点。</p>
<h3 id="第三，价值匹配差异"><a href="#第三，价值匹配差异" class="headerlink" title="第三，价值匹配差异"></a>第三，价值匹配差异</h3><p>相比传统模式，姐弟恋在价值匹配上也有所不同。</p>
<p>对于男方来说，姐姐更加成熟有女人味，经济相对更加独立，处事更加老练，对待感情也更加主动。对于女方来说，弟弟更加纯情，对感情更真挚热烈，激情更充沛，新鲜感更足。</p>
<p>当然，不同的人的价值需求可能不同。可能有的男生不喜欢成熟的，就喜欢萝莉型的妹子；有的女生也不喜欢纯情小男生，就喜欢成熟大叔。所以，这个优点各花入各眼，看个人偏好了。</p>
<p>现在，我们已经分析完了姐弟恋模式的三个主要特点。知道这些特点，有什么用呢？</p>
<p>第一，相信你也发现了，这三点不光是姐弟恋的特点，也是姐弟恋的优点。如果这三个优点有符合你心意的，或者是可以填补你的价值需求的，那么你就可以去尝试一下这种恋爱模式。</p>
<p>第二，也是我们接下来要讲的，正如一切有机遇的事情，就一定也会给你带来不小的挑战，姐弟恋也是如此。特点就像一把双刃剑，在给我们带来优点的同时，也暗中标好了价格。</p>
<h2 id="姐弟恋模式难处不少"><a href="#姐弟恋模式难处不少" class="headerlink" title="姐弟恋模式难处不少"></a>姐弟恋模式难处不少</h2><h3 id="第一，年龄焦虑"><a href="#第一，年龄焦虑" class="headerlink" title="第一，年龄焦虑"></a>第一，年龄焦虑</h3><p>在前面我们提到，姐弟恋的年龄差异相对于传统模式是个优势，但这个优势只是生理上的。在心理上，它却特别有可能给你带来一种副作用——年龄焦虑。</p>
<p>我们都知道，两个人要是想结婚，需要做好物质上的准备、心理上的准备。可是，现在社会压力越来越大，在没有特别强力家庭支持的情况下，这些准备所需要的时间在延长。</p>
<p>体现在统计数据上，就是晚婚比例越来越高，结婚年龄越来越大。</p>
<p>2020 年，中国平均结婚年龄已经达到 27 岁，部分一线城市初婚的平均年龄已经超过 30 岁。按照这个数据考虑，姐弟恋中女方大男方 3 ~ 5 岁的话，男生 30 岁的时候，女方已经 33~35 了。</p>
<p>随之而来的，就会引发出两个心理问题。一个是二十来岁开始谈恋爱的话，两个人很可能要经历一场长达多年的爱情长跑，才能走进确定性更强的婚姻关系。另一个是女方风险成本过高，自己强势期的时候，让线让野保射手，射手发育完六神装出山，搞不好还要嫌弃自己后期不给力。</p>
<p>所以，无论是爱情马拉松对时间的考验，还是风险厌恶对人性的考验，都可能会给一段姐弟恋关系注入更多的焦虑和不安情绪，而这些消极情绪往往会成为两个人关系终结的导火索。</p>
<p>只有两种“良药”能与之对抗，一种是坚定，另一种是勇气。</p>
<h3 id="第二，能力焦虑"><a href="#第二，能力焦虑" class="headerlink" title="第二，能力焦虑"></a>第二，能力焦虑</h3><p>这种能力焦虑的情况，多见于一方还在上学，另一方已经工作。</p>
<p>所有走出学校的人都应该有过这种体会，就是经受过社会毒打后，会发现学生思维有很多幼稚之处。所以，一个学生和一个打工人，势必在很多现实问题上，存在认知的鸿沟。</p>
<p>实际上，在传统模式中，这样的认知差异也存在。</p>
<p>之前有新闻说一个 IT 企业的高管，娶了一个貌美如花又特别年轻的老婆。但是他老婆比较幼稚，居然模仿喜洋洋与灰太狼里面的红太狼，用平底锅重击该高管后脑勺，将其打成植物人……</p>
<p>但是，毕竟在传统观念中，男强女弱实属正常。社会的普遍共识就是，男方就应该比女方成熟一点、办事老道一些、能力强一些，而对于能力不足的女方，周围的人也更加宽容。</p>
<p>姐弟恋恰恰相反，女方凭借大几岁的先发优势，会在亲密关系中成为更强的一方。</p>
<p>这带来的的心理问题在于，男生可能会有挫败感，会因为丧失对两人关系的掌控权和主导权，开始感到焦虑；女方也会焦虑于男方的成长速度，特别是在对比周边成熟大叔的时候。</p>
<p>不过，这种能力焦虑会慢慢缓解。当双方都工作一段时间后，这种能力差就不太显著了。这也侧面说明了，20+ 的人谈姐弟恋和 30+ 的人谈姐弟恋，难度系数不在一个水平线上。</p>
<h3 id="第三，从众焦虑"><a href="#第三，从众焦虑" class="headerlink" title="第三，从众焦虑"></a>第三，从众焦虑</h3><p>虽然我们说，姐弟恋越来越多，但那是纵向比，横向比还是少。至少在观念上，我们很多人还是认为传统模式是多数，姐弟恋是少数。所以，这也导致了最大的焦虑——和多数人的不一样。</p>
<p>因为，和别人不一样这件事，本身就会带来焦虑。</p>
<p>人是社会化的人，从众心理是千百年来进化出的本能，是文化、教育甚至 DNA 共同塑造的。有个著名的心理学实验，安排了一群托面对电梯门站。不知情的测试者进入电梯，也会面对电梯门站立；一群托全部背对电梯门站，测试者进入，也会下意识背对电梯门站立，这就是群体压力。</p>
<p>这种从众焦虑的最大危害倒是不至于让你主动选择放弃姐弟恋以随大流，一般现代社会的人还是有这点抵抗力的。它最大的危害在于，每当你们发生矛盾和摩擦的时候，你们都可能会不自觉地归因，会认为矛盾发生是因为你们是和别人不一样的姐弟恋，而忽略了矛盾本身。</p>
<p>聚集成群的人，他们的感情和思想全都采取同一个方向，他们自觉的个性消失了。</p>
<p>——《乌合之众》</p>
<p>这样错误的归因，常常会导致更加错误的后果，破坏力非常大。</p>
<p>你也能看出来，姐弟恋的三点难处全部都有关于焦虑。世人皆认为，姐弟恋最难的是外部的阻力，是经济状况的悬殊、是家人的不同意和不支持、是舆论的指指点点等。</p>
<p>相比于内心的不确定和煎熬，外部阻力反而微不足道，击垮一个人的往往都是内部的矛盾。</p>
<p>但是，有年龄差异就一定会焦虑吗，女强男弱就一定会焦虑吗，和大家不一样就一定会焦虑吗？</p>
<p>不是风动，也不是幡动，是心动。</p>
<p>心生万相，万相皆空。姐弟恋也好，兄妹恋也好，都是虚妄。其实，这一切的背后，不过只有你们两个人而已。人对了，年龄不是问题，人不对，什么恋都是问题。</p>
<h2 id="姐弟恋的注意事项"><a href="#姐弟恋的注意事项" class="headerlink" title="姐弟恋的注意事项"></a>姐弟恋的注意事项</h2><p>说着说着，似乎进入了看破红尘的境界，但最后，还是要说说姐弟恋的注意事项。</p>
<p>第一，正确对待他人意见。</p>
<p>姐弟恋经常遭到很多家人朋友的反对，但你一定要知道，人家反对的究竟是什么。拿上台面说的是嫌弃弟弟年纪小，实质上是不是在担心弟弟的经济能力，还是担心弟弟会始乱终弃。</p>
<p>你要做的就是，针对性地拿出有说服力的现实条件和未来承诺，去解决真正的问题。两个人不能一味地纠结于年龄大小，年龄又不能控制，总不能塞回肚子里重生一回。</p>
<p>第二，正确对待双方关系。</p>
<p>在姐弟恋的关系里，女方要做乘风破浪的姐姐，不要做唠唠叨叨的老妈子，还要学会抓住机会，偶尔地做一下弱不禁风的林妹妹；男方该示弱示弱，该撒娇撒娇，不要有太重的心理包袱，但是该爷们的时候也要爷们，该有担当的时候也不要逃避，要学会多主动去掌控两人的关系。</p>
<p>诚然，姐弟恋要比传统的恋爱模式更让人费心一点，可能需要两个人付出更多的坚持和勇气。但是，这世间的每一件事都如此，走过的荆棘和沼泽越多，美好的风景才会弥足珍贵。</p>
<p>最后，要记住，没有什么不靠谱，你们决定在一起，只是因为你们相爱而已。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>俗话说，女大三，抱金砖。</p>
<p>今天，我们就姐弟恋这个话题进行了探讨。如今，姐弟恋已经成为了一种趋势。但是，姐弟恋不仅仅是指生理年龄上女方大过男方，更是指一种女方相较男方，心理上更为成熟的恋爱模式。</p>
<p>姐弟恋这种模式有三大特点，分别是生理年龄差异、情绪供需差异和价值匹配差异。</p>
<p>其中，我们特别讲解了情绪价值这个概念。情绪价值是人际关系中最为重要的影响因素之一，稳定的情绪控制、消解负面情绪和带动正面情绪是提供情绪价值的三重境界。</p>
<p>但是，这三种差异除了给这种模式带来一定的好处之外，同时也埋下了隐患，带来了难处。</p>
<p>难处就在于年龄焦虑，能力焦虑和从众焦虑，三者都是由于姐弟恋这个概念，所产生的一种心魔，属于自寻烦恼。越是在意姐弟恋这个概念，就越容易因此受伤。</p>
<p>最后，我想说，合适的人，年龄不是问题；不合适的人，什么都是问题。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>202542</title>
    <url>//posts/522e0aa5/</url>
    <content><![CDATA[<p>续昨天，每个人也不知道别人在思考什么，就算把它的大脑剖开来也是弄不清楚的。这说明什么呢，我还没搞清楚，没完全搞清楚，。因为我现在在这里思考呢<br>其次，我想要说明的是，我有一种&lt;瘾&gt;，也是从初中开始的吧，持续了这么久，我还没被它拖垮呢，呵呵，</p>
<p>平静，勇气，智慧。是了，我需要平静去对待那些不能改变的，我需要勇气，去做那些可以改变的;也需要智慧，去区分两者的区别。</p>
<p>我现在最需要的是 平静下来，一切变得混乱了的时期，我越需要平静</p>
<p>忽略 或者看淡嫉妒以及相关的心情 一切是为了你自己 再为别人；首先让自己变好 变正常，你才可以做更过除自身以外的事情，</p>
<p>我缺少一种信念，一种执念，知识按部就班的做着 活着，或许信念被隐藏起来了.</p>
<p>而我现在并不是执念的活着 也不是按部就班的,而是一种懈怠 懒惰 一个沉沦.对 就是这个词可以一定程度上的说明情况，无动于衷。</p>
<p>原谅我这几天的胡言乱语的思考 如丝的混乱，可看出我现在的状况。</p>
<p>原谅我一种 莫名其妙的感觉在心里 身体上 油然而生，导致了我不受控制 难以控制自己，这种情况时常的有，当我一个人想要平静下来的时候 它便跑出来了，阻止我平静 宁静，让我陷进去 ，不断地循环，</p>
<p>我的精神在那个时候被控制了似的，或者是渴求，可以被满足 但是需要控制一个限度 但就是这个限度不好控制，多次的超出限制，不宜把控，我应该尽量的 逐渐的 把他忘记 废弃，正确的休息应该是睡觉。</p>
<hr>
<p>不要被某些东西困扰，虽然缺失被纠缠了很久，但是困扰着就困扰着吧，也就那一会儿，只能保持平静，转移注意力，一会儿就过去了，设置一个断点，或者保存一个栈，</p>
<p>我失去了对自己的大部分控制，尤其在疲劳的时候，但是我已经长期保持在一种疲劳状态了，</p>
<blockquote>
<p>[!NOTE]</p>
<p>几种办法去控制自己：喝酒 抽烟- 吃辣条或者说辣椒-糖果=不间断的基本-</p>
</blockquote>
<p>我不清楚有时候什么是对什么是错的，因为受到一些事情的影响所导致的；我不能作出选择，不是作出正确的选择而是不能，因为一些东西的影响；</p>
<p>那是一种什么样的感觉呢？</p>
<p>靠着其它东西维持着 ，一切都是身体化学的作用，原本身体的一些化学成分是维持在一定标准而平衡的，但是因为掌控者 即本人的收到的各种诱惑 而打破了这种平衡 各种平衡，从而导致一切混乱，人就是收到了化学的控制，我也不了解化学，但是确实受到了它的控制，每时每刻的</p>
<p>真正的人生不只是学习对吧，但是我们必须学习 不断地，人生 生活应该怎么过呢，谁知道呢，；</p>
<p>苦难，谁也不想经历苦难，不是经历苦难才会成长，能够避开苦难就赶紧避开吧；</p>
<p>有些苦难是决定不了的，天生的，但是谁也不想经历苦难，哪有人自找苦吃的，那是笨蛋，</p>
<p>而我简直是个傻逼，我也没找苦吃，</p>
<hr>
<p>人的极限在哪里，我也不清楚，人一直在挑战极限，吃的，睡觉，熬夜。。。等等 有一个叫做吉尼斯世界记录的东西，总之各种情况，稀奇古怪的东西记录都有，，</p>
<p>多种物质，如我上面所列出的，等都可以引起多巴胺、内咖啡的变化，现在就是使用多种物质去影响它们的变化，让其可以达到一种平衡吗，</p>
<p>就像很多毒瘾患者一样，用一种物质来控制着身体的化学物质。或许我也应该找一种东西来代替多种东西，首先他可以让我上瘾，并且加量，同时要便宜，对身体副作用小，有吗，说不定真被我找到了，不知道能不能上瘾。很奇怪的是我之前怎么没想到这个东西呢？是因为—我没有考虑这个事情吗，有什么让我一带而过了</p>
<p>只有让自己处在平静的状态下，才去作出选择，就像犯毒瘾的人吸毒后的平静</p>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
  <entry>
    <title>13 千古难题真难办：如何跨越家庭背景的差异？</title>
    <url>//posts/5fc16f55/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="13-千古难题真难办：如何跨越家庭背景的差异？"><a href="#13-千古难题真难办：如何跨越家庭背景的差异？" class="headerlink" title="13 千古难题真难办：如何跨越家庭背景的差异？"></a>13 千古难题真难办：如何跨越家庭背景的差异？</h1><p>有一种说法，叫恋爱是两个人的事，婚姻是两个家庭的事。从谈恋爱修成正果到走入婚姻殿堂，需要跨越的阻碍有很多，但其中挑战最大、最困难的，莫过于跨越家庭背景的差异。</p>
<p>女生向的电影电视剧最爱拍的模式，就是霸道总裁爱上平民女孩，这模式在几百年前就有了——《格林童话》里面的灰姑娘嘛；男生向的电影电视剧最爱拍的模式，就是富家千金爱上落魄男孩，这模式在几百年前也有了——《聊斋》里面的狐妖勾引赶考书生嘛。</p>
<p>为什么童话和小说都喜欢编这种跨越家庭背景的爱情呢？的确是因为，这些在现实生活中也不多见，缺啥编啥，大家伙都爱看。由此可见，家庭背景的差异确实是一道千古难题。</p>
<p>近年来，关于凤凰男、扶弟魔之类的话题也总是霸占各大网站婚恋话题榜首，出一个爆一个，也从另一个侧面说明了，家庭背景差异这个话题确实给很多人造成了困扰，能够引发大家共鸣。</p>
<p>所以，关于家庭背景差异的话题，今天我们也来进行一个探讨。</p>
<h2 id="有哪些家庭背景差异？"><a href="#有哪些家庭背景差异？" class="headerlink" title="有哪些家庭背景差异？"></a>有哪些家庭背景差异？</h2><p>在这个话题下，很多人经常会产生激烈的观点碰撞。但是，在我的经验中，其实为数不少的争论，都是因为对家庭背景的定义错位而出现的。所以，我们先对家庭背景差异做个说明。</p>
<p>纵观所有的家庭背景差异，都可以归结为以下三类。</p>
<h3 id="1-经济条件的差异"><a href="#1-经济条件的差异" class="headerlink" title="1. 经济条件的差异"></a>1. 经济条件的差异</h3><p>在众多的差异中，经济条件的差异是最直接的家庭背景差异。</p>
<p>当然，经济条件不仅仅指家庭存款，而是泛指双方调动资源的能力。比如说，政府官员、国企高管在家庭资产数量上，可能比不上私营企业老板。但只要私营企业没有大到一方首富的级别，一般在家庭背景上也没有什么差距，甚至官员家庭还高于同级别的企业家庭。</p>
<p>所以，我们说，经济条件的差异程度要足够大，才算得上是家庭背景的差异。</p>
<p>否则你好比，双方家庭都是高资产净值家庭，诸如一线城市拆迁户、内陆地区煤老板、沿海做实业和金融新贵。虽然他们内部也存在鄙视链，但不在我们今天的讨论范围之内。</p>
<p>同样，如果父母都是工薪阶层，一个在上海两套房，一个在上海三套房，资产可能差了几百万，但如果有人非要问怎么跨越这个家庭背景差异，是不是就有点矫情了。</p>
<h3 id="2-思维观念的差异"><a href="#2-思维观念的差异" class="headerlink" title="2. 思维观念的差异"></a>2. 思维观念的差异</h3><p>由经济条件差异衍生的，最直接的就是消费观的差异。不同家庭对钱的态度是迥然不同的。</p>
<p>当初，我上学的时候，老师请我们去酒店吃自助。工科男生的吃法，你应该也能想象，对着各种海鲜，就是一顿胡吃海塞。但是，唯有一个哥们就简单吃了点菜，吃了盘意面就停筷了。</p>
<p>这我当时完全不能理解，二百多块钱的自助，你居然还吃意面，简直脑子不好使。后来我才明白，对有些人来说，酒店自助太普通了，犯不着为了吃回本撑坏自己。</p>
<p>所谓的消费观，就是对花一笔钱到底值不值的判断。</p>
<p>同样花两百块吃顿饭，富裕家庭可能觉得开心就好，困难家庭可能就觉得不可理解，就产生了差异。差不多经济条件的家庭也可能在消费观上产生巨大差异，有的人愿意花钱买别墅，但不愿意花钱买服务请人打扫；有的人愿意买很多名包、名表，但觉得吃东西简单一点就好。</p>
<p>所以，对于思维观念上的差异，我们要以能否兼容为标准。因为很多情况下，思维观念不是一下子就能改变的，差异的确很难消除，但是如果双方可以各退一步，尝试兼容，会少很多矛盾。</p>
<p>除了消费观之外，还包括方方面面。比如谈恋爱，有的家庭觉得中学生谈恋爱简直天理难容，你要敢越雷池一步，腿都给你打折；有的家庭觉得只要不影响学习就好，甚至以此还会揶揄自家孩子，“我孩子长这么帅，为什么都没人给你写情书呢？”</p>
<h3 id="3-生活习惯的差异"><a href="#3-生活习惯的差异" class="headerlink" title="3. 生活习惯的差异"></a>3. 生活习惯的差异</h3><p>最后，还有生活习惯的差异，这个差异很少人提，但又不得不提。</p>
<p>毕竟，很多事上升不到思维观念这个程度，但隔阂又确实存在。比如说，南方女婿请北方丈母娘吃饭的著名故事，南方习惯是先喝汤再吃饭，而北方习惯先吃饭再喝汤。这个差异就导致了丈母娘对头道菜端个汤出来很不满，“咋地，这是要先给我灌个水饱啊？”</p>
<p>每个人特有的生活习惯之多、之顽固，不结婚的人是很难体验出来的。这些习惯是家庭从小到大一点一滴灌入进你生活的，从牙膏到底能不能从中间挤到炒菜到底要不要放辣椒，这些事情没法拿上台面争论个一二，却又无处不在。就像牙疼要不了命，但难受起来真要命。</p>
<h2 id="家庭背景差异重要吗？"><a href="#家庭背景差异重要吗？" class="headerlink" title="家庭背景差异重要吗？"></a>家庭背景差异重要吗？</h2><p>也许你会问了，家庭差异真的有那么重要吗？谈恋爱、结婚真的要考虑家庭背景吗？</p>
<p>我知道，很多人都想听到否定的答案，想听到类似真爱至上的词语。可惜我不能这样，因为我认为，家庭背景是重要的，但又不是你想的那个重要法。</p>
<h3 id="1-家庭背景是天然的筛选器"><a href="#1-家庭背景是天然的筛选器" class="headerlink" title="1. 家庭背景是天然的筛选器"></a>1. 家庭背景是天然的筛选器</h3><p>当今社会，即便再现实的人，也很难理直气壮地宣扬，家庭经济条件有差异的情侣不能结婚。</p>
<p>事实上，穷小子娶富家女或是富二代娶平民姑娘的事情简直不要太多。甚至，有不少家庭资产过亿的人家紧紧地盯着科研单位的新入职博士，只要女儿喜欢，家里再穷的也愿意嫁。</p>
<p>所以，支持家境悬殊的人不能谈恋爱的，多半论证思路是：家境悬殊非常容易造成三观不合，三观不合就会在大量问题上产生矛盾，从小到大养成的价值观很难改变，最终导致两个人分手。</p>
<p>从概率上讲，这个观点是有一定道理的。</p>
<p>三观问题是很难通过一两次短暂接触就观察清楚的，家庭教育确实对三观形成存在重大影响。所以，以家庭背景作为筛选器，确实不失为一个快速又相对精确识别潜在恋爱对象的好方法。</p>
<p>比如说，如果你自我边界意识很强，对个人小家和原生家庭的界限非常介意。那么，在时间有限的情况下，你就要谨慎选择所谓的“凤凰男 / 女”，两个人的很多想法会存在很大的不同。</p>
<p>你很难感同身受地体会到举家之力供养出来的大学生，Ta 们身上背负着多大的责任感，甚至是负罪感。他们也很难不委屈自己，宁肯自己吃糠咽菜，也要为原生家庭输血。</p>
<p>但是，这个方法又没很多人说得那么重要。在我们没有明确目标的时候，挑选恋爱对象肯定会有个条条框框的，不然一个个试太盲目。这个时候，家庭背景就是一个很好的框子。</p>
<p>可是，假设你已经有了一个恋爱对象，谈了一段时间准备进入婚姻了。</p>
<p>这个时候，你还要靠拍脑袋想出来的框子去框人，未免对自己的眼光也太不自信了。在过去的那段时间里，恋爱是都白谈了吗？从统计学上讲，条件概率是不知道样本全貌情况下的权宜之计，你都知道袋子里一共六红四白十个球了，还要啥贝叶斯呀。</p>
<h3 id="2-家庭背景是重要的价值构成"><a href="#2-家庭背景是重要的价值构成" class="headerlink" title="2. 家庭背景是重要的价值构成"></a>2. 家庭背景是重要的价值构成</h3><p>很多家庭表示，婚姻要追求门当户对，这无可厚非。但是，倘若把家庭背景作为唯一的条件来衡量，那是犯了一元论的毛病。除非家里有王位要继承，个人能力相对于王位无足轻重，所以只看门户不论其他。除此之外，我实在想不到非要只追求门当户对的意义。</p>
<p>但是，这并不代表家庭背景不重要，相反，家庭背景是婚恋中价值匹配中的重要一极。</p>
<p>在去年热播的《大江大河》里，主人公宋运辉就是出身农村的贫家子弟，他娶的程开颜是所在单位副厂长的女儿。论家庭背景，宋运辉差了一大截，但颜值高、学历高、能力高，个人综合素质和发展前景是碾压程开颜的。两个人为什么最终可以走到一起？</p>
<p>你说，程开颜的家庭背景是不是起到了很大作用？可以说是支撑双方价值匹配的重要因素。</p>
<p>如果两个人的个人条件大致差不多，家庭背景更为优越显然是一个极大的加分项。又或者一方家庭条件比较富足，特别是女方更多见，会愿意选一个家庭条件一般但个人综合能力非常强的。</p>
<p>两个人前期靠女方家庭积累，生活不愁；后期靠男方成长，独自 carry。这种事在体制内尤为多见，电视剧看得多，你也能发现，天朝自古以来就有榜下捉婿的传统。</p>
<p>当然，我们也多次说过，不同的人有不同的价值需求，甚至相同的人在不同时期，也会有不同的价值需求。比如，女生在交往过个人条件优越但家庭条件一般的男生之后，因为受不了迁就对方的生活标准而分手，可能就会把家庭背景作为下一任的重要考量。</p>
<h3 id="3-物质条件终究是一道坎"><a href="#3-物质条件终究是一道坎" class="headerlink" title="3. 物质条件终究是一道坎"></a>3. 物质条件终究是一道坎</h3><p>很抱歉，犹豫再三，还是写下了这句政治不太正确的话。</p>
<p>作为一个讲恋爱课的，我个人当然觉得爱情是神圣又伟大的。但如果对历史有所了解的话，你会发现，爱情并不是自古以来就如此伟大的。古代的婚配就是讲门当户对，讲血统阶级的。爱情被提高到神圣伟大的位置，那是文艺复兴期间作为人性光辉，用来对抗神性的。</p>
<p>无数艺术家歌颂爱情，只是迫于宗教势力强大，不好在明面上挖墙脚，所以打着爱情伟大神圣的幌子，行解放人性之实。而到了现代，歌颂爱情的主力也变成了消费主义的洗脑包。毕竟，“爱她，就给她买 xxx”的广告语都出来了，还能不疯狂宣传爱这个大前提吗？</p>
<p>所以，在这一讲，我也不得不如此“残忍”地跟你说，爱情固然神圣，但实际上没有我们想象得那么神圣，物质条件终究是一道坎，不考虑它是自欺欺人的。虽然我也很想讲，物质条件会导致三观差异 balabala，但很多时候，横亘在两个人面前的，就是物资条件本身。</p>
<p>如果你为了爱情，能够对抗物质的诱惑，甘于为了爱人降低生活标准，那么你非常棒；</p>
<p>但是，如果你迫于物质压力，选择了一个你相对没那么爱的人，我想说的是，你也没有任何错，不要自责，这是大环境决定和影响的。而且，爱情还是可以经营和培养的。</p>
<p>所以，综上所述，家庭背景差异很重要，但并不是最重要的。即使我说它不是最重要的，你也认为它不是最重要的，可是，你可能还是会受到家庭背景差异的影响，甚至是打压。</p>
<p>那么，怎么办呢？有没有什么方法可以尽可能地让我们跨越这个差异，坚持一下真爱至上呢？</p>
<h2 id="如何跨越家庭背景差异？"><a href="#如何跨越家庭背景差异？" class="headerlink" title="如何跨越家庭背景差异？"></a>如何跨越家庭背景差异？</h2><h3 id="1-如何搞定父母"><a href="#1-如何搞定父母" class="headerlink" title="1. 如何搞定父母"></a>1. 如何搞定父母</h3><p>绝大多数人第一次意识到家庭背景所带来的鸿沟，就是在双方父母那里。</p>
<p>当然，我们说了，也不排除有开明的父母，认为只要小孩喜欢，人品没问题就全部 ok；但也有不少父母，害怕阶层跌落，坚决反对自家孩子“下嫁”的。改变对方父母的态度无非是三招：</p>
<p>第一招，就是拖，不要正面刚，要和对象继续谈。</p>
<p>一般来说，没有什么原则问题，父母强烈反对个一年半载，看到小孩还在继续坚持谈，态度怎么的也会软化一点，但是要提醒一句，在这个过程中，千万不要因此事发生正面冲突。有的人自尊心特强，看对方父母夹枪带棒的，就忍不住要怼回去，甚至还要发对象脾气。</p>
<p>这种行为无异于卖队友。要知道，夹在你和对方父母之间最为难受的人，就是你的对象。你怼人家父母的每一句话，都会十倍压力地反馈在你对象身上。所以，我们要学会控制情绪。</p>
<p>第二招，就是补，抓紧自我提升。</p>
<p>很多时候，对方家长也不是在意你的奋斗结果，毕竟这年头想在北上广买套房，光靠个人奋斗也挺难的。但是人家会在意你的奋斗态度，无论你是学历提升还是职务提升，要给人一个希望。</p>
<p>曾经就有一个妹子问我，她是单亲家庭，男朋友是自己的研究生同学，但男朋友是一线城市土著，有多套房产。男朋友妈妈不同意两个人在一起，可是男朋友却一直坚持，最后闹到了男朋友妈妈断了男朋友生活费的地步，要做房产公证，坚决要求两人分手。</p>
<p>你猜这事怎么着？他们两个人先是拖了一年，最终的解决契机还是人家妹子拿到了美国医学院的博士 offer。妹子出国前，男方妈妈一反之前的态度，居然反过来催着两人领证。</p>
<p>所以说，你得证明自己是有实力的，而不是一味地闹，实力是表达诚意的最好证明。</p>
<p>第三招，就是抬，要善于抬人一手。</p>
<p>如果在对方父母和你发生摩擦冲突的时候，出现一个解决契机，我们就别死要面子不肯低头了。这个时候，千万不要中二附体，搞什么昨天你对我爱答不理，明天我让你高攀不起了。</p>
<p>得饶人处且饶人，抬人一手，主动服软。聪明人都知道，善于给人面子的一定有里子。</p>
<p>但是这三招的前提就是，你对象坚定地跟你站在一起。如果你对象面对家里的压力，开口是我妈说了，闭口是昨天有人给我介绍对象，那你还是赶紧主动走人吧，不要影响人家继承王位。</p>
<p>如果你是“那个对象”，你的对象是被你家人质疑的那个，你也可以通过以上三招，去帮助你的另一半。在这个过程中，也有助于让你更了解 Ta 是怎样的一个人，是不是值得。</p>
<h3 id="2-如何搞定对象"><a href="#2-如何搞定对象" class="headerlink" title="2. 如何搞定对象"></a>2. 如何搞定对象</h3><p>如果对象都搞不定，也就不存在这个问题了。但这又是非常重要的一点，其实就只有一句话，如果你是家庭条件相对较好的那一方，真的喜欢，就要更加坚定，在当下还要多迁就和体谅一点；</p>
<p>如果你是家庭条件相对较差的一方，一定要对人家好一点，不要把对方的迁就视作理所当然。</p>
<h3 id="3-如何搞定自己"><a href="#3-如何搞定自己" class="headerlink" title="3. 如何搞定自己"></a>3. 如何搞定自己</h3><p>相比于搞定外人，跨越家庭背景最大的难题，其实还是自己本身。如果你是条件好的那一方，一切都还好说；如果你是条件相对不好的那一方，你的确要面对很多困难与阻碍。</p>
<p>如何接受对方和自己从小养成的迥然不同的消费观念？如何承认对方为了自己被迫忍受消费降级的事实？如何包容对方无意中流露出来的优越感？如何克服出身给自己带来的自卑感？</p>
<p>外邪易辟，心魔难除。</p>
<p>伟光正如电视剧版《大江大河》里的宋运辉，面对家境优越的程开颜，他也有失态的时候。哪怕当上东海常务副厂长的他，还是会吼，你以为我有今天是靠你们程家的关系吗？</p>
<p>所以，根本还是在于自我修炼，内在世界越充盈，对外在世界的芥蒂才会越小。</p>
<p>为什么科研单位的博士群体容易成为榜下捉婿的首选目标？对于拓宽人类知识边界，攻克全人类知识盲区的科研人员来说，太容易产生内在满足感了，不会轻易因为家庭背景差异产生心魔。</p>
<p>见天地、见众生，见自己，如是而已。</p>
<h2 id="爱情锦囊"><a href="#爱情锦囊" class="headerlink" title="爱情锦囊"></a>爱情锦囊</h2><p>今天，我们对婚恋中家庭背景这一因素进行了探讨，这是结婚要面对的一个难题，也是一个非常现实的问题。</p>
<p>首先，我们对家庭背景差异进行了定义，分别存在经济条件差异、思维观念差异和生活习惯差异。在程度上，我们也以兼容与否为标准，排除了一些虽然存在但没那么厉害的家庭背景差异。</p>
<p>其次，我们就到底要不要考虑家庭背景差异这个问题进行了讨论。虽然说，家庭背景差异是筛选婚恋对象的一个有力条件，但这个条件不应该成为成熟恋爱关系中的阻碍。家庭背景是婚恋价值匹配中的重要一极，但也不是唯一一极，我们不能不考虑，但更要综合考虑。</p>
<p>其中，我们还特别提到，把物质条件作为爱情中价值需求的最大因素来考虑，并没有错。按《天龙八部》里的话来说，就是有情皆孽，众生皆苦。</p>
<p>最后，关于怎样跨越家庭背景差异达成婚姻关系，我给你提供了三个方向，分别是搞定父母、搞定对象、搞定自己。搞定父母有三招，能拖要补还会抬；搞定对象，就是要学会换位思考。</p>
<p>最关键的也是最难的，就是搞定自己，你才是你自己最大的拯救者。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>202544</title>
    <url>//posts/bb4daf90/</url>
    <content><![CDATA[<hr>
<p>死亡是一件容易的事情，只要是活着都不容易，不管是混着活，还是精彩的活，或许相比来说，混着活更艰难。</p>
<p>心灵甘泉—-沙与沫；纪伯伦；</p>
<p>想一件事和做一件事是不一样的，甚至结果总是大相径庭，但是总是会舒适于想象，这样更轻松，对于人脑来说；</p>
<p>但是，人脑想要更聪明需要刺激，需要去做，</p>
<p>人的大脑总是拒绝平静或宁静，感觉那样太孤独还是无聊，要细细的去体会去倾听自己那一刻的心跳；</p>
<p>我不知道是否当我宁静尝试的时候 是否心跳真的加速还是一种身体的反应，就像吸毒的犯毒瘾时，出虚汗，痛苦，心跳加速等效果似的，，</p>
<p>是不是可以想象，如果你真的专心一件事或者某件事，总是可以取得相应的成就的；现实中的天才还是蛮少的，真正的都是有了很多的积累，等到机会来了的时候才可以承受住那破天的财富，而不是被砸死。</p>
<p>为什么我还不睡呢？是因为我真的是为了抓住那仅剩的一些时间吗；都头脑那么困了，不断地寻找着能使自己兴奋的事情，然后一遍一遍的重复无聊，直到不困了，然后第二天身体状况变差，</p>
<p>有时候就是很颓废，有时候则不断寻找不断寻找，不断地不断地，有着那么期待的事情；</p>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
  <entry>
    <title>202543</title>
    <url>//posts/25293a33/</url>
    <content><![CDATA[<hr>
<p>什么是傀儡，为什么会有人自残呢，</p>
<p>很多事情需要支付两次，；</p>
<hr>
<p>瞎写的，说实话，我的心情受到了天气的影响，阴天真的很糟糕，如果在屋里是不是也是类似于阴天的环境呢？</p>
<p>人天生是懒惰的，尤其是在长期懒惰之后，</p>
<p>一锅糊了的粥，是怎么样的？锅会坏，粥要倒掉，</p>
<p>人的一天就像CPU,电脑放在那里一天不开机，CPU没有动 就是浪费了这个资源，人脑也是差不多的，只不过人脑不能像CPU一样不断地持续运行，因为CPU运行靠的是电力，人脑运行靠的是化学成分，复杂的化学变化。</p>
<p>我做事情有点太按部就班了，或者可以说是太死板了，这是为什么呢，一下子说不明白，总之是各种情况造成的，；就比如读一本书还笨笨的从头读到尾，为什么不挑自己喜欢或者有帮助的地方看呢，什么时候变成这样的？</p>
<p>学习一个东西的能力也不行，简称：学习能力，不够灵活，学习能力绝对是要足够灵活的，不能太死板太固执，这样你并不能学会它，同时，要理解学习东西的本质，其构成的基础，一切的基础明白了，会好学很多。</p>
<p>玩乐享受总是毫不犹豫，学习工作，就会一拖再拖。</p>
<p>固步自封这个词，人是会被自己所封印的，因为当你把自己锁在一个地方的时候</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><code class="hljs markdown">我们的脑与其他内脏器官相同，需要丰富的血液供应才能维持高效运转。<span class="hljs-strong">**经常参加体育运动，抑或多读书、多计算、多动手**</span>，通过这种方式使脑不断接受各种刺激，不停进行思考，才能更聪明，更敏捷。脑的神经细胞也有“用进废退”的特点，越是不停思考，脑就会越聪明，相反，越是偷懒不善思考，脑也就愈加愚钝，因此经常使脑活跃起来才能使头脑变得更加聪明。那么如何锻炼脑呢？以最简单的对话为例，在交谈的过程中，我们不仅要先听见对方的声音，还要通过分析听懂对方说话的意思，然后通过思考再把自己的意思表达给对方……这一系列动作都需要脑接收指令，快速思考再发出指令，在这个过程中脑便得到了一次简单的锻炼。虽然可能看似极其简单，但交流和沟通却是一种十分重要的预防老年痴呆症的措施。目前备受关注的“最强头脑训练操”就是通过一些简单而有趣的计算题、记忆题等，在潜移默化中锻炼计算力和记忆力使脑活跃起来，从而使头脑变得更聪明。希望能够通过这种方式，在日益人口高龄化的社会现实下或多或少地预防和减少老年痴呆症的发生。<br></code></pre></td></tr></tbody></table></figure>
<p>在舒服的时候 想做舒服的事情，在艰难的时候，想做舒服的事情</p>
<p>一天结束了。。</p>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
  <entry>
    <title>202545</title>
    <url>//posts/cc4a9f06/</url>
    <content><![CDATA[<hr>
<hr>
<hr>
<p>人总是喜欢幻想的吗，</p>
<p>你遇到的状况并没有那么糟糕，而是你自己把你的状态变得更糟糕了，你不知道如何去处理这种状况，所以变得糟糕了；你需要缓和的药 物质 去缓解，因为它病不至死，</p>
<p>尝试压制自己的心跳，只是从感觉上来讲的，但是要记得这种感觉，等适应之后，那就会是一种享受的感觉，</p>
<p>很多事情是一个习以为常你的，只不过你太大惊小怪了。</p>
<p>人真的需要时时刻刻的修养自己的身心；</p>
<p>我还有一些事情没搞明白，但是我不知道什么没有搞明白；生命最重要 其次是身体，身体正常是要遵循一定的规律 </p>
<p>上帝或许是万能的，但是上帝已死，我还活着，</p>
<blockquote>
<p>[!TIP]</p>
<p><strong>如何更好地学习</strong></p>
<ol>
<li><p>学习资料多样化</p>
<blockquote>
<p>看视频、翻书、记笔记，等用不同方式去接触知识</p>
</blockquote>
</li>
<li><p>善于联想很重要</p>
<blockquote>
<p>把新学的东西和已懂的概念联系起来</p>
</blockquote>
</li>
<li><p>不要死记硬背</p>
<blockquote>
<p>要琢磨：为什么会这样</p>
</blockquote>
</li>
<li><p>身体是革命的本钱</p>
<blockquote>
<p>睡好-吃好-运动</p>
</blockquote>
</li>
<li><p>学习讲究节奏</p>
<blockquote>
<p>大脑需要休息</p>
</blockquote>
</li>
<li><p>复杂的东西拆解开</p>
<blockquote>
<p>就像吃饭，大口噎到，小口容易消化</p>
</blockquote>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
  <entry>
    <title>202546</title>
    <url>//posts/5543cebc/</url>
    <content><![CDATA[<hr>
<p>z这是怎么了，</p>
<p>敏感多疑 焦虑</p>
<blockquote>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><code class="hljs markdown">Theory is when you know everything but nothing works.<br>理论阶段：你知晓一切原理，但实操无一奏效。<br>理论派：道理全懂，一做就废。<br><br>Practice is when everything works but no one knows why.<br>实践阶段：一切运作如常，但无人知晓其因。<br>实践派：莫名其妙，但能用就行。<br><br>In our lab, theory and practice are combined: nothing works and no one knows why.<br>本实验室现状：理论与实践的完美结合——无一奏效，亦无人明其所以。<br>我们实验室：又废又不懂，主打一个玄学。<br></code></pre></td></tr></tbody></table></figure>
<p>[!WARNING]</p>
<h2 id="健康的身心生活"><a href="#健康的身心生活" class="headerlink" title="健康的身心生活"></a>健康的身心生活</h2><p>早起-晚睡前—冥想-思考<br>         睡前做做放松拉伸运动；<br>    保持充足的睡眠，常常运动，好好吃饭；</p>
<p>尝试戒糖-</p>
<p>bilibili学学唱歌，学学新技能，</p>
</blockquote>
<p>你软弱无力，你废物，你什么也做不了，你不知如何做选择或者说你不能够下定决心。</p>
<p>你可以在一开始的瞬间做出选择，那一刻是比较准确正确的；</p>
<p>你真的想要做一个一事无成，做啥做不行，三分钟热度的人吗？谁也不想吧，应该怎么做呢，有什么好办法吗，似乎我目前还没有，只有忍受；</p>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
  <entry>
    <title>202547</title>
    <url>//posts/2244fe2a/</url>
    <content><![CDATA[<hr>
<hr>
<hr>
<p>有时候常常控制不住自己，忘记自己要干啥了；</p>
<p>每个人因为一些不一样，当然每个人肯定是不一样的，不知道为何会因为这个导致面对相同的情况时，所出现的情况还是不一样的；</p>
<p>你的隐蔽的缺点 陋习 会潜移默化的影响你，从而在平时渐渐的表现出来；</p>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
  <entry>
    <title>202541</title>
    <url>//posts/83dcefb7/</url>
    <content><![CDATA[<hr>
<hr>
<p>状态一直时好时坏的，从什么时候开始这样的呢，大概是从初中后阶段的时候；</p>
<p>从今天开始，这个日期不要改，开始写一些自己思考的东西吧，记录一些自己的东西 想法之类的东西吧；</p>
<p>这需要我不断的思考，这样我才能从现在的漩涡中出来，一个坚持下来的事情，我需要从今天开始，并且长期检查下来。</p>
<p>如果我的此分类下的记录 可以一直持续下去，可以一定程度上说明我的状态在逐渐变好，现在的脑袋已经生锈了似的，没有什么想法，懒惰已经侵占了我的身体；而我的精神早已经不再，我已经没有了自己的选择，我不知道该如何去作出自己的选择了：因为自己的不够坚定的信念，以及生活中的琐事；这也让我感觉到了非自己作出选择的后果；我需要把自己的决定权夺回来。</p>
<p>现在的思想 混沌 幼稚 糟糕，现在的状态也是失眠 忧郁 犹豫 颓废。</p>
<p>说实话我现在的想法就是大学顺利毕业 在没有别的想法  或许再让我可以平静的舒服的睡一觉，</p>
<hr>
<p>过了大概一个小时 就是静静的呆着，感觉有一点焦虑的感觉，</p>
<p>希望我可以从今天开始 换一个样子生活，可以常常做一些总结，总是可以改善自己，日总结-周总结-月总结-年总结，这样的方式可以让自己得到反思，知道自己懈怠了什么。</p>
<p>今天写的东西真的是乱七八糟的，让我感觉到这真的是一个思想混乱的时期，</p>
<p>也不能说是投胎重开，但也算是一种重开了，丢失了很多的东西。</p>
<p>就是不断地在颓废与迷茫之间徘徊，像是入了迷宫 就是走不出去了；身体状况也在这个时候变弱了，就好比返老还童似的，只不过是成长了一段时间之后反而要逆成长回去，是害怕成长吗，还是什么阻碍了你呢。</p>
<p>现在的我 喝了迷魂汤 入了迷雾，已经看不清自己了，所以才需要深度剖析自己，人—-更是这样，或者我更应该这样 常常的剖析自己，我在想我回忆种种 是不是都在为之前的自己开脱的借口，现在说什么也没有用了，也就在每每剖析 总结的时候才这样去想一想，不可再常常这样的想着了，因为你的思已经不够了。</p>
<p>让我在每次的总结剖析时 稍微的想一下自己之前的状况就知道自己有多么的糟糕了</p>
<hr>
<p>我的状态那段时间 或者说这段时间 是多糟糕啊，同时我明白了 废物也是有下限的，但是努力没有上限；只有当我把上限提高 我才可以有一个更低的下限，不然连下限都不够格呢；这就是越高摔得越惨吗</p>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
  <entry>
    <title>C保留字</title>
    <url>//posts/78102cb9/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>if</td>
<td>break</td>
</tr>
<tr>
<td>int</td>
<td>case</td>
<td>long</td>
</tr>
<tr>
<td>char</td>
<td>register</td>
<td>continue</td>
</tr>
<tr>
<td>return</td>
<td>default</td>
<td>short</td>
</tr>
<tr>
<td>do</td>
<td>sizeof</td>
<td>double</td>
</tr>
<tr>
<td>static</td>
<td>else</td>
<td>struct</td>
</tr>
<tr>
<td>entry</td>
<td>switch</td>
<td>extern</td>
</tr>
<tr>
<td>typedef</td>
<td>float</td>
<td>union</td>
</tr>
<tr>
<td>for</td>
<td>unsigned</td>
<td>goto</td>
</tr>
<tr>
<td>while</td>
<td>enum</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>signed</td>
<td>volatile</td>
</tr>
</tbody>
</table>
</div>
<h1 id="C保留字表"><a href="#C保留字表" class="headerlink" title="C保留字表"></a>C保留字表</h1>]]></content>
      <categories>
        <category>C_Cplusplus</category>
      </categories>
  </entry>
  <entry>
    <title>AI让我变成了文盲程序员</title>
    <url>//posts/70db6a66/</url>
    <content><![CDATA[<hr>
<hr>
<hr>
<p>原文链接：<a href="https://nmn.gl/blog/ai-illiterate-programmers">AI 让我变成文盲程序员</a></p>
<hr>
<p>我长期使用 AI，靠它帮助编程，已经不能在没有 AI 帮助的情况下解决问题了。</p>
<p>我不再阅读文档。既然 AI 可以立即解释一切，为什么还要费心阅读呢？</p>
<p>我的调试技能日益生疏。我甚至不再阅读报错消息，只是把它们复制并粘贴到 AI，让 AI 解读。</p>
<p>我已经成为了一个人肉剪贴板，仅仅是代码和 AI 之间的中介。</p>
<p>以前，每条报错都会让我学到一些东西。现在呢？AI 提供了解决方案，我却什么也没学到。实时答案带来的多巴胺刺激，取代了真正理解的满足感。</p>
<p>另一个受到影响的地方是深度理解。以前，我花费数小时来理解某个解决方案为何有效，现在，我只是照着 AI 建议实施。如果这些建议不起作用，我会改进提示的上下文，再次询问 AI。这种循环使得我对 AI 的依赖性不断增加。</p>
<p>我的情绪也受到影响。以前，解决新问题是编程乐趣的一部分。现在，如果 AI 不能在五分钟内给出解决方案，我就会感到沮丧。</p>
<p>我该怎么办？我不想采取任何激进的措施，比如完全放弃 AI，这是不现实的。我打算每周实行一天”无 AI 日”。</p>
<p>我的感觉是，AI 不会让我们成为10倍效率的程序员，只会让我们对它的依赖程度增加10倍。</p>
<p>每当我们让 AI 解决我们自己可以解决的问题时，我们就是用短期生产力换取长期理解，我们以牺牲明天的能力为代价来完成今天的效率。</p>
<p>我并不是建议放弃 AI，只是建议大家不要放弃尝试独立解决问题。</p>
<p>我们正在创造 AI 一代程序员，他们可以向 AI 提出正确的问题，但不理解 AI 给出的答案。每次 AI 出现故障，他们就会显得无助。到目前为止，AI 还不足以完全取代程序员，但随着 AI 的进步，这种情况只会变得更糟。</p>
]]></content>
  </entry>
  <entry>
    <title>C运算符优先级</title>
    <url>//posts/5a7450ff/</url>
    <content><![CDATA[<h2 id="C运算符优先级"><a href="#C运算符优先级" class="headerlink" title="C运算符优先级"></a>C运算符优先级</h2><p>下表列出C运算符的优先级和结合性。运算符从上到下以降序列出。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>描述</th>
<th style="text-align:center">结合性</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>++   —</td>
<td>后缀自增与自减</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td></td>
<td>()</td>
<td>函数调用</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>[]</td>
<td>数组下标</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>.</td>
<td>结构体与联合体成员访问</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>-&gt;</td>
<td>结构体与联合体成员通过指针访问</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>{type}{list}</td>
<td>复合字面量(C99)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>2</td>
<td>++   —</td>
<td>前缀自增与自减</td>
<td style="text-align:center">从右到左</td>
</tr>
<tr>
<td></td>
<td>+  -</td>
<td>一元加与减</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>!  ~</td>
<td>逻辑非与逐位非</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>(type)</td>
<td>转型</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>*</td>
<td>间接(解引用)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>&amp;</td>
<td>取址</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>sizeof</td>
<td>取大小</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>_Alignof</td>
<td>对齐要求(C11)</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>3</td>
<td>* / %</td>
<td>乘法-除法-余数</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td>4</td>
<td>+  -</td>
<td>加法-减法</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>5</td>
<td>&lt;&lt; &gt;&gt;</td>
<td>逐位左移 右移</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>6</td>
<td>&lt;  &lt;=</td>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>&gt;  &gt;=</td>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>7</td>
<td>==   !=</td>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>8</td>
<td>&amp;</td>
<td>逐位与</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>9</td>
<td>^</td>
<td>逐位异或</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>10</td>
<td>\</td>
<td></td>
<td style="text-align:center">逐位或</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>12</td>
<td>\</td>
<td>\</td>
<td style="text-align:center"></td>
<td>逻辑或</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>? :</td>
<td>三元条件</td>
<td style="text-align:center">从右到左</td>
</tr>
<tr>
<td>14</td>
<td>=</td>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>+=  -=</td>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>*=  /=  %=</td>
<td></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>&lt;&lt;=   &gt;&gt;=</td>
<td>逐位左移右移</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td>&amp;=  ^=  \</td>
<td>=</td>
<td style="text-align:center">逐位与-异或-赋值</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>,</td>
<td>逗号</td>
<td style="text-align:center">从左到右</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>C_Cplusplus</category>
      </categories>
  </entry>
  <entry>
    <title>AI提示词</title>
    <url>//posts/d35f20b3/</url>
    <content><![CDATA[<hr>
<h2 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h2><h2 id="DeepSeek"><a href="#DeepSeek" class="headerlink" title="DeepSeek"></a>DeepSeek</h2>]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Gmail的两个技巧</title>
    <url>//posts/d68dfe37/</url>
    <content><![CDATA[<hr>
<hr>
<hr>
<p>参考：<a href="https://gmail.googleblog.com/2008/03/2-hidden-ways-to-get-more-from-your.html">Google Gmail Blog: 2 hidden ways to get more from your Gmail address</a></p>
<hr>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>分享两个鲜为人知，但是却相当有用的 Gmail 地址技巧。「鲜为人知」并非是标题党，而是引用Gmail 博客原话：</p>
<blockquote>
<p>I recently discovered some <strong>little-known</strong> ways to use your Gmail address that can give you greater control over your inbox and save you some time and headache.</p>
</blockquote>
<h2 id="2-技巧"><a href="#2-技巧" class="headerlink" title="2 技巧"></a>2 技巧</h2><blockquote>
<p>假设地址是：<code>wang@gmail.com</code></p>
</blockquote>
<h3 id="2-1-使用-加号"><a href="#2-1-使用-加号" class="headerlink" title="2.1  使用+加号"></a>2.1  使用<code>+</code>加号</h3><p>你可以将在用户名后面增加一个加号 <code>+</code>, 并在加号后面增加任意数量的字符，比如 <code>wang+happy@gmail.com</code>, <code>wang+upset@gmail.com</code>, Gmail 都会把这些地址当作成 <code>wang@gmail.com</code>, 发送到你的地址邮箱中。</p>
<h3 id="2-2-使用-点号"><a href="#2-2-使用-点号" class="headerlink" title="2.2 使用.点号"></a>2.2 使用<code>.</code>点号</h3><p>你也可以在地址的任意地方插入任意数量的点号: <code>.</code>, 比如 <code>w.a.n..g.@gmail.com</code>, <code>w...an..g@gmail.com</code>, Gmail 都会把点号忽略掉，解析成 <code>wang@gmail.com</code></p>
<h2 id="3-发挥想象"><a href="#3-发挥想象" class="headerlink" title="3 发挥想象"></a>3 发挥想象</h2><blockquote>
<p>更多使用途径，就需要经过各位的想象了，列举以下几种</p>
</blockquote>
<h3 id="3-1-重复注册用户"><a href="#3-1-重复注册用户" class="headerlink" title="3.1 重复注册用户"></a>3.1 重复注册用户</h3><p>这个主要是针对能使用邮箱注册的网站，可能大多数是国外网站。</p>
<p>如果网站的邮箱地址校验正则写得不好，允许加号和点号，不知道Gmail的这两个规则，那么 <code>wang+user1@gmail.com</code>, <code>wang+user2@gmail.com</code>, <code>wa..ng@gmail.com</code> 就会被认为是三个不同的邮箱地址，就可以重复注册。</p>
<p>在薅羊毛等需要重复注册用户的场景就比较有用了。</p>
<h3 id="3-2-垃圾信息溯源"><a href="#3-2-垃圾信息溯源" class="headerlink" title="3.2 垃圾信息溯源"></a>3.2 垃圾信息溯源</h3><p>个人邮箱难免会收到一些奇怪的邮件，例如：猎头的招聘邮件，钓鱼邮件等等。</p>
<p>收到这些邮件的第一反应肯定是把邮件删掉，之后就会思考，究竟是哪里泄漏了个人邮箱。</p>
<p>而通过 Gmail 加号的技巧，我就可以做到垃圾邮件溯源.</p>
<p>首先，在注册每个网站的时候，都给他们加上一个tag, 例如注册Twitter, 那就用 <code>wang+twitter@gmail.com</code>, 如果注册Github, 那就用 <code>wang+github@gmail.com</code>, 依此类推。</p>
<p>只要有垃圾邮件，我就能通过加号的后缀，知道是哪个浓眉大眼的网站把我的信息给泄漏出去了。</p>
]]></content>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode-notes</title>
    <url>//posts/1e1f9da/</url>
    <content><![CDATA[<h1 id="VScode使用的一些记录"><a href="#VScode使用的一些记录" class="headerlink" title="VScode使用的一些记录"></a>VScode使用的一些记录</h1><h4 id="VScode查看SQLite"><a href="#VScode查看SQLite" class="headerlink" title="VScode查看SQLite"></a>VScode查看SQLite</h4><p>在VSCode中查看SQLite内容可以通过以下步骤实现：</p>
<ol>
<li>安装SQLite插件：在VSCode的插件商店中搜索并安装SQLite插件。</li>
<li>打开SQLite文件：在VSCode中打开一个包含SQLite数据库的文件。这可以是一个已有的SQLite数据库文件（.db文件）或者是一个新建的文件。</li>
<li>打开SQLite数据库终端：按下<code>Ctrl + Shift + P</code>（Windows/Linux）或者<code>Cmd + Shift + P</code>（Mac）调出命令面板，然后输入”SQLite: Open Database”并按下回车键。选择要打开的SQLite数据库文件。</li>
<li>执行SQL查询：在打开的SQLite数据库终端上方的文本框中，输入SQL查询语句，例如<code>SELECT * FROM table_name;</code>，然后按下回车键执行查询。</li>
<li>查看查询结果：查询结果将会在SQLite数据库终端下方显示出来。你可以通过上下滚动查看所有的结果。</li>
<li>可选操作：SQLite插件还提供了其他功能，如创建表、导入数据等，你可以在终端中输入相应的SQL语句使用这些功能。</li>
</ol>
<p>总结：<br>以上便是在VSCode中查看SQLite内容的步骤。通过安装SQLite插件并在VSCode中打开SQLite数据库文件，你可以执行SQL查询语句并查看查询结果。</p>
]]></content>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown手册</title>
    <url>//posts/99e4f24/</url>
    <content><![CDATA[<h1 id="MarkDown-to-use-in-Typora"><a href="#MarkDown-to-use-in-Typora" class="headerlink" title="MarkDown to use in Typora"></a>MarkDown to use in Typora</h1><h3 id="1-标题的使用"><a href="#1-标题的使用" class="headerlink" title="1.标题的使用"></a>1.标题的使用</h3><figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">"# "</span>一级标题<br><span class="hljs-string">"## "</span>二级标题<br><span class="hljs-string">"### "</span>三级标题<br><span class="hljs-string">"#### "</span>四级标题<br><span class="hljs-string">"##### "</span>五级标题<br><span class="hljs-string">"###### "</span>六级标题<br></code></pre></td></tr></tbody></table></figure>
<h4 id="自动生成目录"><a href="#自动生成目录" class="headerlink" title="自动生成目录"></a>自动生成目录</h4><p>[toc]</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><code class="hljs css">输入<span class="hljs-selector-attr">[toc]</span>然后回车。<br></code></pre></td></tr></tbody></table></figure>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p><code>一个段落就是一行或多行连续的文本。在 Markdown 源代码中,段落由两行或多行空行分隔。在 Typora 中,你只需要一行空行(按下 Return 一次)即可创建新段落。按下 Shift + Return 键即可创建单行改行。大多数其他 Markdown 解析器会忽略单行改行,因此为了让其他 Markdown 解析器识别你的改行,你可以在行末留下两个空格,或者插入 。</code></p>
<h4 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h4><blockquote>
<p>[!NOTE]</p>
<p>111</p>
</blockquote>
<p><code>&gt; [!NOTE]</code></p>
<blockquote>
<p>[!TIP]</p>
<p>222</p>
</blockquote>
<p><code>&gt; [!TIP]</code></p>
<blockquote>
<p>[!IMPORTANT]</p>
<p>333</p>
</blockquote>
<p><code>&gt; [!IMPORTANT]</code></p>
<blockquote>
<p>[!WARNING]</p>
<p>444</p>
</blockquote>
<p><code>&gt; [!WARNING]</code></p>
<blockquote>
<p>[!CAUTION]</p>
<p>555</p>
</blockquote>
<p><code>&gt; [!CAUTION]</code></p>
<h4 id="YAML使用"><a href="#YAML使用" class="headerlink" title="YAML使用"></a>YAML使用</h4><p>Typora 现在支持 <a href="http://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a>。在文章顶部输入 <code>---</code>,然后按 <code>Return</code> 引入元数据块。或者,您可以从 Typora 的顶部菜单插入元数据块。</p>
<h3 id="2-文本样式"><a href="#2-文本样式" class="headerlink" title="2.文本样式"></a>2.文本样式</h3><figure class="highlight erlang"><table><tbody><tr><td class="code"><pre><code class="hljs erlang">斜体：把需要改变的字体添加在两个<span class="hljs-string">"*"</span>之间；<br>粗体：<span class="hljs-string">"**添加文字**"</span><br>粗体加斜体：<span class="hljs-string">"***添加文字***"</span><br>加底色：<span class="hljs-string">"==文字=="</span>；<br>删除：<span class="hljs-string">"~~文字~~"</span>.<br></code></pre></td></tr></tbody></table></figure>
<p><em>斜体</em>          <code>*斜体*</code></p>
<p><strong>粗体</strong>            <code>**粗体**</code></p>
<p><strong><em>粗体加斜体</em></strong>    <code>***粗体加斜体***</code></p>
<p>==加底色==           <code>==加底色==</code></p>
<p><del>删除</del>                <code>~~删除~~</code></p>
<p><u>下划线</u>            <code>&lt;u&gt;下划线&lt;/u&gt;</code></p>
<p>上下标： x^2^+y^2^=z^2^   <code>x^2^+y^2^=z^2^</code></p>
<p>​                H~2~O              <code>H~2~O</code></p>
<!--这是注释-->
<p><code>&lt;!--注释内容--&gt;</code></p>
<p>脚注 ：     一个具有脚注的文本。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注2的解释">[2]</span></a></sup>    <code>一个注脚文本&lt;sup id="fnref:2" class="footnote-ref"&gt;&lt;a href="#fn:2" rel="footnote"&gt;&lt;span class="hint--top hint--rounded" aria-label="脚注2的解释"&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;</code></p>
<p>脚注 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注三的解释">[3]</span></a></sup></p>
<h4 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h4><hr>
<hr>
<figure class="highlight ada"><table><tbody><tr><td class="code"><pre><code class="hljs ada">*** 或者 <span class="hljs-comment">---</span><br>然后点enter将出现一个水平线。<br></code></pre></td></tr></tbody></table></figure>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote>
<blockquote>
<p>这是一个引用</p>
<p>一级引用                                                   </p>
<blockquote>
<p>​    二级引用</p>
<blockquote>
<p>​    三级引用</p>
<blockquote>
<p>​    四级引用</p>
<blockquote>
<p>​    五级引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">一级引用</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt; 二级引用</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 三级引用</span><br>。。。。。。<br></code></pre></td></tr></tbody></table></figure>
</blockquote>
<figure class="highlight x86asm"><table><tbody><tr><td class="code"><pre><code class="hljs x86asm"><span class="hljs-string">"&gt; "</span>这是引用符号；<br>在一行引用的下一行输入<span class="hljs-string">"&gt;"</span>可进入下一级引用；<br>没有进行测试，应该有无数级<br>当不需要引用时，一直按<span class="hljs-keyword">enter</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="markdown链接与图片"><a href="#markdown链接与图片" class="headerlink" title="markdown链接与图片"></a>markdown链接与图片</h4><p><a href="http://example.com">这是链接的名称</a></p>
<p><code>[这里填写链接的名称](这里填写链接的地址)</code></p>
<p>下面是一个皮卡丘图片：</p>
<p><img src="https://upload.wikimedia.org/wikipedia/zh/7/77/Pikachu.png" alt="alt"></p>
<p><code>![图片的替代文本，图片无法显示时，会显示文字](填写图片的链接或者本地位置)</code></p>
<h4 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h4><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  <code>:smile:</code></p>
<p>使用语法 ‘：smile：’ 输入 emoji。</p>
<p>用户可以通过按“ESC”键触发表情符号的自动完成建议，或者在首选项面板上启用它后自动触发它。此外，通过转到菜单栏（macOS）中的’编辑’ -&gt; ‘表情符号和符号’，也可以直接输入UTF-8表情符号字符。</p>
<p><code>&lt;script src="https://gist.github.com/rxaviers/7360908.js"&gt;&lt;/script&gt;</code></p>
<p><a href="https://shw2018.github.io/posts/a927e90e.html#toc-heading-6">Emoji语法表情速查表</a></p>
<p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">Emoji-cheat-sheet</a></p>
<script src="https://gist.github.com/rxaviers/7360908.js"></script>

<h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><code>"* " "- " "+ "都可进入无序列表；</code></p>
<p><code>效果如下</code></p>
<ul>
<li><p>第一条        <code>* 第一条</code></p>
<ul>
<li><p>第二条</p>
</li>
<li><p>二级</p>
<ul>
<li>三级</li>
</ul>
</li>
</ul>
</li>
<li>第三条</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><code>"数字. "进入有序列表</code></p>
<ol>
<li>第一点</li>
<li>第二点</li>
<li>第三点</li>
</ol>
<p><code>按"enter"自动向下递增，多按一次退出</code></p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标题一</th>
<th></th>
<th style="text-align:center">标题二</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td></td>
<td style="text-align:center"></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight gherkin"><table><tbody><tr><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 主标题 </span>|<span class="hljs-string"> 副标题 </span>|<br>然后点击enter键，就会自动创造一个两列的表格；<br>点击创建的表格，将会打开一个工具栏可以设置表格的大小、行数、列数或者删除。<br>当然还有一些其他更细节性的语法使用，但是你并不需要全部了解，掌握上面的知识，也就可以了。<br>|<span class="hljs-string"> 标题一 </span>|<span class="hljs-string"> 标题二 </span>|<span class="hljs-string"> 标题三 </span>|<br>|<span class="hljs-string">：------ </span>|<span class="hljs-string">：--- ：</span>|<span class="hljs-string">-------：</span>|<span class="hljs-string">根据冒号的位置，使标题靠左靠右居中。</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="任务完成框"><a href="#任务完成框" class="headerlink" title="任务完成框"></a>任务完成框</h4><ul>
<li>[x] 任务一</li>
<li>[x] 任务二 </li>
<li>[x] 已完成的任务三</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><code class="hljs html">- [x] 任务一<br>- [x] 任务二<br>- [x] 任务三<br></code></pre></td></tr></tbody></table></figure>
<h4 id="markdown代码片段"><a href="#markdown代码片段" class="headerlink" title="markdown代码片段"></a>markdown代码片段</h4><p><code>sayHello()函数</code>          </p>
<figure class="highlight autohotkey"><table><tbody><tr><td class="code"><pre><code class="hljs autohotkey">`sayHello()`函数<br></code></pre></td></tr></tbody></table></figure>
<p>也可写一整段代码：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>{<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>{<br>		System.out.println(<span class="hljs-string">"Hello"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><code class="hljs csharp">```<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Main</span>{<br>         <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span>{<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">"Hello"</span>);<br>         }<br>    }```<br>    可以在右下角选择语言。<br></code></pre></td></tr></tbody></table></figure>
<h3 id="5-数学公式"><a href="#5-数学公式" class="headerlink" title="5.数学公式"></a>5.数学公式</h3><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p>
<p><a href="https://docs.mathjax.org/en/latest/input/tex/macros/index.html">Supported TeX/LaTeX commands — MathJax 3.2 documentation</a></p>
<p><a href="https://mhchem.github.io/MathJax-mhchem/">mhchem-漂亮的化学公式</a></p>
<p><a href="https://www.overleaf.com/learn/latex/Mathematical_expressions">数学表达式 - Latex</a></p>
<h4 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h4><div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>示例</th>
<th>示例效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>简单等式</td>
<td><script type="math/tex">99+2-1=100</script></td>
<td>99+2-1=100</td>
</tr>
<tr>
<td>方程</td>
<td><script type="math/tex">x^2 + 2x + 5 + \sqrt x = 0</script></td>
<td>$x^2 + 2x + 5 + \sqrt x = 0$</td>
</tr>
<tr>
<td>方程组</td>
<td><script type="math/tex">\begin{cases} x+y+z=10\\ x+2y+3z=20\\ x+4y+5z=30 \end{cases}</script></td>
<td>$\begin{cases} x+y+z=10\ x+2y+3z=20\ x+4y+5z=30 \end{cases}$</td>
</tr>
<tr>
<td>求和</td>
<td><script type="math/tex">\sum_{i=1}^{n}$$$$\sum_{i=1}^nx_i</script></td>
<td>$\sum<em>{i=1}^{n}  \sum</em>{i=1}^nx_i$</td>
</tr>
<tr>
<td>连乘</td>
<td><script type="math/tex">\prod\limits_{i=1}^n</script></td>
<td>$\prod\limits_{i=1}^n$</td>
</tr>
<tr>
<td>分数</td>
<td><script type="math/tex">\frac 1 5</script>，<script type="math/tex">\frac{x+1}{x^2}</script></td>
<td>$\frac 1 5\frac{x+1}{x^2}$</td>
</tr>
<tr>
<td>乘除法</td>
<td>$9 \times 8 = 72$ <script type="math/tex">5 \cdot 6 = 30$ $30 \div 6 = 5</script></td>
<td>$9 \times 8 = 72 5 \cdot 6 = 30 30 \div 6 = 5$</td>
</tr>
<tr>
<td>函数</td>
<td><script type="math/tex">y= \begin{cases} x^2, & x>0,\\ x^2 +x-8, & x \le 0 \end{cases}</script></td>
<td>$y= \begin{cases} x^2, &amp; x&gt;0,\ x^2 +x-8, &amp; x \le 0 \end{cases}$</td>
</tr>
<tr>
<td>矩阵</td>
<td><script type="math/tex">\left( \begin{array}{ccc} 1 & 2 & 3\\ 4 & 5 & 6\\ 7 & 8 & 9\\ \end{array} \right)</script></td>
<td>$\left( \begin{array}{ccc} 1 &amp; 2 &amp; 3\ 4 &amp; 5 &amp; 6\ 7 &amp; 8 &amp; 9\ \end{array} \right)$</td>
</tr>
<tr>
<td>欧拉等式</td>
<td><script type="math/tex">e^{i\pi} + 1 = 0</script></td>
<td>$e^{i\pi} + 1 = 0$</td>
</tr>
<tr>
<td>质能守恒公式</td>
<td><script type="math/tex">E = mc^2</script></td>
<td>$E = mc^2$</td>
</tr>
<tr>
<td>万有引力公式</td>
<td><script type="math/tex">F=G \frac {m_{1}m_{2}}{R^{2}}</script></td>
<td>$F=G \frac {m<em>{1}m</em>{2}}{R^{2}}$</td>
</tr>
<tr>
<td>麦克斯韦方程组</td>
<td><script type="math/tex">\begin{array}{lll} \nabla\times E &=& -\;\frac{\partial{B}}{\partial{t}}    \ \nabla\times H &=& \frac{\partial{D}}{\partial{t}}+J    \ \nabla\cdot D &=& \rho \ \nabla\cdot B &=& 0 \ \end{array}</script></td>
<td>$\begin{array}{lll} \nabla\times E &amp;=&amp; -\;\frac{\partial{B}}{\partial{t}}    \ \nabla\times H &amp;=&amp; \frac{\partial{D}}{\partial{t}}+J    \ \nabla\cdot D &amp;=&amp; \rho \ \nabla\cdot B &amp;=&amp; 0 \ \end{array}$</td>
</tr>
<tr>
<td>薛定谔方程</td>
<td><script type="math/tex">\hbar\frac {\partial \psi} {\partial t} = \frac{-\hbar^2}{2m} \left(\frac{\partial^2} {\partial x^2} + \frac{\partial^2} {\partial y^2}+\frac{\partial^2} {\partial z^2} \right) \psi + V \psi</script></td>
<td>$\hbar\frac {\partial \psi} {\partial t} = \frac{-\hbar^2}{2m} \left(\frac{\partial^2} {\partial x^2} + \frac{\partial^2} {\partial y^2}+\frac{\partial^2} {\partial z^2} \right) \psi + V \psi$</td>
</tr>
</tbody>
</table>
</div>
<h4 id="上下标和一些符号组合"><a href="#上下标和一些符号组合" class="headerlink" title="上下标和一些符号组合"></a>上下标和一些符号组合</h4><div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>示例</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>上标符号</td>
<td><script type="math/tex">x ^ 3</script></td>
<td>$x^3$</td>
</tr>
<tr>
<td>[下标符号]</td>
<td><script type="math/tex">x _ 1</script></td>
<td>$x_1$</td>
</tr>
<tr>
<td>组合符号</td>
<td><script type="math/tex">\lim\limits_{x \to 0}</script></td>
<td>$\lim\limits_{x \to 0}$</td>
</tr>
<tr>
<td>[求导符号]</td>
<td><script type="math/tex">x' x''</script></td>
<td>$x’$,$x’’$</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>LaTeX 加价</th>
<th>渲染为</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a_{n_i}</code></td>
<td>$a_{n_i}$</td>
</tr>
<tr>
<td><code>\int_{i=1}^n</code></td>
<td>$\int_{i=1}^n$</td>
</tr>
<tr>
<td><code>\sum_{i=1}^{\infty}</code></td>
<td>$\sum_{i=1}^{\infty}$</td>
</tr>
<tr>
<td><code>\prod_{i=1}^n</code></td>
<td>$\prod_{i=1}^n$</td>
</tr>
<tr>
<td><code>\cup_{i=1}^n</code></td>
<td>$\cup_{i=1}^n$</td>
</tr>
<tr>
<td><code>\cap_{i=1}^n</code></td>
<td>$cap_{i=1}^n$</td>
</tr>
<tr>
<td><code>\oint_{i=1}^n</code></td>
<td>$\oint_{i=1}^n$</td>
</tr>
<tr>
<td><code>\coprod_{i=1}^n</code></td>
<td>$\coprod_{i=1}^n$</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>符号</th>
<th>示例</th>
<th>示例效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>字体控制</td>
<td>\displaystyle</td>
<td><script type="math/tex">\displaystyle \frac{x+y}{y+z}</script></td>
<td>$\displaystyle \frac{x+y}{y+z}$</td>
</tr>
<tr>
<td>下划线符号</td>
<td>\underline</td>
<td><script type="math/tex">\underline{x+y}</script></td>
<td>$\underline{x+y}$</td>
</tr>
<tr>
<td>上大括号</td>
<td>\overbrace{算式}^{标签}</td>
<td><script type="math/tex">\overbrace{a+b+c+d}^{2.0}</script></td>
<td>$\overbrace{a+b+c+d}^{2.0}$</td>
</tr>
<tr>
<td>下大括号</td>
<td>\overbrace{算式}</td>
<td><script type="math/tex">a+\underbrace{b+c}_{1.0}+d</script></td>
<td>$a+\underbrace{b+c}_{1.0}+d$</td>
</tr>
<tr>
<td>上位符号</td>
<td>\stacrel{上位符号}{基位符号}</td>
<td><script type="math/tex">\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}</script></td>
<td>$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>LaTeX 表示</th>
<th>名称</th>
<th>示例效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><script type="math/tex">a^{\prime}</script></td>
<td>撇音符 (Prime)</td>
<td>$a^{\prime}$</td>
</tr>
<tr>
<td><script type="math/tex">\acute{a}</script></td>
<td>重音符(Acute)</td>
<td>$\acute{a}$</td>
</tr>
<tr>
<td><script type="math/tex">\bar{y}</script></td>
<td>横线符 (Bar)</td>
<td>$\bar{y}$</td>
</tr>
<tr>
<td><script type="math/tex">\breve{a}</script></td>
<td>弯弧符 (Breve)</td>
<td>$\breve{a}$</td>
</tr>
<tr>
<td><script type="math/tex">\check{a}</script></td>
<td>勾符 (Check)</td>
<td>$\check{a}$</td>
</tr>
<tr>
<td><script type="math/tex">\dot{a}</script></td>
<td>点符 (Dot)</td>
<td>$\dot{a}$</td>
</tr>
<tr>
<td><script type="math/tex">\ddot{a}</script></td>
<td>重点符 (Double Dot)</td>
<td>$\ddot{a}$</td>
</tr>
<tr>
<td><script type="math/tex">a''</script></td>
<td>重点符 (Double Dot)</td>
<td>$a’’$</td>
</tr>
<tr>
<td><script type="math/tex">a^{\prime}</script></td>
<td>重点符 (Double Dot)</td>
<td>$a^{\prime}$</td>
</tr>
<tr>
<td><script type="math/tex">\grave{a}</script></td>
<td>重音符 (Grave)</td>
<td>$\grave{a}$</td>
</tr>
<tr>
<td><script type="math/tex">\hat{\theta}</script></td>
<td>帽子符 (Hat)</td>
<td>$\hat{\theta}$</td>
</tr>
<tr>
<td><script type="math/tex">\widehat{ac}</script></td>
<td>宽帽子符 (Wide Hat)</td>
<td>$\widehat{ac}$</td>
</tr>
<tr>
<td><script type="math/tex">\tilde{a}</script></td>
<td>波浪符 (Tilde)</td>
<td>$\tilde{a}$</td>
</tr>
<tr>
<td><script type="math/tex">\widetilde{ac}</script></td>
<td>点型波浪符 (Dot Tilde)</td>
<td>$\widetilde{ac}$</td>
</tr>
<tr>
<td><script type="math/tex">\underline{AB}</script></td>
<td>下划线符 (Underline)</td>
<td>$\underline{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\underleftarrow{AB}</script></td>
<td>宽下划线符 (Wide Underline)</td>
<td>$\underleftarrow{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\underrightarrow{AB}</script></td>
<td>宽下划线符 (Wide Underline)</td>
<td>$\underrightarrow{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\vec{F}</script></td>
<td>矢量符 (Vector)</td>
<td>$\vec{F}$</td>
</tr>
<tr>
<td><script type="math/tex">\overleftarrow{AB}</script></td>
<td>左箭头上方符 (Over Leftarrow)</td>
<td>$\overleftarrow{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\overrightarrow{AB}</script></td>
<td>右箭头上方符 (Over Rightarrow)</td>
<td>$\overrightarrow{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\underleftarrow{AB}</script></td>
<td>左箭头下方符 (Under Leftarrow)</td>
<td>$\underleftarrow{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\underrightarrow{AB}</script></td>
<td>右箭头下方符 (Under Rightarrow)</td>
<td>$\underrightarrow{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\overleftharpoon{ac}</script></td>
<td>左弯曲箭头符 (Over rightharpoon)</td>
<td></td>
</tr>
<tr>
<td><script type="math/tex">\overrightharpoon{ac}</script></td>
<td>右弯曲箭头符 (Over rightharpoon)</td>
<td></td>
</tr>
<tr>
<td><script type="math/tex">\overbrace{AB}</script></td>
<td>上方弯曲括号符 (Overbrace)</td>
<td>$\overbrace{AB}$</td>
</tr>
<tr>
<td><script type="math/tex">\underbrace{AB}</script></td>
<td>下方弯曲括号符 (Underbrace)</td>
<td>$\underbrace{AB}$</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h4 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>数学公式中的名称</th>
<th>LaTeX 表示</th>
<th>定界符(需要放在$$之间)</th>
</tr>
</thead>
<tbody>
<tr>
<td>方括号</td>
<td>$[~]$</td>
<td><code>[~]</code></td>
</tr>
<tr>
<td>花括号</td>
<td>${ ~}$</td>
<td><code>\{ ~\}</code></td>
</tr>
<tr>
<td>除号（斜杠）</td>
<td>$/$</td>
<td><code>/</code></td>
</tr>
<tr>
<td>反斜杠</td>
<td>$\backslash$</td>
<td>\backslash</td>
</tr>
<tr>
<td>向上取整符号</td>
<td>$\lceil ~ \rceil$</td>
<td>\lceil ~ \rceil</td>
</tr>
<tr>
<td>向下取整符号</td>
<td>$\lfloor ~ \rfloor$</td>
<td><code>\lfloor ~ \rfloor</code></td>
</tr>
<tr>
<td>向上箭头</td>
<td>$\uparrow$</td>
<td>\uparrow</td>
</tr>
<tr>
<td>向下箭头</td>
<td>$\downarrow$</td>
<td>\downarrow</td>
</tr>
<tr>
<td>上下箭头</td>
<td>$\updownarrow$</td>
<td>\updownarrow</td>
</tr>
<tr>
<td>向上大箭头</td>
<td>$\Uparrow$</td>
<td>\Uparrow</td>
</tr>
<tr>
<td>向下大箭头</td>
<td>$\Downarrow$</td>
<td>\Downarrow</td>
</tr>
<tr>
<td>上下大箭头</td>
<td>$\Updownarrow$</td>
<td>\Updownarrow</td>
</tr>
<tr>
<td>向上取整符号</td>
<td>$\lceil$</td>
<td>\lceil</td>
</tr>
<tr>
<td>向下取整符号</td>
<td>$\lfloor$</td>
<td>\lfloor</td>
</tr>
<tr>
<td>向上弯曲的箭头</td>
<td>$\lceil ~ \rceil$</td>
<td>\lceil ~ \rceil</td>
</tr>
<tr>
<td>向下弯曲的箭头</td>
<td>$\lfloor ~ \rfloor$</td>
<td>\lfloor ~ \rfloor</td>
</tr>
<tr>
<td>大括号上下弯曲的形状</td>
<td></td>
<td>\lBrace ~ \rBrace</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>定界符的尺寸</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>LaTeX 表示</th>
<th>示例</th>
<th>示例效果(需放入$$中)</th>
</tr>
</thead>
<tbody>
<tr>
<td>左边界符</td>
<td>\left</td>
<td>$\left( \frac{a}{b} \right) $</td>
<td>\left( \frac{a}{b} \right)</td>
</tr>
<tr>
<td>大界符</td>
<td>\big</td>
<td>$\big( \frac{a}{b} \big) $</td>
<td>\big( \frac{a}{b} \big)</td>
</tr>
<tr>
<td>大界符（左）</td>
<td>\bigl</td>
<td>$\bigl( \frac{a}{b} \bigr) $</td>
<td>\bigl( \frac{a}{b} \bigr)</td>
</tr>
<tr>
<td>大界符（中）</td>
<td>\bigm</td>
<td>$\bigm\</td>
<td>_{x=0}^{x=1} $</td>
<td>\bigm\</td>
<td>_{x=0}^{x=1}</td>
</tr>
<tr>
<td>大界符（右）</td>
<td>\bigr</td>
<td>$\bigr( \frac{a}{b} \bigr)$</td>
<td>\bigr( \frac{a}{b} \bigr)</td>
</tr>
<tr>
<td>中间界符</td>
<td>\middle</td>
<td>$\middle\</td>
<td>_{x=0}^{x=1} $</td>
<td>\middle\</td>
<td>_{x=0}^{x=1}</td>
</tr>
<tr>
<td>大界符</td>
<td>\Big</td>
<td>$\Big( \frac{a}{b} \Big) $</td>
<td>\Big( \frac{a}{b} \Big)</td>
</tr>
<tr>
<td>大界符（左）</td>
<td>\Bigl</td>
<td>$\Bigl( \frac{a}{b} \Bigr) $</td>
<td>\Bigl( \frac{a}{b} \Bigr)</td>
</tr>
<tr>
<td>大界符（中）</td>
<td>\Bigm</td>
<td>$\Bigm\</td>
<td>_{x=0}^{x=1} $</td>
<td>\Bigm\</td>
<td>_{x=0}^{x=1}</td>
</tr>
<tr>
<td>大界符（右）</td>
<td>\Bigr</td>
<td>$\Bigr( \frac{a}{b} \Bigr) $</td>
<td>\Bigr( \frac{a}{b} \Bigr)</td>
</tr>
<tr>
<td>右边界符</td>
<td>\right</td>
<td>$\left( \frac{a}{b} \right) $</td>
<td>\left( \frac{a}{b} \right)</td>
</tr>
<tr>
<td>大界符</td>
<td>\bigg</td>
<td>$\bigg( \frac{a}{b} \bigg) $</td>
<td>\bigg( \frac{a}{b} \bigg)</td>
</tr>
<tr>
<td>大界符（左）</td>
<td>\biggl</td>
<td>$\biggl( \frac{a}{b} \biggr) $</td>
<td>\biggl( \frac{a}{b} \biggr)</td>
</tr>
<tr>
<td>大界符（中）</td>
<td>\biggm</td>
<td>$\biggm\</td>
<td>_{x=0}^{x=1} $</td>
<td>\biggm\</td>
<td>_{x=0}^{x=1}</td>
</tr>
<tr>
<td>大界符（右）</td>
<td>\biggr</td>
<td>$\biggr( \frac{a}{b} \biggr) $</td>
<td>\biggr( \frac{a}{b} \biggr)</td>
</tr>
<tr>
<td>大界符</td>
<td>\Bigg</td>
<td>$\Bigg( \frac{a}{b} \Bigg) $</td>
<td>\Bigg( \frac{a}{b} \Bigg)</td>
</tr>
<tr>
<td>大界符（左）</td>
<td>\Biggl</td>
<td>$\Biggl( \frac{a}{b} \Biggr) $</td>
<td>\Biggl( \frac{a}{b} \Biggr)</td>
</tr>
<tr>
<td>大界符（中）</td>
<td>\Biggm</td>
<td>$\Biggm\</td>
<td>_{x=0}^{x=1} $</td>
<td>\Biggm\</td>
<td>_{x=0}^{x=1}</td>
</tr>
<tr>
<td>大界符（右）</td>
<td>\Biggr</td>
<td>$\Biggr( \frac{a}{b} \Biggr) $</td>
<td>\Biggr( \frac{a}{b} \Biggr)</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>尺寸示例</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>示例</th>
<th>示例效果（需放在$$之间）</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\big( \Big( \bigg( \Bigg( $</td>
<td>\big( \Big( \bigg( \Bigg(</td>
</tr>
<tr>
<td>$\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg) $</td>
<td>\Bigg(\bigg(\Big(\big((x)\big)\Big)\bigg)\Bigg)</td>
</tr>
<tr>
<td>$\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg] $</td>
<td>\Bigg[\bigg[\Big[\big[[x]\big]\Big]\bigg]\Bigg]</td>
</tr>
<tr>
<td>$\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle $</td>
<td>\Bigg \langle \bigg \langle \Big \langle\big\langle\langle x \rangle \big \rangle\Big\rangle\bigg\rangle\Bigg\rangle</td>
</tr>
<tr>
<td>$\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert $</td>
<td>\Bigg\lvert\bigg\lvert\Big\lvert\big\lvert\lvert x \rvert\big\rvert\Big\rvert\bigg\rvert\Bigg\rvert</td>
</tr>
<tr>
<td>$\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert $</td>
<td>\Bigg\lVert\bigg\lVert\Big\lVert\big\lVert\lVert x \rVert\big\rVert\Big\rVert\bigg\rVert\Bigg\rVert</td>
</tr>
</tbody>
</table>
</div>
<h4 id="方括号和括号、矩阵"><a href="#方括号和括号、矩阵" class="headerlink" title="方括号和括号、矩阵"></a>方括号和括号、矩阵</h4><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>LaTeX 加价</th>
<th>渲染为</th>
</tr>
</thead>
<tbody>
<tr>
<td>括弧;圆括号</td>
<td><code>(x+y)</code></td>
<td>$（x+y）$</td>
</tr>
<tr>
<td>括弧;方括号</td>
<td><code>[x+y]</code></td>
<td>$[x+y]$</td>
</tr>
<tr>
<td>括号;大括号</td>
<td><code>\{ x+y \}</code></td>
<td>${ x+y }$</td>
</tr>
<tr>
<td>尖括号</td>
<td><code>\langle x+y \rangle</code></td>
<td>$\langle x+y\rangle$</td>
</tr>
<tr>
<td>管道;竖杆</td>
<td>`</td>
<td>x+y</td>
<td>`</td>
<td>$\displaystyle</td>
<td>x+y</td>
<td>$</td>
</tr>
<tr>
<td>双管</td>
<td>`\</td>
<td>x+y\</td>
<td>`</td>
<td>$\</td>
<td>x+y \</td>
<td>$</td>
</tr>
<tr>
<td></td>
<td>LaTeX 加价</td>
<td>渲染为</td>
</tr>
<tr>
<td></td>
<td><code>\left\lceil\begin{matrix}1 &amp; 2 &amp; 3\\a &amp; b &amp; c\end{matrix}\right\rceil</code></td>
<td>$\left\lceil\begin{matrix}1 &amp; 2 &amp; 3\a &amp; b &amp; c\end{matrix}\right\rceil$</td>
</tr>
<tr>
<td></td>
<td><code>\left\langle\begin{matrix}1 &amp; 2 &amp; 3\\a &amp; b &amp; c\end{matrix}\right\rvert</code></td>
<td>$\left\langle\begin{matrix}1 &amp; 2 &amp; 3\a &amp; b &amp; c\end{matrix}\right\rvert$</td>
</tr>
<tr>
<td></td>
<td><code>\left\langle\begin{matrix}1 &amp; 2 &amp; 3\\a &amp; b &amp; c\end{matrix}\right\rangle</code></td>
<td>$\left\langle\begin{matrix}1 &amp; 2 &amp; 3\a &amp; b &amp; c\end{matrix}\right\rangle$</td>
</tr>
</tbody>
</table>
</div>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>算子</th>
<th>渲染为</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\cos</code></td>
<td>$\cos$</td>
</tr>
<tr>
<td><code>\csc</code></td>
<td>$\csc$</td>
</tr>
<tr>
<td><code>\exp</code></td>
<td>$\exp$</td>
</tr>
<tr>
<td><code>\ker</code></td>
<td>$\ker$</td>
</tr>
<tr>
<td><code>\limsup</code></td>
<td>$\limsup$</td>
</tr>
<tr>
<td><code>\min</code></td>
<td>$\min$</td>
</tr>
<tr>
<td><code>\sinh</code></td>
<td>$\sinh$</td>
</tr>
<tr>
<td><code>\arcsin</code></td>
<td>$\arcsin$</td>
</tr>
<tr>
<td><code>\cosh</code></td>
<td>$\cosh$</td>
</tr>
<tr>
<td><code>\deg</code></td>
<td>$\deg$</td>
</tr>
<tr>
<td><code>\gcd</code></td>
<td>$\gcd$</td>
</tr>
<tr>
<td><code>\lg</code></td>
<td>$\lg$</td>
</tr>
<tr>
<td><code>\ln</code></td>
<td>$\ln$</td>
</tr>
<tr>
<td><code>\Pr</code></td>
<td>$\Pr$</td>
</tr>
<tr>
<td><code>\sup</code></td>
<td>$\sup$</td>
</tr>
<tr>
<td><code>\arctan</code></td>
<td>$\arctan$</td>
</tr>
<tr>
<td><code>\cot</code></td>
<td>$\cot$</td>
</tr>
<tr>
<td><code>\det</code></td>
<td>$\det$</td>
</tr>
<tr>
<td><code>\hom</code></td>
<td>$\hom$</td>
</tr>
<tr>
<td><code>\lim</code></td>
<td>$\lim$</td>
</tr>
<tr>
<td><code>\log</code></td>
<td>$\log$</td>
</tr>
<tr>
<td><code>\sec</code></td>
<td>$\sec$</td>
</tr>
<tr>
<td><code>\tan</code></td>
<td>$\tan$</td>
</tr>
<tr>
<td><code>\arg</code></td>
<td>$\arg$</td>
</tr>
<tr>
<td><code>\coth</code></td>
<td>$\coth$</td>
</tr>
<tr>
<td><code>\dim</code></td>
<td>$\dim$</td>
</tr>
<tr>
<td><code>\liminf</code></td>
<td>$\liminf$</td>
</tr>
<tr>
<td><code>\max</code></td>
<td>$\max$</td>
</tr>
<tr>
<td><code>\sin</code></td>
<td>$\sin$</td>
</tr>
<tr>
<td><code>\tanh</code></td>
<td>$\tanh$</td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<h4 id="希腊字母和数学符号列表"><a href="#希腊字母和数学符号列表" class="headerlink" title="希腊字母和数学符号列表"></a>希腊字母和数学符号列表</h4><blockquote>
<p>希腊字母</p>
</blockquote>
<p><strong>Greek letters</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1423e0a85ebc0eacd23bce6800aac8f222548cb1" alt="{\displaystyle \alpha A}"></th>
<th><code>\alpha A</code></th>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ae155e152964cc8ca332708abdd014d9362b1959" alt="{\displaystyle \nu N}"></th>
<th><code>\nu N</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e86ade6391d9979a1ec9ef888a69c8e1bfaca861" alt="{\displaystyle \beta B}"></td>
<td><code>\beta B</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/58db043ab673381e890f325efefdf7eee06d9acd" alt="{\displaystyle \xi \Xi }"></td>
<td><code>\xi \Xi</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0a703b97315b40b657673479ae39d6e6f8fecbe1" alt="{\displaystyle \gamma \Gamma }"></td>
<td><code>\gamma \Gamma</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6c5cb490780176f943464dc5313ec8eb2a6285d4" alt="{\displaystyle oO\;}"></td>
<td><code>o O</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7ec33521315a7ca8e815f20024d2b9494b8123b3" alt="{\displaystyle \delta \Delta }"></td>
<td><code>\delta \Delta</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ab5a189a040911908efdcededa3d4e40e48ae602" alt="{\displaystyle \pi \Pi }"></td>
<td><code>\pi \Pi</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ace20d40a97f4bcd3d5a0efbdee5513c241fe016" alt="{\displaystyle \epsilon \varepsilon E\;}"></td>
<td><code>\epsilon \varepsilon E</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a4cf38723a1cd25888c0c3c828e09f01ab04b012" alt="{\displaystyle \rho \varrho P\;}"></td>
<td><code>\rho \varrho P</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/98de1aceefc11746f0bd397a8c7954cad5a0a6ce" alt="{\displaystyle \zeta Z}"></td>
<td><code>\zeta Z</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9689e4eb34d33e1d734a3044d9d35a89680f0dc3" alt="{\displaystyle \sigma \,\!\Sigma \;}"></td>
<td><code>\sigma \Sigma</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0aa854c7fa2f3b73dfc306fd9d2c3d79105e80e3" alt="{\displaystyle \eta H}"></td>
<td><code>\eta H</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d9c0bbf08b46b2399edbd6f01cdc029da3abfa7f" alt="{\displaystyle \tau T}"></td>
<td><code>\tau T</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/083985203afdb520647be7a9b79acda20074e744" alt="{\displaystyle \theta \vartheta \Theta }"></td>
<td><code>\theta \vartheta \Theta</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9d75a091b694acee6aeb07edc29b0f507a76ee59" alt="{\displaystyle \upsilon \Upsilon }"></td>
<td><code>\upsilon \Upsilon</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/698f27066de7dd25ab2a00dac02995172fbbbcfa" alt="{\displaystyle \iota I}"></td>
<td><code>\iota I</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3a540725a8834facfdc76786932db303403f8347" alt="{\displaystyle \phi \varphi \Phi }"></td>
<td><code>\phi \varphi \Phi</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8714fc0053e3bc115a8ab0e2e5044529a79541e8" alt="{\displaystyle \kappa K}"></td>
<td><code>\kappa K</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/49a711f6b26e350769bea7258cf6b50cf22f5c91" alt="{\displaystyle \chi X}"></td>
<td><code>\chi X</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/cbf5521f6c5782d76a904953cc3ad1928ea8e615" alt="{\displaystyle \lambda \Lambda \;}"></td>
<td><code>\lambda \Lambda</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/eeab56671924f9300f94dd188d0ab8d40d0d3d63" alt="{\displaystyle \psi \Psi }"></td>
<td><code>\psi \Psi</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7cb72c559885487b695afaea0096ad43ac3323a1" alt="{\displaystyle \mu M}"></td>
<td><code>\mu M</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/712b9bf23b1404718331d8f2a4deab1a7c3ca46c" alt="{\displaystyle \omega \Omega }"></td>
<td><code>\omega \Omega</code></td>
</tr>
</tbody>
</table>
</div>
<p><strong>Arrows</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3c0fb4bce772117bbaf55b7ca1539ceff9ae218c" alt="{\displaystyle \leftarrow }"></th>
<th><code>\leftarrow</code></th>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/682eb97b10e06ba3d2dcc642ecd753d34dbb4ef9" alt="{\displaystyle \Leftarrow }"></th>
<th><code>\Leftarrow</code></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/53e574cc3aa5b4bf5f3f5906caf121a378eef08b" alt="{\displaystyle \rightarrow }"></td>
<td><code>\rightarrow</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c22c226e60ed9c63a202f8af2da11b92715ed2f1" alt="{\displaystyle \Rightarrow \;}"></td>
<td><code>\Rightarrow</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/046b918c43e05caf6624fe9b676c69ec9cd6b892" alt="{\displaystyle \leftrightarrow }"></td>
<td><code>\leftrightarrow</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1c37b981df851b9e54e489e017b1481e37d418f3" alt="{\displaystyle \rightleftharpoons }"></td>
<td><code>\rightleftharpoons</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ddb20b28c74cdaa09e1f101d426441da1996072f" alt="{\displaystyle \uparrow }"></td>
<td><code>\uparrow</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/4618f22b0f780805eb94bb407578d9bc9487947a" alt="{\displaystyle \downarrow }"></td>
<td><code>\downarrow</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ab6790d39f21b1711e5d0a4850402a03d7c04a15" alt="{\displaystyle \Uparrow \;}"></td>
<td><code>\Uparrow</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/98d4f1eaabe2639c9eb02780fadd623acd216612" alt="{\displaystyle \Downarrow }"></td>
<td><code>\Downarrow</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/3e7562bb3e33ee1b3c7baf8c24ca413a55914de2" alt="{\displaystyle \Leftrightarrow \;}"></td>
<td><code>\Leftrightarrow</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c2dfaf6c3bec677ed3666d6cd91648833837c620" alt="{\displaystyle \Updownarrow }"></td>
<td><code>\Updownarrow</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/bc09de045e7d82eef9fe078e7e7606576640c11b" alt="{\displaystyle \mapsto }"></td>
<td><code>\mapsto</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ed4db1c8963b8c7bd2df2d0f919d54b0d0e0282c" alt="{\displaystyle \longmapsto \;}"></td>
<td><code>\longmapsto</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/13726ca48b64be8035bbf69dedc5de51b6c59b62" alt="{\displaystyle \nearrow }"></td>
<td><code>\nearrow</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c086f3b8ec7a49977877c105da5f386531d5775a" alt="{\displaystyle \searrow }"></td>
<td><code>\searrow</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b4fafa2f8a9f4c7b1c1adcf090888097ddde887d" alt="{\displaystyle \swarrow }"></td>
<td><code>\swarrow</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8477be47a1b75007f7f62bb406e08f5405366f2a" alt="{\displaystyle \nwarrow }"></td>
<td><code>\nwarrow</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ed5b4c2f2ab115005b72687fbe5e6584497a0b17" alt="{\displaystyle \leftharpoonup }"></td>
<td><code>\leftharpoonup</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/912c85b375886509f9bf323bab01cd1d3d0b96c1" alt="{\displaystyle \rightharpoonup }"></td>
<td><code>\rightharpoonup</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8572e40b7a21ea071eac94f81458238d9f096ff8" alt="{\displaystyle \leftharpoondown }"></td>
<td><code>\leftharpoondown</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b3b850cb314e0167a03944481381f8a0401506d8" alt="{\displaystyle \rightharpoondown }"></td>
<td><code>\rightharpoondown</code></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p><strong>Miscellaneous symbols</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7e636ab1710fb09518c89fb6777597377fe79f0f" alt="{\displaystyle \infty \;\;}"></th>
<th><code>\infty</code></th>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/025c7b257d7948331271a151fe460cdce3c69167" alt="{\displaystyle \forall \;}"></th>
<th><code>\forall</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2cc5a2cb7aa22f6d765976edb1daebefaf408142" alt="{\displaystyle \Re }"></td>
<td><code>\Re</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d3e0312a4871a615cbdae168be102907f0a51e95" alt="{\displaystyle \Im }"></td>
<td><code>\Im</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a3d0e93b78c50237f9ea83d027e4ebbdaef354b2" alt="{\displaystyle \nabla }"></td>
<td><code>\nabla</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/77ed842b6b90b2fdd825320cf8e5265fa937b583" alt="{\displaystyle \exists }"></td>
<td><code>\exists</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/62b4e7c1cedb9564609aefd2aa2309972f455c24" alt="{\displaystyle \partial }"></td>
<td><code>\partial</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/105571be31b330ddf22ac965fc50efedfb59de7d" alt="{\displaystyle \nexists }"></td>
<td><code>\nexists</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6af50205f42bb2ec3c666b7b847d2c7f96e464c7" alt="{\displaystyle \emptyset }"></td>
<td><code>\emptyset</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/73f3c132d4a55444673503c4498310ea7cdd7df5" alt="{\displaystyle \varnothing \;}"></td>
<td><code>\varnothing</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f4050ebf63686af152bf1ef5caabcdf2a2d812cf" alt="{\displaystyle \wp }"></td>
<td><code>\wp</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6b2479e2cdb7ce0c5be60408f111d2354369189f" alt="{\displaystyle \complement }"></td>
<td><code>\complement</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fa78fd02085d39aa58c9e47a6d4033ce41e02fad" alt="{\displaystyle \neg }"></td>
<td><code>\neg</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e1d67495288eac0fa90d5bbcad7d9a343c15ad56" alt="{\displaystyle \cdots }"></td>
<td><code>\cdots</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/455831d58fa08f311b934d324adcff89a868b4e4" alt="{\displaystyle \square }"></td>
<td><code>\square</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8a9d637675e4ee00572431a0e42fa556901a4ca8" alt="{\displaystyle \surd }"></td>
<td><code>\surd</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8733090f2d787d03101c3e16dc3f6404f0e7dd4c" alt="{\displaystyle \blacksquare }"></td>
<td><code>\blacksquare</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d909fe94e8277a4c44a50853cb7dbbf0fa3148ed" alt="{\displaystyle \triangle }"></td>
<td><code>\triangle</code></td>
</tr>
</tbody>
</table>
</div>
<p><strong>Binary Operation/Relation Symbols</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0ffafff1ad26cbe49045f19a67ce532116a32703" alt="{\displaystyle \times }"></th>
<th><code>\times</code></th>
<th><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ba2c023bad1bd39ed49080f729cbf26bc448c9ba" alt="{\displaystyle \cdot }"></th>
<th><code>\cdot</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/837b35ee5d25b5ce7b07f292c27cc90533dd9fd4" alt="{\displaystyle \div }"></td>
<td><code>\div</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9d4e886e6f5a28a33e073fb108440c152ecfe2d3" alt="{\displaystyle \cap }"></td>
<td><code>\cap</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e8ff7d0293ad19b43524a133ae5129f3d71f2040" alt="{\displaystyle \cup }"></td>
<td><code>\cup</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fdd9cfbf0e9468f24b6f9b27db3be1f8bb5d6650" alt="{\displaystyle \neq \;}"></td>
<td><code>\neq</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/440568a09c3bfdf0e1278bfa79eb137c04e94035" alt="{\displaystyle \leq }"></td>
<td><code>\leq</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/bcef7c0e95bb77a35fd1a874ca91f425215f3c26" alt="{\displaystyle \geq }"></td>
<td><code>\geq</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6fe4d5b0a594c1da89b5e78e7dfbeed90bdcc32f" alt="{\displaystyle \in }"></td>
<td><code>\in</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e359e464318097f841e700d97bdb60c5aed21cf5" alt="{\displaystyle \perp \;}"></td>
<td><code>\perp</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/33dea9a3a3f311cc734ffd570e8f697ea1560a90" alt="{\displaystyle \notin }"></td>
<td><code>\notin</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0f51f0eeff0c2a9dcb9c856f87ca0359e701ef01" alt="{\displaystyle \subset }"></td>
<td><code>\subset</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/65b9738551241417d16d9843525ed52410af4dc9" alt="{\displaystyle \simeq }"></td>
<td><code>\simeq</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/6f58f4c2b73283ce8a5ad28fb3746f2a8c998789" alt="{\displaystyle \approx }"></td>
<td><code>\approx</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1caa4004cb216ef2930bb12fe805a76870caed94" alt="{\displaystyle \wedge }"></td>
<td><code>\wedge</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7b76220c6805c9b465d6efbc7686c624f49f3023" alt="{\displaystyle \vee }"></td>
<td><code>\vee</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/282868a7bc101b11dabe70abe1d72def8ec688c3" alt="{\displaystyle \oplus \;}"></td>
<td><code>\oplus</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/de29098f5a34ee296a505681a0d5e875070f2aea" alt="{\displaystyle \otimes }"></td>
<td><code>\otimes</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/029b77f09ebeaf7528fc831fe57848be51f2240b" alt="{\displaystyle \Box }"></td>
<td><code>\Box</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0cfc27ef694886c0b78697df1cd69558cdf53eff" alt="{\displaystyle \boxtimes }"></td>
<td><code>\boxtimes</code></td>
</tr>
<tr>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/4c5c34250859b6f6d2a77b4e8a2ceaa90638076d" alt="{\displaystyle \equiv }"></td>
<td><code>\equiv</code></td>
<td><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a725ebc5ab8de11d7b71a8aa5a3706c2ea467885" alt="{\displaystyle \cong }"></td>
<td><code>\cong</code></td>
</tr>
<tr>
<td>$\pm$</td>
<td>\pm</td>
<td>$\emptyset$</td>
<td>\emptyset</td>
</tr>
<tr>
<td>$\mid$</td>
<td>\mid</td>
<td>$\supset$</td>
<td>\supset</td>
</tr>
<tr>
<td>$\circ$</td>
<td>\circ</td>
<td>$\subseteq$</td>
<td>\subseteq</td>
</tr>
<tr>
<td>$\ast$</td>
<td>\ast</td>
<td>$\supseteq$</td>
<td>\supseteq</td>
</tr>
<tr>
<td>$\bigodot$</td>
<td>\bigodot</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>表达式（转义）</th>
<th>运算符</th>
<th>表达式（转义）</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\oint$</td>
<td>\oint</td>
<td>$\infty$</td>
<td>\infty</td>
</tr>
<tr>
<td>$\nabla$</td>
<td>\nabla</td>
<td>$-$</td>
<td>-</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>表达式（转义）</th>
<th>运算符</th>
<th>表达式（转义）</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\because$</td>
<td>\because</td>
<td>$\therefore$</td>
<td>\therefore</td>
</tr>
<tr>
<td>$\forall$</td>
<td>\forall</td>
<td>$\exists$</td>
<td>\exists</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>含义</th>
<th>符号</th>
<th>表达式（转义）</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>求和符号</td>
<td>$\sum$</td>
<td>\sum</td>
<td></td>
</tr>
<tr>
<td>积分符号</td>
<td>$\int$</td>
<td>\int</td>
<td></td>
</tr>
<tr>
<td>极限符号</td>
<td>$\lim$</td>
<td>\lim</td>
<td></td>
</tr>
<tr>
<td>向量符号</td>
<td>$\vec{}$</td>
<td>\vec{}</td>
</tr>
</tbody>
</table>
</div>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">输入</td>
<td style="text-align:left">说明</td>
<td style="text-align:left">显示</td>
<td style="text-align:left">输入</td>
<td style="text-align:left">说明</td>
<td style="text-align:left">显示</td>
</tr>
<tr>
<td style="text-align:left">\rm</td>
<td style="text-align:left">罗马体</td>
<td style="text-align:left">$\rm SampleSample$</td>
<td style="text-align:left">\cal</td>
<td style="text-align:left">花体</td>
<td style="text-align:left">$\cal SAMPLESAMPLE$</td>
</tr>
<tr>
<td style="text-align:left">\it</td>
<td style="text-align:left">意大利体</td>
<td style="text-align:left">$\it SampleSample$</td>
<td style="text-align:left">\Bbb</td>
<td style="text-align:left">黑板粗体</td>
<td style="text-align:left">$\Bbb SAMPLESAMPLE$</td>
</tr>
<tr>
<td style="text-align:left">\bf</td>
<td style="text-align:left">粗体</td>
<td style="text-align:left">$\bf SampleSample$</td>
<td style="text-align:left">\mathit</td>
<td style="text-align:left">数字斜体</td>
<td style="text-align:left">$\mathit SAMPLESAMPLE$</td>
</tr>
<tr>
<td style="text-align:left">\sf</td>
<td style="text-align:left">等线体</td>
<td style="text-align:left">$\sf SampleSample$</td>
<td style="text-align:left">\mathscr</td>
<td style="text-align:left">手写体</td>
<td style="text-align:left">$\mathscr SAMPLESAMPLE$</td>
</tr>
<tr>
<td style="text-align:left">\tt</td>
<td style="text-align:left">打字机体</td>
<td style="text-align:left">$\tt SampleSample$</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">\frak</td>
<td style="text-align:left">旧德式体</td>
<td style="text-align:left">$\frak SampleSample$</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
<h3 id="6-mermaid语法绘图"><a href="#6-mermaid语法绘图" class="headerlink" title="6.mermaid语法绘图"></a>6.mermaid语法绘图</h3><blockquote>
<p><strong>Mermaid 允许你使用文本和代码创建图表和可视化。</strong></p>
<p>它是一个基于 JavaScript 的图表绘制工具，可渲染 Markdown 启发的文本定义以动态创建和修改图表。</p>
</blockquote>
<h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a><a href="https://mermaid.nodejs.cn/syntax/flowchart.html">流程图</a></h4><p>流程图由节点（几何形状）和边（箭头或线条）组成。Mermaid 代码定义了如何制作节点和边，并适应不同的箭头类型、多方向箭头以及任何与子图的链接。</p>
<blockquote>
<p>[!WARNING]</p>
<p>如果你在流程图节点中使用单词 “end”，请将整个单词或任何字母大写（例如，”End” 或 “END”），或应用此 <a href="https://github.com/mermaid-js/mermaid/issues/1444#issuecomment-639528897">workaround</a>。输入全部小写字母的 “end” 将破坏流程图。</p>
<p>[!WARNING]</p>
<p>如果你使用字母 “o” 或 “x” 作为连接流程图节点的首字母，请在字母前添加空格或将字母大写（例如，”dev—- ops”、”dev—-Ops”）。输入 “A—-oB” 将创建 <a href="https://mermaid.nodejs.cn/syntax/flowchart.html#circle-edge-example">circle edge</a>。输入 “A—-xB” 将创建 <a href="https://mermaid.nodejs.cn/syntax/flowchart.html#cross-edge-example">cross edge</a>。</p>
</blockquote>
<pre class="mermaid">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;</pre>



<h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a><a href="https://mermaid.nodejs.cn/syntax/sequenceDiagram.html">时序图</a></h4><p>时序图是一种交互图，显示进程如何彼此运行以及以什么顺序运行.</p>
<pre class="mermaid">sequenceDiagram
    participant Alice
    participant Bob
    Alice-&gt;&gt;John: Hello John, how are you?
    loop HealthCheck
        John-&gt;&gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts <br>prevail!
    John--&gt;&gt;Alice: Great!
    John-&gt;&gt;Bob: How about you?
    Bob--&gt;&gt;John: Jolly good!</pre>





<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a><a href="https://mermaid.nodejs.cn/syntax/classDiagram.html">类图</a></h4><blockquote>
<p>“在软件工程中，统一建模语言（UML）中的类图是一种静态结构图，它通过显示系统的类、它们的属性、操作（或方法）以及对象之间的关系来描述系统的结构。”</p>
<p>-Wikipedia</p>
</blockquote>
<p>类图是面向对象建模的主要构建块。它用于应用结构的一般概念建模，以及将模型转换为编程代码的详细建模。类图也可用于数据建模。类图中的类表示主要元素、应用中的交互以及要编程的类。</p>
<pre class="mermaid">classDiagram
Class01 &lt;|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --&gt; C2 : Where am i?
Class09 --* C3
Class09 --|&gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 &lt;--&gt; C2: Cool label</pre>





<h4 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a><a href="https://mermaid.nodejs.cn/syntax/stateDiagram.html">状态图</a></h4><blockquote>
<p>“状态图是计算机科学及相关字段中用于描述系统行为的一种图表。状态图要求所描述的系统由有限数量的状态组成；有时，情况确实如此，而有时这是一个合理的抽象。”维基百科</p>
</blockquote>
<p>Mermaid 可以渲染状态图。该语法尝试与 plantUml 中使用的语法兼容，因为这将使用户更容易在 mermaid 和 plantUml 之间共享图表。</p>
<pre class="mermaid">   stateDiagram-v2
    state fork_state &lt;<fork>&gt;
      [*] --&gt; fork_state
      fork_state --&gt; State2
      fork_state --&gt; State3

      state join_state &lt;<join>&gt;
      State2 --&gt; join_state
      State3 --&gt; join_state
      join_state --&gt; State4
      State4 --&gt; [*]</join></fork></pre>







<h4 id="实体关系图"><a href="#实体关系图" class="headerlink" title="实体关系图"></a><a href="https://mermaid.nodejs.cn/syntax/entityRelationshipDiagram.html">实体关系图</a></h4><blockquote>
<p>实体关系模型（或 ER 模型）描述特定知识字段中相关的感兴趣的事物。基本 ER 模型由实体类型（对感兴趣的事物进行分类）组成，并指定实体（这些实体类型的实例）之间可以存在的关系 <a href="https://en.wikipedia.org/wiki/Entity–relationship_model">维基百科</a>。</p>
</blockquote>
<p>请注意，ER 建模的实践者几乎总是将实体类型简称为实体。例如，<code>CUSTOMER</code> 实体类型将简称为 <code>CUSTOMER</code> 实体。这种情况很常见，不建议做任何其他事情，但从技术上讲，实体是实体类型的抽象实例，这就是 ER 图所示的内容 - 抽象实例以及它们之间的关系。这就是为什么实体总是使用单数名词来命名。</p>
<pre class="mermaid">erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</pre>



<h4 id="用户旅程图"><a href="#用户旅程图" class="headerlink" title="用户旅程图"></a><a href="https://mermaid.nodejs.cn/syntax/userJourney.html">用户旅程图</a></h4><p>用户旅程高度详细地描述了不同用户在系统、应用或网站内完成特定任务所采取的步骤。该技术显示当前（原样）用户工作流程，并揭示未来工作流程的改进字段。（维基百科）</p>
<pre class="mermaid">journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 5: Me</pre>





<h4 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a><a href="https://mermaid.nodejs.cn/syntax/gantt.html">甘特图</a></h4><p>甘特图是一种柱状图，最初由 Karol Adamiecki 于 1896 年开发，并由 Henry Gantt 在 1910 年代独立开发，它说明了项目进度表以及任何一个项目完成所需的时间。甘特图显示了项目的终端元素和摘要元素的开始日期和完成日期之间的天数</p>
<pre class="mermaid">gantt
dateFormat  YYYY-MM-DD
title Adding GANTT diagram to mermaid
excludes weekdays 2014-01-10

section A section
Completed task            :done,    des1, 2014-01-06,2014-01-08
Active task               :active,  des2, 2014-01-09, 3d
Future task               :         des3, after des2, 5d
Future task2               :         des4, after des3, 5d</pre>





<h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a><a href="https://mermaid.nodejs.cn/syntax/pie.html">饼图</a></h4><p>饼图（或圆形图）是一种圆形统计图形，将其划分为多个切片以说明数字比例。在饼图中，每个切片的弧长（及其中心角和面积）与其表示的数量成正比。虽然它因其类似于切片的馅饼而得名，但它的渲染方式却有多种变化。已知最早的饼图通常归功于 William Playfair 于 1801 年发布的统计手册 - 维基百科</p>
<pre class="mermaid">pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15</pre>



<h4 id="象限图"><a href="#象限图" class="headerlink" title="象限图"></a><a href="https://mermaid.nodejs.cn/syntax/quadrantChart.html">象限图</a></h4><p>象限图是分为四个象限的数据的直观表示。它用于在二维网格上绘制数据点，其中一个变量表示在 x 轴上，另一个变量表示在 y 轴上。象限是通过根据一组特定于所分析数据的标准将图表分为四个相等部分来确定的。象限图通常用于识别数据的模式和趋势，并根据图表中数据点的位置确定操作的优先级。它们通常用于商业、营销和风险管理等字段。</p>
<pre class="mermaid">quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --&gt; High Reach
    y-axis Low Engagement --&gt; High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    Campaign A: [0.3, 0.6]
    Campaign B: [0.45, 0.23]
    Campaign C: [0.57, 0.69]
    Campaign D: [0.78, 0.34]
    Campaign E: [0.40, 0.34]
    Campaign F: [0.35, 0.78]</pre>





<h4 id="需求图"><a href="#需求图" class="headerlink" title="需求图"></a><a href="https://mermaid.nodejs.cn/syntax/requirementDiagram.html">需求图</a></h4><p>需求图提供了需求及其相互之间以及其他记录元素之间的联系的可视化。建模规范遵循 SysML v1.6 定义的规范。</p>
<blockquote>
<p>语法：</p>
<p>需求图包含三种类型的组件：要求、要素和关系。</p>
<p>用于定义每个的语法定义如下。尖括号中表示的单词（例如 <code>&lt;word&gt;</code>）是枚举关键字，其选项在表格中详细说明。<code>user_defined_...</code> 用于任何需要用户输入的地方。</p>
<p>关于用户文本的重要说明：所有输入都可以用引号引起来，也可以不用引号引起来。例如，<code>Id: "here is an example"</code> 和 <code>Id: here is an example</code> 都有效。但是，用户必须小心未加引号的输入。如果检测到另一个关键字，解析器将失败。</p>
</blockquote>
<pre class="mermaid">    requirementDiagram

    requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
    }

    element test_entity {
    type: simulation
    }

    test_entity - satisfies -&gt; test_req</pre>



<h4 id="GitGraph-Git-图"><a href="#GitGraph-Git-图" class="headerlink" title="GitGraph(Git)图"></a><a href="https://mermaid.nodejs.cn/syntax/gitgraph.html">GitGraph(Git)图</a></h4><blockquote>
<p>Git 图表是各个分支上 git 提交和 git 操作（命令）的图形表示。</p>
</blockquote>
<p>此类图表对于开发者和 DevOps 团队分享他们的 Git 分支策略特别有帮助。例如，它可以更轻松地可视化 git flow 的工作原理。</p>
<p>在 Mermaid 中，我们支持基本的 git 操作，例如：</p>
<ul>
<li>commit ：代表当前分支上的新提交。</li>
<li>分支 ：创建并切换到新分支，将其设置为当前分支。</li>
<li>checkout ：签出现有分支并将其设置为当前分支。</li>
<li>merge ：将现有分支合并到当前分支。</li>
</ul>
<p>借助这些关键的 git 命令，你将能够非常轻松快速地在 Mermaid 中绘制 gitgraph。实体名称通常是大写的，尽管对此没有公认的标准，并且在 Mermaid 中也没有要求。</p>
<p>注意：<code>checkout</code> 和 <code>switch</code> 可以互换使用。</p>
<pre class="mermaid">    gitGraph
       commit
       commit
       branch develop
       commit
       commit
       commit
       checkout main
       commit
       commit</pre>



<h4 id="C4图"><a href="#C4图" class="headerlink" title="C4图"></a><a href="https://mermaid.nodejs.cn/syntax/c4.html">C4图</a></h4><pre class="mermaid">    C4Context
      title System Context diagram for Internet Banking System
      Enterprise_Boundary(b0, "BankBoundary0") {
        Person(customerA, "Banking Customer A", "A customer of the bank, with personal bank accounts.")
        Person(customerB, "Banking Customer B")
        Person_Ext(customerC, "Banking Customer C", "desc")

        Person(customerD, "Banking Customer D", "A customer of the bank, <br> with personal bank accounts.")

        System(SystemAA, "Internet Banking System", "Allows customers to view information about their bank accounts, and make payments.")

        Enterprise_Boundary(b1, "BankBoundary") {

          SystemDb_Ext(SystemE, "Mainframe Banking System", "Stores all of the core banking information about customers, accounts, transactions, etc.")

          System_Boundary(b2, "BankBoundary2") {
            System(SystemA, "Banking System A")
            System(SystemB, "Banking System B", "A system of the bank, with personal bank accounts. next line.")
          }

          System_Ext(SystemC, "E-mail system", "The internal Microsoft Exchange e-mail system.")
          SystemDb(SystemD, "Banking System D Database", "A system of the bank, with personal bank accounts.")

          Boundary(b3, "BankBoundary3", "boundary") {
            SystemQueue(SystemF, "Banking System F Queue", "A system of the bank.")
            SystemQueue_Ext(SystemG, "Banking System G Queue", "A system of the bank, with personal bank accounts.")
          }
        }
      }

      BiRel(customerA, SystemAA, "Uses")
      BiRel(SystemAA, SystemE, "Uses")
      Rel(SystemAA, SystemC, "Sends e-mails", "SMTP")
      Rel(SystemC, customerA, "Sends e-mails to")

      UpdateElementStyle(customerA, $fontColor="red", $bgColor="grey", $borderColor="red")
      UpdateRelStyle(customerA, SystemAA, $textColor="blue", $lineColor="blue", $offsetX="5")
      UpdateRelStyle(SystemAA, SystemE, $textColor="blue", $lineColor="blue", $offsetY="-10")
      UpdateRelStyle(SystemAA, SystemC, $textColor="blue", $lineColor="blue", $offsetY="-40", $offsetX="-50")
      UpdateRelStyle(SystemC, customerA, $textColor="red", $lineColor="red", $offsetX="-50", $offsetY="20")

      UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")</pre>





<h4 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><a href="https://mermaid.nodejs.cn/syntax/mindmap.html">思维导图</a></h4><blockquote>
<p>思维导图：这是目前的实验图。语法和属性可能会在未来版本中更改。除了图标集成是实验部分之外，语法是稳定的。</p>
</blockquote>
<p>“思维导图是一种图表，用于将信息直观地组织成层次结构，显示整体各个部分之间的关系。它通常是围绕一个概念创建的，在空白页面的中心绘制为图片，并在其中添加相关的想法表示，例如图片、单词和单词的一部分。主要思想与中心概念直接相关，而其他思想则从这些主要思想中分支出来。”维基百科</p>
<pre class="mermaid">mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid</pre>



<h4 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a><a href="https://mermaid.nodejs.cn/syntax/timeline.html">时间线</a></h4><blockquote>
<p>时间线：这是目前的实验图。语法和属性可能会在未来版本中更改。除了图标集成是实验部分之外，语法是稳定的。</p>
</blockquote>
<p>“时间线是一种图表，用于说明事件、日期或时间段的年表。它通常以图形方式渲染以指示时间的流逝，并且通常按时间顺序组织。基本时间线按时间顺序渲染事件列表，通常使用日期作为标记。时间线还可以用来展示事件之间的关系，比如一个人一生中的事件之间的关系”<a href="https://en.wikipedia.org/wiki/Timeline">（维基百科）</a>.</p>
<pre class="mermaid">timeline
    title History of Social Media Platform
    2002 : LinkedIn
    2004 : Facebook
         : Google
    2005 : Youtube
    2006 : Twitter</pre>





<h4 id="ZenUML"><a href="#ZenUML" class="headerlink" title="ZenUML"></a><a href="https://mermaid.nodejs.cn/syntax/zenuml.html">ZenUML</a></h4><blockquote>
<p>时序图是一种交互图，显示进程如何彼此运行以及以什么顺序运行。</p>
</blockquote>
<p>Mermaid 可以使用 <a href="https://zenuml.com/">ZenUML</a> 渲染时序图。请注意，ZenUML 使用与 mermaid 中原始时序图不同的语法。</p>
<pre class="mermaid">zenuml
    title Demo
    Alice-&gt;John: Hello John, how are you?
    John-&gt;Alice: Great!
    Alice-&gt;John: See you later!</pre>





<h4 id="桑葚图"><a href="#桑葚图" class="headerlink" title="桑葚图"></a><a href="https://mermaid.nodejs.cn/syntax/sankey.html">桑葚图</a></h4><blockquote>
<p>桑基图是一种可视化，用于描述从一组值到另一组值的流动。</p>
<p>[!WARNING]</p>
<p>这是一个实验图表。它的语法非常接近纯 CSV，但它将在不久的将来得到扩展。</p>
</blockquote>
<p>连接的事物称为节点，连接称为链接。</p>
<pre class="mermaid">---
config:
  sankey:
    showValues: false
---
sankey-beta

Agricultural 'waste',Bio-conversion,124.729
Bio-conversion,Liquid,0.597
Bio-conversion,Losses,26.862
Bio-conversion,Solid,280.322
Bio-conversion,Gas,81.144
Biofuel imports,Liquid,35
Biomass imports,Solid,35
Coal imports,Coal,11.606
Coal reserves,Coal,63.965
Coal,Solid,75.571
District heating,Industry,10.639
District heating,Heating and cooling - commercial,22.505
District heating,Heating and cooling - homes,46.184
Electricity grid,Over generation / exports,104.453
Electricity grid,Heating and cooling - homes,113.726
Electricity grid,H2 conversion,27.14
Electricity grid,Industry,342.165
Electricity grid,Road transport,37.797
Electricity grid,Agriculture,4.412
Electricity grid,Heating and cooling - commercial,40.858
Electricity grid,Losses,56.691
Electricity grid,Rail transport,7.863
Electricity grid,Lighting &amp; appliances - commercial,90.008
Electricity grid,Lighting &amp; appliances - homes,93.494
Gas imports,Ngas,40.719
Gas reserves,Ngas,82.233
Gas,Heating and cooling - commercial,0.129
Gas,Losses,1.401
Gas,Thermal generation,151.891
Gas,Agriculture,2.096
Gas,Industry,48.58
Geothermal,Electricity grid,7.013
H2 conversion,H2,20.897
H2 conversion,Losses,6.242
H2,Road transport,20.897
Hydro,Electricity grid,6.995
Liquid,Industry,121.066
Liquid,International shipping,128.69
Liquid,Road transport,135.835
Liquid,Domestic aviation,14.458
Liquid,International aviation,206.267
Liquid,Agriculture,3.64
Liquid,National navigation,33.218
Liquid,Rail transport,4.413
Marine algae,Bio-conversion,4.375
Ngas,Gas,122.952
Nuclear,Thermal generation,839.978
Oil imports,Oil,504.287
Oil reserves,Oil,107.703
Oil,Liquid,611.99
Other waste,Solid,56.587
Other waste,Bio-conversion,77.81
Pumped heat,Heating and cooling - homes,193.026
Pumped heat,Heating and cooling - commercial,70.672
Solar PV,Electricity grid,59.901
Solar Thermal,Heating and cooling - homes,19.263
Solar,Solar Thermal,19.263
Solar,Solar PV,59.901
Solid,Agriculture,0.882
Solid,Thermal generation,400.12
Solid,Industry,46.477
Thermal generation,Electricity grid,525.531
Thermal generation,Losses,787.129
Thermal generation,District heating,79.329
Tidal,Electricity grid,9.452
UK land based bioenergy,Bio-conversion,182.01
Wave,Electricity grid,19.013
Wind,Electricity grid,289.366</pre>





<h4 id="XY图"><a href="#XY图" class="headerlink" title="XY图"></a><a href="https://mermaid.nodejs.cn/syntax/xyChart.html">XY图</a></h4><blockquote>
<p>在 mermaid-js 的上下文中，XY 图是一个综合图表模块，包含利用 x 轴和 y 轴进行数据表示的各种类型的图表。目前，它包括两种基本图表类型：柱状图和折线图。这些图表旨在直观地显示和分析涉及两个数值变量的数据。</p>
<p>值得注意的是，虽然 mermaid-js 当前的实现包含这两种图表类型，但该框架被设计为动态且适应性强的。因此，它具有将来扩展和包含其他图表类型的能力。这意味着用户可以在 XY 图模块中期待一套不断发展的图表选项，以满足随着时间的推移引入新图表类型的各种数据可视化需求。</p>
</blockquote>
<pre class="mermaid">xychart-beta
    title "Sales Revenue"
    x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
    y-axis "Revenue (in $)" 4000 --&gt; 11000
    bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
    line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]</pre>





<h4 id="框图"><a href="#框图" class="headerlink" title="框图"></a><a href="https://mermaid.nodejs.cn/syntax/block.html">框图</a></h4><blockquote>
<h3 id="定义和目的"><a href="#定义和目的" class="headerlink" title="定义和目的"></a>定义和目的</h3><p>框图是一种直观、有效的方式来直观地表示复杂的系统、流程或架构。它们由块和连接器组成，其中块代表基本组件或功能，连接器显示这些组件之间的关系或流程。这种图表方法在工程、软件开发和流程管理等各个字段都至关重要。</p>
<p>框图的主要目的是提供系统的高级视图，以便轻松理解和分析，而无需深入研究每个组件的复杂细节。这使得它们对于简化复杂系统以及解释系统内组件的整体结构和交互特别有用。</p>
<p>许多人使用 Mermaid 流程图来达到此目的。这样做的副作用是自动布局有时会将形状移动到图表制作者不想要的位置。框图使用不同的方法。在此图中，我们让作者完全控制形状的放置位置。</p>
<h3 id="一般用例"><a href="#一般用例" class="headerlink" title="一般用例"></a>一般用例</h3><p>框图在各个行业和学科中都有广泛的应用。一些关键用例包括：</p>
<ul>
<li>软件架构：在软件开发中，框图可用于说明软件应用的体系结构。这包括显示不同模块或服务如何交互、数据流和高级组件交互。</li>
<li>网络图：框图非常适合表示 IT 和电信中的网络架构。它们可以描述不同的网络设备和服务如何互连，包括路由、交换机、防火墙以及网络上的数据流。</li>
<li>工艺流程图：在商业和制造中，可以使用框图来创建流程图。这些流程图代表业务或制造流程的各个阶段，有助于可视化步骤顺序、决策点和控制流程。</li>
<li>电气系统：工程师使用框图来表示电气系统和电路。它们可以说明电气系统的高级结构、不同电气组件之间的相互作用以及电流的流动。</li>
<li>教育目的：框图也广泛用于教育材料中，以简化的方式解释复杂的概念和系统。它们有助于分解和可视化科学理论、工程原理和技术系统。</li>
</ul>
<p>这些示例展示了框图在提供复杂系统的清晰简洁表示方面的多功能性。它们的简单性和清晰度使它们成为各个字段的专业人士有效交流复杂想法的宝贵工具。</p>
<p>在以下部分中，我们将深入研究使用 Mermaid 创建和操作框图的细节，涵盖从基本语法到高级配置和样式的所有内容。</p>
<p>使用 Mermaid 创建框图非常简单且易于访问。</p>
</blockquote>
<pre class="mermaid">block-beta
columns 1
  db(("DB"))
  blockArrowId6&lt;["&nbsp;&nbsp;&nbsp;"]&gt;(down)
  block:ID
    A
    B["A wide one in the middle"]
    C
  end
  space
  D
  ID --&gt; D
  C --&gt; D
  style B fill:#969,stroke:#333,stroke-width:4px</pre>





<h4 id="数据包图"><a href="#数据包图" class="headerlink" title="数据包图"></a><a href="https://mermaid.nodejs.cn/syntax/packet.html">数据包图</a></h4><p>数据包图是用于说明网络数据包的结构和内容的可视化表示。网络数据包是通过网络传输的数据的基本单位。</p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><p>这种图表类型对于需要以清晰简洁的方式表示网络数据包结构的开发者、网络工程师、教育工作者和学生特别有用。</p>
<pre class="mermaid">packet-beta
title UDP Packet
0-15: "Source Port"
16-31: "Destination Port"
32-47: "Length"
48-63: "Checksum"
64-95: "Data (variable length)"</pre>



<h4 id="KanBan"><a href="#KanBan" class="headerlink" title="KanBan"></a><a href="https://mermaid.nodejs.cn/syntax/kanban.html">KanBan</a></h4><p>Mermaid 的看板图允许你创建在工作流程的不同阶段移动的任务的可视化表示。本指南根据提供的示例解释了如何使用看板图语法。</p>
<pre class="mermaid">kanban
  column1[Column Title]
    task1[Task Description]</pre>





<h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a><a href="https://mermaid.nodejs.cn/syntax/architecture.html">架构图</a></h4><p>在 mermaid-js 的上下文中，架构图用于显示云或 CI/CD 部署中常见的服务和资源之间的关系。在架构图中，服务（节点）通过边连接。相关服务可以放在组中，以更好地说明它们的组织方式。</p>
<pre class="mermaid">architecture-beta
    group api(cloud)[API]

    service db(database)[Database] in api
    service disk1(disk)[Storage] in api
    service disk2(disk)[Storage] in api
    service server(server)[Server] in api

    db:L -- R:server
    disk1:T -- B:server
    disk2:T -- B:db</pre>









<h3 id="7-HTML"><a href="#7-HTML" class="headerlink" title="7. HTML"></a>7. HTML</h3><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style="color:red"&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p>
<h4 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h4><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">height</span>=<span class="hljs-string">'265'</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">'no'</span> <span class="hljs-attr">title</span>=<span class="hljs-string">'Fancy Animated SVG Menu'</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2'</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">'no'</span> <span class="hljs-attr">allowtransparency</span>=<span class="hljs-string">'true'</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">'true'</span> <span class="hljs-attr">style</span>=<span class="hljs-string">'width: 100%;'</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h4><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"xxx.mp4"</span> /&gt;</span></span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h4><p>You can find more details <a href="https://support.typora.io/HTML/">here</a>.</p>
<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:2" class="footnote-text"><span>脚注2的解释
<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>脚注三的解释
<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>//posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>search in Google</title>
    <url>//posts/733e373d/</url>
    <content><![CDATA[<hr>
<hr>
<hr>
<p>参考：<a href="https://support.google.com/websearch/answer/35890">Google Document: Do an Advanced Search on Google</a></p>
<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>人并非全知全能，工作和生活难免会有各种的疑问，有问题自然可以询问有经验的同事或朋友。</p>
<p>但为了避免一有问题就去问人，给别人造成困扰，更推荐的就是: 自己先搜索，然后再去问人(Do a search before you ask a question)</p>
<p>当然，如果你不想打扰他人，直接问ChatGPT也未尝不可，只是答案的准确性不一定有保证。</p>
<p>如何高效地搜索，缩小搜索的范围，如何快速地检索到答案呢？下面有几个小技巧。Google提供了一些搜索指令(search operator)</p>
<blockquote>
<p>虽然「搜索并不仅限于使用搜索引擎」，但是「搜索引擎」却是搜索并不可少的一部分。</p>
<p>虽然搜索引擎有很多，但是我基本只用 Google；如果没法使用 Google, 那么推荐使用Bing, 反正百度不在我的推荐之列.</p>
<p>Google 搜索的界面很简单，只有一个搜索框，用户只需要把想要搜索的内容输入进去并回车即可。</p>
</blockquote>
<h3 id="1-使用引号进行精确匹配"><a href="#1-使用引号进行精确匹配" class="headerlink" title="1. 使用引号进行精确匹配"></a>1. 使用引号进行精确匹配</h3><p><strong>用法</strong>：在搜索词周围加上引号。</p>
<p><strong>例子</strong>：<code>"人工智能发展"</code></p>
<p><strong>说明</strong>：这样 Google 只会返回包含完全匹配词组的结果。适合寻找具体的短语或文章标题。</p>
<h3 id="2-使用减号排除词"><a href="#2-使用减号排除词" class="headerlink" title="2. 使用减号排除词"></a>2. 使用减号排除词</h3><p><strong>用法</strong>：在不需要的词前加上减号。</p>
<p><strong>例子</strong>：<code>苹果 -手机</code>  <code>某个技巧 -csdn</code></p>
<p><strong>说明</strong>：这个搜索会返回关于“苹果”的结果，但会排除包含“手机”的结果。适用于你希望排除某些相关内容的情况。</p>
<h3 id="3-使用星号作为通配符"><a href="#3-使用星号作为通配符" class="headerlink" title="3. 使用星号作为通配符"></a>3. 使用星号作为通配符</h3><p><strong>用法</strong>：在搜索词中使用星号。</p>
<p><strong>例子</strong>：<code>最佳 * 学习工具</code></p>
<p><strong>说明</strong>：星号（*）作为通配符，表示可以匹配任意词。这对于寻找包含变体或相关词组的信息很有用。</p>
<h3 id="4-使用“site-”限定特定网站"><a href="#4-使用“site-”限定特定网站" class="headerlink" title="4. 使用“site:”限定特定网站"></a>4. 使用“site:”限定特定网站</h3><p><strong>用法</strong>：在搜索词前加上“site:”，然后是网站地址。</p>
<p><strong>例子</strong>：<code>site:example.com 搜索词</code></p>
<p><strong>说明</strong>：这样可以限制搜索结果只来自指定的网站。适合查找某个特定网站上的信息。</p>
<h3 id="5-使用“filetype-”搜索特定格式文件"><a href="#5-使用“filetype-”搜索特定格式文件" class="headerlink" title="5. 使用“filetype:”搜索特定格式文件"></a>5. 使用“filetype:”搜索特定格式文件</h3><p><strong>用法</strong>：在搜索词后加上“filetype:”，然后是文件格式。</p>
<p><strong>例子</strong>：<code>filetype:pdf 经济学报告</code></p>
<p><strong>说明</strong>：只返回指定格式的文件，例如 PDF、DOCX 等。非常适合寻找特定类型的文档。</p>
<h3 id="6-使用“OR”进行多选查询"><a href="#6-使用“OR”进行多选查询" class="headerlink" title="6. 使用“OR”进行多选查询"></a>6. 使用“OR”进行多选查询</h3><p><strong>用法</strong>：用“OR”连接不同的搜索词。</p>
<p><strong>例子</strong>：<code>健康 OR 医疗</code></p>
<p><strong>说明</strong>：此搜索会返回包含任一关键词的结果。如果你对两个相关主题都感兴趣，可以使用这个技巧。</p>
<h3 id="7-使用“intitle-”限定标题中的词"><a href="#7-使用“intitle-”限定标题中的词" class="headerlink" title="7. 使用“intitle:”限定标题中的词"></a>7. 使用“intitle:”限定标题中的词</h3><p><strong>用法</strong>：在搜索词前加上“intitle:”。</p>
<p><strong>例子</strong>：<code>intitle:科技 新闻</code></p>
<p><strong>说明</strong>：只返回标题中包含指定词的网页。适用于寻找特定标题的文章或网页。</p>
<h3 id="8-使用“related-”寻找相关网站"><a href="#8-使用“related-”寻找相关网站" class="headerlink" title="8. 使用“related:”寻找相关网站"></a>8. 使用“related:”寻找相关网站</h3><p><strong>用法</strong>：在搜索词前加上“related:”。</p>
<p><strong>例子</strong>：<code>related:cnn.com</code></p>
<p><strong>说明</strong>：找到与指定网站类似的其他网站。适合寻找与某个网站内容相似的资源。</p>
<h3 id="9-使用“define-”查找词汇定义"><a href="#9-使用“define-”查找词汇定义" class="headerlink" title="9. 使用“define:”查找词汇定义"></a>9. 使用“define:”查找词汇定义</h3><p><strong>用法</strong>：在搜索词前加上“define:”。</p>
<p><strong>例子</strong>：<code>define:人工智能</code></p>
<p><strong>说明</strong>：快速获取某个词汇的定义。适合查找不熟悉的词汇或术语的含义。</p>
<h3 id="10-使用“cache-”查看缓存页面"><a href="#10-使用“cache-”查看缓存页面" class="headerlink" title="10. 使用“cache:”查看缓存页面"></a>10. 使用“cache:”查看缓存页面</h3><p><strong>用法</strong>：在网址前加上“cache:”。</p>
<p><strong>例子</strong>：<code>cache:example.com</code></p>
<p><strong>说明</strong>：查看某个网页的最新缓存版本。如果网站无法访问或内容被修改，可以查看之前的版本。</p>
<h3 id="11-使用“-”查找词组的变体"><a href="#11-使用“-”查找词组的变体" class="headerlink" title="11. 使用“*”查找词组的变体"></a>11. 使用“*”查找词组的变体</h3><p><strong>用法</strong>：在词组中使用星号（*）。</p>
<p><strong>例子</strong>：<code>搜索*技巧</code></p>
<p><strong>说明</strong>：星号表示任何词，这样可以找到包含“搜索”及其变体的所有结果。适合寻找相关主题的多样性。</p>
<h3 id="12-限制时间范围"><a href="#12-限制时间范围" class="headerlink" title="12. 限制时间范围"></a>12. 限制时间范围</h3><p><strong>用法</strong>：在 Google 搜索工具中选择时间范围，如“过去24小时”、“过去一周”等。或者使用<code>:before</code>  <code>:after</code> 指令，后面跟日期。</p>
<p><strong>例子</strong>：在搜索结果页面中选择“工具”&gt;“任何时间”&gt;“过去24小时”。</p>
<blockquote>
<p>cpp modules :before 2018</p>
</blockquote>
<p><strong>说明</strong>：限制搜索结果的时间范围，可以帮助你找到最新的信息或按时间排序的结果。返回2018年之前的信息。</p>
<h3 id="13-社交媒体搜索"><a href="#13-社交媒体搜索" class="headerlink" title="13.社交媒体搜索"></a>13.社交媒体搜索</h3><p><strong>用法</strong>：如果你想在社交媒体上搜索某个关键词，那么可以使用 <code>@</code> 后跟社交媒体的名字来进行搜索</p>
<p><strong>例子</strong>： <code>cpp modules @twitter</code> 或者 <code>cpp modules @reddit</code>, 可以把 <code>@</code> 理解成是 <code>:site</code> 指令的简化版本.</p>
<p><strong>说明</strong>：只是社交媒体(social media)的定义比较含糊, Google没有给出具体的说明，但是比较有名的社交媒体都是支持的.</p>
<p>这些技巧可以显著提高你的搜索效率，使你能够更快、更准确地找到需要的信息。根据你的需求，灵活运用这些技巧，可以帮助你更有效地使用 Google 搜索。</p>
]]></content>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>test gist embed</title>
    <url>//posts/8a54c5ff/</url>
    <content><![CDATA[<h3 id="TestGist"><a href="#TestGist" class="headerlink" title="TestGist"></a>TestGist</h3><script src="https://gist.github.com/vestjin/0bb38efbb06cfc962f2b7b25087a05e4.js"></script>

]]></content>
  </entry>
  <entry>
    <title>how to ask</title>
    <url>//posts/77ccf015/</url>
    <content><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a></p>
<p><strong>How To Ask Questions The Smart Way</strong></p>
<p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p>
<p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p>
<p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr/faqs/smart-questions.html</a></p>
<p>Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p>
<p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin</a> 所翻译版本的最新翻译；</p>
<p>协助指出翻译问题，<strong>请<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/issues/new">发 issue</a>，或直接<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/compare">发 pull request</a> 给我。</strong></p>
<p>本文另有<a href="README.md">繁體中文版</a>。</p>
<h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="history.md">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#声明">声明</a></li>
<li><a href="#简介">简介</a></li>
<li><a href="#在提问之前">在提问之前</a></li>
<li><a href="#当你提问时">当你提问时</a><ul>
<li><a href="#慎选提问的论坛">慎选提问的论坛</a></li>
<li><a href="#stack-overflow">Stack Overflow</a></li>
<li><a href="#网站和-irc-论坛">网站和 IRC 论坛</a></li>
<li><a href="#第二步使用项目邮件列表">第二步，使用项目邮件列表</a></li>
<li><a href="#使用有意义且描述明确的标题">使用有意义且描述明确的标题</a></li>
<li><a href="#使问题容易回复">使问题容易回复</a></li>
<li><a href="#使用清晰、正确、精准且合乎语法的语句">使用清晰、正确、精准且合乎语法的语句</a></li>
<li><a href="#使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</a></li>
<li><a href="#精确地描述问题并言之有物">精确地描述问题并言之有物</a></li>
<li><a href="#话不在多而在精">话不在多而在精</a></li>
<li><a href="#别动辄声称找到-bug">别动辄声称找到 Bug</a></li>
<li><a href="#低声下气不能代替你的功课">低声下气不能代替你的功课</a></li>
<li><a href="#描述问题症状而非你的猜测">描述问题症状而非你的猜测</a></li>
<li><a href="#按发生时间先后列出问题症状">按发生时间先后列出问题症状</a></li>
<li><a href="#描述目标而不是过程">描述目标而不是过程</a></li>
<li><a href="#别要求使用私人电邮回复">别要求使用私人电邮回复</a></li>
<li><a href="#清楚明确地表达你的问题以及需求">清楚明确地表达你的问题以及需求</a></li>
<li><a href="#询问有关代码的问题时">询问有关代码的问题时</a></li>
<li><a href="#别把自己家庭作业的问题贴上来">别把自己家庭作业的问题贴上来</a></li>
<li><a href="#去掉无意义的提问句">去掉无意义的提问句</a></li>
<li><a href="#即使你很急也不要在标题写紧急">即使你很急也不要在标题写<code>紧急</code></a></li>
<li><a href="#礼多人不怪而且有时还很有帮助">礼多人不怪，而且有时还很有帮助</a></li>
<li><a href="#问题解决后加个简短的补充说明">问题解决后，加个简短的补充说明</a></li>
</ul>
</li>
<li><a href="#如何解读答案">如何解读答案</a><ul>
<li><a href="#rtfm-和-stfw如何知道你已完全搞砸了">RTFM 和 STFW：如何知道你已完全搞砸了</a></li>
<li><a href="#如果还是搞不懂">如果还是搞不懂</a></li>
<li><a href="#处理无礼的回应">处理无礼的回应</a></li>
</ul>
</li>
<li><a href="#如何避免扮演失败者">如何避免扮演失败者</a></li>
<li><a href="#不该问的问题">不该问的问题</a></li>
<li><a href="#好问题与蠢问题">好问题与蠢问题</a></li>
<li><a href="#如果得不到回答">如果得不到回答</a></li>
<li><a href="#如何更好地回答问题">如何更好地回答问题</a></li>
<li><a href="#相关资源">相关资源</a></li>
<li><a href="#鸣谢">鸣谢</a></li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们网站的帮助文档中链接了本指南。这很好，这正是我们想要的用途。但如果你是该项目管理员并试图创建指向本指南的超链接，请在超链接附近的显著位置注明：</p>
<p><strong>本指南不提供此项目的实际支持服务！</strong></p>
<p>我们已经深刻领教到缺少上述声明所带来的痛苦：我们将不停地被那些认为发布这本指南就意味着有责任解决世上所有技术问题的傻瓜苦苦纠缠。</p>
<p>如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些傻瓜之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，你所提技术问题的解答的好坏, 很大程度上取决于你提问的方式与此问题的难度。本指南将教你如何正确地提问以获得你满意的答案。</p>
<p>现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件<strong>好事</strong>；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。</p>
<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。</p>
<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>
<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（loser）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们认可这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们只为那些真正有兴趣并愿意积极参与问题解决的人调整回答问题的风格。这点不会变，也不该变：否则，我们就是在最擅长的事情上降低效率。</p>
<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答<code>赢家（winner）</code>的问题。</p>
<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>
<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>
<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>
<p>（欢迎对本指南提出改进意见。你可以把你的建议发送至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p>
<h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>
<ol>
<li>尝试在你准备提问的论坛的旧文章中搜索答案。</li>
<li>尝试上网搜索以找到答案。</li>
<li>尝试阅读手册以找到答案。</li>
<li>尝试阅读常见问题文件（FAQ）以找到答案。</li>
<li>尝试自己检查或试验以找到答案。</li>
<li>向你身边的强者朋友打听以找到答案。</li>
<li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li>
</ol>
<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>
<p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>
<p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐得舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>
<p>准备好你的问题，再将问题仔细地思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>
<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>，一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>
<p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动地从他人处索取知识。</p>
<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>
<h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>
<ul>
<li>在与主题不合的论坛上贴出你的问题。</li>
<li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li>
<li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li>
<li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li>
</ul>
<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p>
<p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p>
<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p>
<p>在选择论坛、新闻群组或邮件列表时，别太相信它的名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>
<p>别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p>
<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p>
<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者由于涌入其私人邮箱的大量不堪忍受的无用邮件而不再提供支持。</p>
<h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<em>然后</em>在 Stack Exchange 问。</p>
<p>近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p>
<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的几率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>
<p>如果你还是找不到任何对你的问题有用的内容，请把你的问题发在与它最相关的网站上。提问的时候请善用格式化工具，尤其注意为代码添加格式，并且添加相关的标签（特别是编程语言、操作系统或库/包的名称）。当有人要求你提供更多相关信息时，请编辑你的贴子来补充它们[译注：而不是发一个回帖或回答！]。如果你觉得一个答案对你有帮助，点击向上的箭头来为它投票；如果一个答案提供了问题的正确解决方案，点击投票按钮下方的对勾来将它标记为正解。</p>
<p>Stack Exchange 已经成长到<a href="https://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p>
<ul>
<li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li>
<li>Stack Overflow 是问写程序有关的问题。</li>
<li>Server Fault 是问服务器和网管相关的问题。</li>
</ul>
<h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的用户群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表），这些都是开始提问的好地方，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p>
<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复“使用<strong>我们的</strong>版本”。</p>
<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p>
<p>通过论坛或 IRC 频道来提供用户支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>
<p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p>
<h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p>
<ul>
<li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，那这也不能成为骚扰个别开发者的理由。</li>
<li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li>
<li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li>
<li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li>
</ul>
<p>如果一个项目既有“用户”也有“开发者”（或“黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>
<p>然而，如果你<strong>确信</strong>你的问题很特别，而且在“用户”列表或论坛中几天都没有回复，可以试试前往“开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p>
<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>
<h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p>
<p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>
<blockquote>
<p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p>
<p>聪明问题：X.org 6.8.1 的鼠标指针会变形，某牌显卡 MV1005 芯片组。</p>
<p>更聪明问题：X.org 6.8.1 的鼠标指针，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p>
</blockquote>
<p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标指针或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p>
<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>
<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p>
<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许用户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p>
<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p>
<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>
<h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>
<h3 id="使用清晰、正确、精准且合乎语法的语句"><a href="#使用清晰、正确、精准且合乎语法的语句" class="headerlink" title="使用清晰、正确、精准且合乎语法的语句"></a><a name="使用清晰、正确、精准且合乎语法的语句">使用清晰、正确、精准且合乎语法的语句</a></h3><p>我们从经验中发现，粗心的提问者通常也会粗心地写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p>
<p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it's</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p>
<p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/小白">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/火星文">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂的语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p>
<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p>
<blockquote>
<p>English is not my native language; please excuse typing errors.</p>
</blockquote>
<ul>
<li>英文不是我的母语，请原谅我的错字或语法。</li>
</ul>
<blockquote>
<p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p>
</blockquote>
<ul>
<li>如果你说<strong>某语言</strong>，请向我发电邮/私信；</li>
<li>我需要有人协助我翻译我的问题。</li>
</ul>
<blockquote>
<p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p>
</blockquote>
<ul>
<li>我对技术名词很熟悉，但对于俗语或是特别用法不甚了解。</li>
</ul>
<blockquote>
<p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p>
</blockquote>
<ul>
<li>我把我的问题用<strong>某语言</strong>和英文写出来。</li>
<li>如果你只用其中的一种语言回答，我会乐意将回复翻译成为你使用的语言。</li>
</ul>
<h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>
<ul>
<li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li>
<li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li>
<li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li>
<li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li>
<li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li>
<li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li>
<li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li>
<li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li>
</ul>
<p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p>
<h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul>
<li>仔细、清楚地描述你的问题或 Bug 的症状。</li>
<li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li>
<li>描述在提问前你是怎样去研究和理解这个问题的。</li>
<li>描述在提问前为确定问题而采取的诊断步骤。</li>
<li>描述最近做过什么可能相关的硬件或软件变更。</li>
<li>尽可能地提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>
</ul>
<p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能提出的问题回答一遍。</p>
<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>
<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效地报告Bug</a>》的出色文章。强力推荐你也读一读。</p>
<h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>
<h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p>
<p>请记得，还有其他许多用户没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#在提问之前">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>
<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p>
<p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p>
<h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个失败者，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p>
<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p>
<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p>
<h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…</p>
</blockquote>
<p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方地展示给我们看吧！</p>
<h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p>
<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>
<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p>
<h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。</p>
</blockquote>
<p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>
<h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p>
<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。</p>
<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p>
<h3 id="清楚明确地表达你的问题以及需求"><a href="#清楚明确地表达你的问题以及需求" class="headerlink" title="清楚明确地表达你的问题以及需求"></a>清楚明确地表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你获得有用的答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好地理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>
<h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>如果没有提示别人应该从何入手，别要求他人帮你调试有问题的代码。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p>
<p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#话不在多而在精">话不在多而在精</a>一节）。</p>
<p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做是一个好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>
<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>
<h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的<strong>用户</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的用户也许仍会给你一些提示。</p>
<h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p>
<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>
<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p>
<p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="https://strcat.de/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p>
<h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p>
<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>
<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛茸茸的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛茸茸的小海豹很重要。</p>
<p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p>
<h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p>
<p>坦白说，这一点并没有比使用清晰、正确、精准且合乎语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p>
<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>
<p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p>
<h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>
<h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="rtfm"></a></p>
<h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM（Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>
<p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <strong><a href="http://lmgtfy.com/">Google 是你的朋友</a></strong>！）</p>
<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>
<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为：</p>
<ul>
<li><strong>你需要的信息非常容易获得</strong>；</li>
<li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li>
</ul>
<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>
<h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p>
<p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>
<h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直截了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）</p>
<p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p>
<p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p>
<h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中，你以本指南所描述的或类似的方式，可能会有那么几次搞砸了。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被言语攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、不去关马桶盖等等。相反地，你该这么做：</p>
<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>
<p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p>
<p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p>
<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>
<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p>
<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>
<h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>
<p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p>
<p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p>
<p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p>
<p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？</a></p>
<p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p>
<p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p>
<p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p>
<hr>
<p><a id="q1"></a></p>
<blockquote>
<p>问题：我能在哪找到 X 程序或 X 资源？</p>
</blockquote>
<p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="https://www.google.com">Google</a> 吗？</p>
<p><a id="q2"></a></p>
<blockquote>
<p>问题：我怎样用 X 做 Y？</p>
</blockquote>
<p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>
<p><a id="q3"></a></p>
<blockquote>
<p>问题：如何设定我的 shell 提示？？</p>
</blockquote>
<p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p>
<p><a id="q4"></a></p>
<blockquote>
<p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？</p>
</blockquote>
<p>回答：试试看就知道了。如果你试过，你就知道了答案，就不用浪费我的时间了。</p>
<p><a id="q5"></a></p>
<blockquote>
<p>问题：我的{程序/设定/SQL 语句}没有用</p>
</blockquote>
<p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>
<ul>
<li>你还有什么要补充的吗？</li>
<li>真糟糕，希望你能搞定。</li>
<li>这关我屁事？</li>
</ul>
<p><a id="q6"></a></p>
<blockquote>
<p>问题：我的 Windows 电脑有问题，你能帮我吗？</p>
</blockquote>
<p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p>
<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题，只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>
<p><a id="q7"></a></p>
<blockquote>
<p>问题：我的程序不会动了，我认为系统工具 X 有问题</p>
</blockquote>
<p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p>
<p><a id="q8"></a></p>
<blockquote>
<p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p>
</blockquote>
<p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到用户群组的清单）。</p>
<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地用户群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p>
<p><a id="q9"></a></p>
<blockquote>
<p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p>
</blockquote>
<p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>
<h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p>
</blockquote>
<p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p>
</blockquote>
<p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p>
</blockquote>
<p>他觉得都是别人的错，这个傲慢自大的提问者。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p>
</blockquote>
<p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我的主机板有问题了，谁来帮我？</p>
</blockquote>
<p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p>
</blockquote>
<p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p>
<p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p>
<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p>
<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>
<p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候，一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p>
<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p>
<h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>
<p>总的来说，简单地重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>
<p>有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>
<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>
<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p>
<h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点。</strong> 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p><strong>对初犯者私下回复。</strong> 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p>
<p><strong>如果你不确定，一定要说出来！</strong> 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p><strong>如果帮不了忙，也别妨碍他。</strong> 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p>
<p><strong>试探性的反问以引出更多的细节。</strong> 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，但能给出文档的链接（即使只是建议个 Google 搜索关键词）会更好。</p>
<p><strong>如果你决定回答，就请给出好的答案。</strong> 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p>
<p><strong>正面地回答问题！</strong> 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p>
<p><strong>帮助你的社区从问题中学习。</strong> 当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p>
<p>如果你在研究一番后才作出了回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>
<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p>
<p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>siwei</title>
    <url>//posts/4324ed40/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>思维方式</category>
      </categories>
  </entry>
  <entry>
    <title>the first</title>
    <url>//posts/c2394247/</url>
    <content><![CDATA[<h1 id="口袋妖怪属性克制关系"><a href="#口袋妖怪属性克制关系" class="headerlink" title="口袋妖怪属性克制关系"></a>口袋妖怪属性克制关系</h1><p><big>==一般系==</big> : 对任何属性不克制，对岩石、钢系效果减半,对幽灵无效果,被格斗系克制</p>
<p><big>==格斗系==</big> ：克制一般、岩石、钢、冰、恶属性,对飞行、毒、虫、超能系效果减半,对幽灵无效果</p>
<p><big>==飞行系==</big> ： 克制格斗、虫、草系,对岩石、钢、电系效果减半</p>
<p><big>==毒系==</big> : 克制草系,对毒、地面、岩石、幽灵系效果减半,对钢系无效果</p>
<p><big>==地面系==</big>  克制毒、岩石、钢、火、电系,对草系效果减半,对飞行系无效果</p>
<p><big>==岩石系==</big>  克制飞行、虫、火、冰系,对格斗、地面、钢系效果减半</p>
<p><big>==虫系==</big>   克制草、超能、恶系,对格斗、飞行、毒、幽灵、钢、火系效果减半</p>
<p><big>==幽灵系==</big>  克制幽灵、超能系,对钢、恶系效果减半,对一般系无效</p>
<p><big>==钢系==</big>  克制岩石、冰系,对钢、火、水、电系效果减半</p>
<p><big>==火系==</big>   克制虫、钢、草、冰系,对岩石、火、水、龙系效果减半</p>
<p><big>==水系==</big>   克制地面、岩石、火系,对水、草、龙系效果减半</p>
<p><big>==草系== </big> 克制地面、岩石、水系,对飞行、毒、虫、钢、火、草、龙系效果减半</p>
<p><big>==电系==</big>   克制飞行、水系,对草、电、龙系效果减半，对地面系无效果</p>
<p><big>==超能系==</big>   克制格斗、毒系,对钢、超能系效果减半,对恶系无效果</p>
<p><big>==冰系==</big>   克制飞行、地面、草、龙系,对钢、火、水、冰系效果减半</p>
<p><big>==龙系==</big>   克制龙系</p>
<p><big>==幽灵系==</big>  克制幽灵、超能系,对格斗、钢、恶系效果减半</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>word</title>
    <url>//posts/c3f17511/</url>
    <content><![CDATA[<hr>
<hr>
<h3 id="对勾方块"><a href="#对勾方块" class="headerlink" title="对勾方块"></a>对勾方块</h3><p>方法一：在文档中输入数字“2611”，然后按下组合键 Alt + X，数字会自动转换为方框对勾符号（☑）<br>        方法二：按住 Alt 键，然后在数字小键盘上输入“9745”，松开 Alt 键后，方框对勾符号会出现 </p>
<h3 id="快速中英文字符格式设置"><a href="#快速中英文字符格式设置" class="headerlink" title="快速中英文字符格式设置"></a>快速中英文字符格式设置</h3><p>在Word文档中快速设置中文和英文不同格式，可以通过以下步骤实现：</p>
<p>方法一：使用样式</p>
<ol>
<li><strong>创建样式</strong>：<ul>
<li>点击“开始”选项卡，选择“样式”组中的“新建样式”。</li>
<li>设置中文样式（如字体、字号等），命名为“中文样式”。</li>
<li>再次新建样式，设置英文样式，命名为“英文样式”。</li>
</ul>
</li>
<li><strong>应用样式</strong>：<ul>
<li>选中中文文本，应用“中文样式”。</li>
<li>选中英文文本，应用“英文样式”。</li>
</ul>
</li>
</ol>
<p>方法二：使用“查找和替换”功能</p>
<ol>
<li><strong>查找英文文本</strong>：<ul>
<li>按 <code>Ctrl + H</code> 打开“查找和替换”对话框。</li>
<li>在“查找内容”输入 <code>[A-Za-z]</code>，勾选“使用通配符”。</li>
</ul>
</li>
<li><strong>设置英文格式</strong>：<ul>
<li>点击“更多”，选择“格式”中的“字体”，设置英文格式。</li>
<li>点击“全部替换”。</li>
</ul>
</li>
<li><strong>设置中文格式</strong>：<ul>
<li>查找内容留空，直接设置中文格式，点击“全部替换”。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>office</category>
      </categories>
  </entry>
  <entry>
    <title>xinli</title>
    <url>//posts/f6c1ffe7/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>心理</category>
      </categories>
  </entry>
  <entry>
    <title>《蛊真人》语录</title>
    <url>//posts/1eb878e0/</url>
    <content><![CDATA[<h1 id="《蛊真人》经典语录"><a href="#《蛊真人》经典语录" class="headerlink" title="《蛊真人》经典语录"></a>《蛊真人》经典语录</h1><blockquote>
<p>简介：人是万物之灵，蛊是天地真精。 三观不正，魔头重生。 昔日旧梦，同名新作。 一个穿越者不断重生的故事。 一个养蛊、炼蛊、用蛊的奇特世界。 春秋蝉、月光蛊、酒虫、一气金光虫、青丝蛊、希望蛊…… 还有一个纵情纵横的绝世大魔头！</p>
</blockquote>
<p><a href="/downloads/蛊真人.epub">下载 蛊真人小说</a></p>
<p><a href="/downloads/《人祖传》横版精排带目录版.pdf">下载 人祖传</a></p>
<p>第六节：未来的路，会很精彩</p>
<p>◆ 人的一生之精彩，在于自己追逐梦想的过程。不必苛求旁人的不失望或者喜欢。走自己的路，让旁人失望和不喜欢去吧！去吧，未来的路，会很精彩呢。”</p>
<p>第二十一节：怎么会是哥哥得了这第一？</p>
<p>原文：而是古月方源，他的哥哥！<br>那个丙等资质的人！<br>那个开窍大典之后，就颓靡堕落的人！<br>那个整天在课堂上呼呼大睡的人！<br>那个喝酒烂醉，夜不归宿的人！<br>那个欺负了沈翠，打了自己两个巴掌，还取了他身上全部元石的人！<br>那个以前一直压着他，就像是阴影盘踞在他心中的人！<br>“怎么会这样？这没有可能啊！”一时间方正在心中咆哮，“我这么努力，他却整天喝酒喝得烂醉，结果却是他得了第一，这还有公理吗？为什么？为什么？！”  </p>
<p>第二十六节：一切组织的本质</p>
<p>◆ 所谓的荣耀，不过是上位者要调动下属积极性的价值观工具罢了。究其根本，只是一层虚幻的光环，有个屁用！五百年的人生经历，早已经让方源清楚其中的奥秘。“不论是家族、门派还是魔教，不论是这个世界，还是地球，任何的组织都是这样。设立高低位置，明确晋升法度，让组织中人从低位不断地往上爬。因为追逐利润是人之本性，而权位常常使人产生自己高人一等，自己活着比常人更有价值的错觉。”“权利二字，就像是吊在毛驴前面的胡萝卜，人们的欲望被它激发，一个个的人为此不断钻营。爬上一层位置，还有更高一层。殊不知，在钻营的过程中，他们的劳动力被压榨，产生的价值被上位者剥削。”“一切的组织，只要有统属关系，都是为上位者服务的。所谓的班头、副班头，就是一根最小的胡萝卜，引诱其他人陷入家族的体制之内。而上位者为了防止下位者洞察这个真相，常常统一价值观，明确荣耀、功勋等等概念，设立高低权位、不等称的福利，或者动用宗教来统治人心。”</p>
<p>◆ 这就是真相啊，可惜世间大多数人都不明白，傻乎乎地为别人卖力卖命。而世界上所有一切的组织，究其最根本的本质，都只有一个，那就是——资源再分配，越高层享受越多资源。”</p>
<p>第三十三节：你骂吧</p>
<p>◆ 这就是人的可悲之处啊。”方源趺坐着，看着门外傻傻站着的漠颜，心中感慨，“有的时候，阻止人行动的，往往不是物质上的难题，而是心灵的枷锁。”论修为，方源此时绝不是漠颜的对手。但是她空有二转修为，却只能眼睁睁地看着方源，而不敢动手。她距离方源只有几步之远，房门洞开，毫无阻碍。真正牵绊她手脚的，是她自己。“人千方百计的学习，来认知世界，知晓规则，就是要利用规则。若是被规则牵绊，反而因为自身所学而束手束脚，这才是真正的悲剧。</p>
<p>第二十九节：不择手段</p>
<p>◆ 方源并不嗜杀，他只是把杀当做一种手段。每次动手，他都有明确的目标。什么样的手段，是能让他达到目标的捷径，他就用哪一个。换句话说，他行事不择手段。</p>
<p>第三十八节：魔头在光明中行走</p>
<p>◆ 每个人都有每个人的规矩，每一行业都有行业的规矩，每个社会群体都有各自的规矩。只要洞彻这其中的规矩，就能旁观者清。去黑暗而得光明，在此中周旋，而游刃有余。”</p>
<p>第四十八节：有些可爱</p>
<p>◆ 经验到底不是万能的。任何思想中的力量，都需要物质的基础，才有发挥的介质。”</p>
<p>第四十九节：不愁方源脱离掌控</p>
<p>◆ 只要怕，只要冲动，就容易操纵，不会脱离掌控。但是方源不是。他冷静，不动声色，不把师长放在眼中。他不敬畏！</p>
<p>第五十二节：我的解释你只能接受</p>
<p>◆ 成王败寇，世人都注重结果。没有人会指责一个如此优秀的后生晚辈。学堂家老更不能对他有任何的惩处。你学堂是干什么的？就是为了培养优秀的蛊师，为家族注入新血。出现了如此优秀的少年，你学堂家老还要打压，那就是你的失职！就好像是一个学生考出了好成绩，作为师长就得去表扬鼓励，而非惩罚批评。一个因为学生成绩优异而去批评惩罚的老师，从来都不会被认可的。</p>
<p>第五十四节：我可是班头啊！</p>
<p>◆ 越了解方源，他就越理解方源。</p>
<p>第五十九节：不管三转四转，都是猴子</p>
<p>◆ 高明的谎言，都是真真假假，假中有真，真中带假。</p>
<p>第六十一节：草绳上的人生</p>
<p>◆ 有一段时间，他空有真元，毫无蛊虫，跟凡人一般，连生活都困难。万般无奈之下，就学会了搓草绳编织草鞋、草帽等等贩卖，换取一些元石碎屑勉强糊口。此时搓起草绳，方源心中的记忆又浮现出来。那时的苦涩和煎熬，化为了此刻他嘴角无声的笑。腿弯下野兔不时地挣扎，铃铛叮啷作响。</p>
<p>第七十一节：力可扛猪思低调</p>
<p>◆ 有些事情虽然麻烦，但是最好都做了。在人的一生当中，往往害怕麻烦而不积极解决的人，往往最后面临着相当麻烦的处境。这个道理，方源前世就懂了。</p>
<p>第七十二节：任何组织都需要忠诚</p>
<p>◆ 这个印象可不好，等于就是打上了不忠诚的标签。但家族需要忠诚，事实上，任何的组织都需要忠诚。不论哪个世界，忠诚都是大张旗鼓宣扬的价值观之一。对家族忠诚，对国家忠诚，对领导忠诚，对爱情忠诚，对友谊忠诚等等。</p>
<p>第七十五节：魔道的觉悟！</p>
<p>◆ “我能杀别人，别人自然也能杀我。这也没有什么。”方源不禁轻笑出声。这个世界上，谁都有权利活着，谁都有机会死去。杀人者，人恒杀之。既然自己杀了人，也就要有被杀的准备。若是就这样被杀，那么死就死吧，没有什么大不了的，也绝没有后悔。这都是自己选择的路。</p>
<p>◆ 方源一生唯谨慎，哪怕是有底牌，只要是胜算小，他也会选择尽量避免交战。他喜欢掌控局面，用各种手段尽量将胜率放大到极限。他最喜欢打的，就是必胜的战斗。只有到了万不得已的时候，他才会冒险激战。因此他常做的事情，就是欺凌弱小，掠夺资源，不断强大。强大到超越原来敌人的程度，再回来找回场子，也就是继续欺凌弱小。这没有什么可耻，那些为了证明自己勇敢，而去主动挑战，冒着生命危险和强敌死磕的，才是真正的蠢货。但偏偏这个价值观一直得到宣扬表彰，这是因为任何的组织，都需要个体的不断牺牲，来维护组织高层的利益。只要想想就知道，生存才是一切活动的前提。</p>
<p>第八十节：战力大涨</p>
<p>◆ 有人说，生活每一次磨难，都是一笔金子般的财富。</p>
<p>第八十一节：二转初阶！</p>
<p>◆ 幸福不能教给人生活的真理，往往只有痛苦才能。</p>
<p>第八十四节：狠狠地踩踏！</p>
<p>◆ 这就是经验的差距，这就是底蕴的区别！</p>
<p>◆ 他可以不靠族长，不靠家老，不靠亲人，不靠朋友，不靠蛊虫。他从来都只靠自己！这个世界上，也从来只有自己才最靠得住！！什么同伴、战友，不过是弱者掩饰无能，用来期待别人拯救的借口罢了。</p>
<p>第八十六节：怀疑和试探</p>
<p>◆ 对别人狠，容易。对自己狠，困难。</p>
<p>第八十七节：态度就是心的面具</p>
<p>◆ 态度就是心的面具</p>
<p>◆ 无心的人，是戴不上态度面具的。换句话讲，有心的人，态度就是一张面具。</p>
<p>第九十节：不过是些许风霜罢了</p>
<p>◆ 想到这里，方源慢慢地停下脚步。不知不觉间，他已经走到窗边，于是信手推开了窗户。隔牖风惊竹，开窗雪满山。月光下，雪如白玉，铺得眼前世界如水晶宫殿，纤尘不染。雪光映照在方源年轻的脸上，他面色沉静，双眉舒展，一对眸子好似月下幽泉。寒风扑面而来，少年忽的一笑：“不过是些许风霜罢了。”</p>
<p>第九十七节：魔头横行</p>
<p>◆ 不过，死亡之下，不管是美好的事物，还是丑陋的事物，都是一视同仁的。</p>
<p>◆ 辱骂于我何加焉？想骂就骂吧，骂了能怎样？心胸浅薄之人，常会因为咒骂而愤怒，因为夸赞而喜悦。但其实这些都不过是旁人对你的看法罢了。因为旁人的看法，而活着的人，注定是可怜的人。</p>
<p>第九十八节：炼蛊的艰难</p>
<p>◆ 暗事易行，明事难成</p>
<p>◆ 行事越光明正大，就越让人看透，阻止起来就越容易。反观暗中行事，隐藏底牌，就让人摸不清情况，不能对症下药了。</p>
<p>第一百零一节：心老人便老</p>
<p>◆ 不管是哪个世界，真正最靠得住的人只有一个，那就是自己。只是这世人，常常软弱。总耐不住寂寞，总受不了孤独，喜欢追寻亲情、友情、爱情，来填充自己的心灵。迷恋集体，害怕独处。一旦受到挫折，就躲到集体当中去，向亲朋诉苦，向好友倾诉，不敢孤独地面对恐惧和失败。有了痛苦就忙于分摊，有了快乐就急于炫耀。</p>
<p>◆ 这个世界上，总会有一群“老”人。他们四处兜售着社会的经验，把他人的理想当做幻想，把他人的热情当做轻狂，把他人的坚持当做桀骜。他们常在教训后辈中，寻找自己的存在感和优越感。</p>
<p>◆ 这古月冻土真是可悲的人。被规矩束缚着，明明水囊近在咫尺，却不敢强抢。如此没有胆量，又想争夺利益，怎么可能成功？富贵险中求，不管哪个世界，想要得到什么，必定要付出代价的。</p>
<p>◆ 不是为了争这一时长短，而是想迈步最强之巅峰。这种路人，只要不碍着此事，任由其在一旁咆哮，他方源踩都不屑踩。</p>
<p>第一百零二节：冬风吹来春天</p>
<p>◆ 这就是入了体制的悲哀，身份成了桎梏行为的枷锁。</p>
<p>◆ 江湖中有规矩，其实就是一种体制。一入体制，不管任何人都是棋子，相互制约，身不由己。除非个人的力量能达到抗衡整个组织的地步，否则加入了组织，还想要无拘无束的自由，那是痴心妄想！</p>
<p>第一百零三节：野心一大，世界就小</p>
<p>◆ 野心一大，世界就小</p>
<p>◆ 恩威并施，不论哪个世界，都是上位者驭下的不二法门。这其中，威才是基础，在威凌之下，任何一点点小小的恩惠，都会被放大千万倍。</p>
<p>第一百零七节：熟能生巧掂元石，酒肆当中恶客来</p>
<p>◆ 怎么练成的这等本事？无他，熟能生巧罢了！经验的积累，有时候就能堆砌起一场奇迹。</p>
<p>◆ 这就是方源和江牙这等俗人的区别了。在方源看来，元石不过是修行的资源，是道具。一切都是为修行服务的。而江牙则将元石当成了人生追逐的目标，之所以修行就是为了赚取更多的元石。</p>
<p>第一百零八节：那双眼睛！</p>
<p>◆ 把败绩当做荣耀来宣扬，这样的人有何可惧</p>
<p>◆ 那双漠视世俗，看淡世间，高高在上的眼眸，隐藏着凡人难以企及和理解的骄傲。想不到……</p>
<p>第一百零九节：树屋藏酒虫</p>
<p>◆ 或许在地球上，会有许多人注重过程，不注重结果。但在这个世界，生活困苦艰辛，周围充满了致命的危险。胜了往往就表示活着，败了就是死去，丧失一切。胜者为王，败者为寇的理念，得到了几乎所有人的强烈认同。</p>
<p>第一百一十节：老太婆，你太嫩了！</p>
<p>◆ 人生就是这样，努力不一定有好的结果，不一定成功。但是不努力，一定是失败。魔道亦是如此，魔道中人大多都擅长披荆斩棘，勇猛精进。这在那些大多数世人眼中，就显得偏激和冒险了。</p>
<p>◆ 有时候机会就摆在眼前，只是人们主动地放弃了。我还有机会！”</p>
<p>◆ 这是一场别开生面的战斗！强大者不一定是胜利者，弱小者未必会失败。猜测和赌博，让战斗显出别样的精彩。</p>
<p>第一百一十七节：苦贝酒和吞江蟾</p>
<p>◆ 不论哪个世界上，总有一群弱者，乞讨强者的施舍，死皮赖脸又不知分寸。好像帮助他们才是强者的风范，不帮助他们就是不对的事情。弱小者就该有弱小者的样子，要么认命，卑贱如奴，要么就奋发，低调地努力。强者对弱者的帮助，只是心情好时的施舍罢了。弱者自己不努力，死皮赖脸地向强者乞讨，还一定要有个结果，纠缠不清。那么受到拒绝也是活该。甘于弱小，而不自发努力，只想向强者乞讨的人，根本就不值得同情。</p>
<p>第一百二十节：得来全不费工夫</p>
<p>◆ 什么英雄，不过是一个赞誉罢了。而赞誉和诋毁，都不过是外人对自己的看法和观念。外人对自己的看法，方源根本就不在乎。你认为你的，我自活我的。英雄？狗熊？呵呵，还不如一只苦贝来的实在</p>
<p>◆ 在体制内往上爬，无非是人挤人，人踩人。这事情若被其他人利用，对他们的前途而言，将会造成极坏的影响！</p>
<p>第一百二十二节：人生几多风雪</p>
<p>◆ 在这自然中，万物都在抗争，都在生存，并不是仅仅只有人而已。这个天地，就是用生和死来演绎精彩的大舞台啊！”</p>
<p>第一百二十三节：天地我在独行</p>
<p>◆ 。所谓的名誉，不过是他人的赞赏罢了。这把羁绊人的枷锁，不知拘拿了古往今来多少英雄豪杰。但对我而言，舍掉又有什么可惜？</p>
<p>◆ 所谓的名，只不过是一块虚荣的大饼。诱惑了多少人，羁绊了多少人，圈住了多少人。可叹可叹！</p>
<p>第一百二十六节：木魅之殇</p>
<p>◆ 方源独自站在原地，我行我素，格格不入却神色平静。他人看中勇武的名誉，但方源却嗤之以鼻，这就不由自主地，引发了众人对方源的厌恶。因为方源对名誉的蔑视，是对大众价值观的否定。否定了这种价值观，就是否定了一直以来遵循着这种价值观生活的大众。他人自然不愿意否定自身的价值，觉得自己活错了。所以自然而然地，潜意识里就开始抵制方源，排斥方源。心灵不强大的人，会被这种排斥打败，从而改变自己，使自己大众化。</p>
<p>第一百二十七节：所谓的道德和感情</p>
<p>◆ 不想被人踩，有两个途径。一个是变成强者，强大到让任何人都不敢踩。第二个是变成狗屎，让其他人都不屑踩。方源并不在乎什么狗屎、强者的名誉，他向来行事不择手段，并且只在乎结果。没有人来约斗他，这让他甚是轻松。</p>
<p>◆ 周围人鄙视、轻蔑的目光，他更是视若无睹。若是连这些目光都承受不了，他还谈什么魔道追求？</p>
<p>◆ 高层宣扬鼓吹的价值观、道德观，都不过是维护统治的工具罢了。真要被这些束缚住，还能成什么大事？踏上真正高位的人，哪一个双手不沾着血，踏着尸骨？资本家的资金原始积累，都是血腥的。任何的政治家都是肮脏的。所谓的慈善家，都是拿金钱换取社会名望的。只是成功者，大多矫饰遮掩了过往的不堪。被成功者的自传骗住的人才是蠢材。</p>
<p>◆ 其实真正禁锢一个人成就的，往往不是天资，而是思想。任何一个组织，人一生下来，就被不断地灌输价值观，不断地洗脑。要想有超凡脱俗的成就，就得打破思想上的项圈。可惜大多数人，都被项圈牢牢套着，驱策着奋力前进，并且还把这项圈当做一个荣耀的标志。</p>
<p>第一百二十八节：严冬不肃杀，何以见阳春！</p>
<p>◆ 明事难成，暗事好作。</p>
<p>◆ 月如霜满夜，刀光尤冷寒。严冬不肃杀，何以见阳春！</p>
<p>第一百三十一节：孤独是最深邃的黑暗</p>
<p>◆ 人生入戏，这是一场好戏，但是方源却丝毫没有入戏的觉悟。他反而感觉到一阵难言的孤独。无边的孤独。这并非是因为他是穿越者、重生者，身上带着不可告人的秘密的缘故。而是，每个人他（她）生来就是孤独！人就像是一座座的浮冰孤岛，在命运的海洋中漂浮流荡。人和人的相遇，就像是浮冰孤岛之间的相互碰撞，只要是碰撞，就必有影响。有时候，浮冰孤岛相互粘在了一起，以“利益”、“亲情”、“友情”、“爱情”、“仇恨”之名。但是最终，它们都将分开，孤独地走向毁灭。这就是人生的真相。可惜人们总是害怕孤独，总要贪恋热闹的人群，总不愿无所事事。因为当他们面对孤独，往往就会面对痛苦。但是一旦能直面这种痛苦，人就往往有了才华和勇气。所以，有句俗语——杰出者必孤独。“这就是孤独的滋味啊，每每品味，都更加坚定我追求魔道之决心！”方源目光闪烁着，不由地就想起人祖的故事。</p>
<p>◆ “你只需要在有星星的夜里，仰望天空，什么话都不要讲。等到天亮时，你就能得到孤独之心了。”</p>
<p>◆ ，孤独是最深邃的黑暗，而亲情的光只是一种假象。他白凝冰才不会干救人这种无聊的事情呢！</p>
<p>第一百三十二节：三步芳草</p>
<p>◆ 没有力量，空有智慧，也是无用。</p>
<p>第一百三十三节：谢谢你让我杀你</p>
<p>◆ 他懂这个人。因为这个人也是个天生的魔头。什么是魔头？将世俗摒弃，将众生漠视！被孤独包围，对感情不屑！这个人就像是方源的倒影，只是方源更深邃，而他白凝冰多了纯粹。简而言之，这就是同道中人！</p>
<p>第一百三十五节：北冥冰魄，十绝天资</p>
<p>◆ 过犹不及，人都需要喝水吃饭，但是吃喝多了，就会撑死。从另一种角度理解，不管任何世界，都没有真正的完美。没有真正完美的爱情，没有真正完美的作品。过于完美的话，就会引来毁灭。</p>
<p>第一百四十四节：牺牲常在，而信念不死</p>
<p>◆ 我对他说，一个人活着，会有千千万万的理由。你为什么活着，我回答不了，只有你自己才能够回答。自己去寻找罢。</p>
<p>◆ 当有了生死的觉悟，悲伤和痛苦就变得能够接受了。</p>
<p>第一百四十五节：都鼓励牺牲</p>
<p>◆ 任何的组织，都需要牺牲。因为资源都是有限的。虽然每时每刻，都在生产资源，但资源也总是被消耗。这样一加一减，总量仍旧是有限的。人要生存，需要衣食住行，这就是资源。蛊师要修行，需要蛊虫、元石、食料，这都是资源。要变强，就需要更多的资源。但你不牺牲，我哪里来更多的资源？死道友不死贫道！什么守护、荣耀、亲情、梦想、热血，都是给牺牲一个光明正大的理由。</p>
<p>第一百五十一节：魔性</p>
<p>◆ 方源抱臂旁观，欣赏着古月药乐的表情，不由地想到地球上一句佛语，曰：无我相，无人相，无众生相，无寿者相，红粉骷髅，白骨皮肉！</p>
<p>◆ 但在凡夫俗子的眼中，少女的死会引起他们的愤怒、仇恨和惋惜。若换做少女吃熊，他们却不会觉得有多过分。换做一个老太婆被吃，他们心中的惋惜就会大大降低。换做一个恶贯满盈的杀人凶手被吃，他们会拍手称快，反而大声叫好。其实，万物平等，天地不仁以万物为刍狗。大自然是公平的，不讲爱恨，是无情的，从不会区别对待万物。</p>
<p>第一百五十二节：晋升三转</p>
<p>◆ 若换做其他少女，死了也就死了。但古月药乐是她的亲孙女，她从小就开始培养的药脉继承人！</p>
<p>第一百六十一节：心甘情愿被剥削</p>
<p>◆ 这世界如此，地球上更是一样。“这世人几多可笑。被偷被盗白抢，稍稍有丁点损失，就反抗激烈，大呼不平。向上层贿赂，送礼送身体送贞操，却都心甘情愿。还唯恐做不到位！我今夜能收获这么多的元石，无非是借助体制之力罢了。”</p>
<p>第一百六十九节：寻路</p>
<p>◆ 方源朗声一笑，脚步放缓，以悠然沧桑的语气道：“人生匆匆百年，如梦幻泡影。人活在这个世界上是为了什么？无非是走上一遭，见证精彩罢了。我虽然不想死，但却不畏惧死亡。我已走在路上，纵死不悔。”</p>
<p>◆ 当一个人惧怕的时候，他就成了奴隶。</p>
<p>第一百七十四节：小神捕</p>
<p>◆ 红尘漩涡不由己，何朝散发弄扁舟？乘风破浪三万里，方是我辈魔道人！”</p>
<p>第一百七十八节：黑白灰</p>
<p>◆ 铁血冷幽幽叹息一声：“若男。年轻的时候，我也和你一样，认为这个世界黑的就是黑的，白的就是白的。但当你见得多了，你会发现这个世界其实是灰色的。有时候黑的能转成白的，白的能转变成黑。有的黑未必比白阴险，有的白可能罪孽更深。”</p>
<p>第一百九十五节：那就让我成魔</p>
<p>◆ “既然老天不偏爱我，师傅不宠爱我，旁人不看好我。我只有更爱我自己，我只有更看好我自己，我只有更依靠我自己。我只有更努力，我只有更冒险，我只有更奋发！只有这样，我才能有成就！但正道讲纲常，讲伦理，讲情义，讲资历，讲辈分。我这样的一个人，小人物，没有背景，没有天赋，没有资源，你说我拿什么来成功？”“走正道，我只能被剥削欺压，仰望你们这些公子，这些天才。我只能熬资历熬到我垂垂老矣，却成就微小。这就是正道啊……什么狗屁正道！”“只有成魔，摒弃伦理情义，抛弃世俗规矩，付出惨重代价，才能另辟蹊径，于荆棘当中，闯出一条属于自己的路来！所以，我就暗算了你，夺了你的血海真传，我就成魔了。哈哈，那就让我成魔吧！”那就让我成魔吧……那就让我成魔吧……</p>
<p>◆ “万丈红尘缤纷彩，天涯云水路遥长。此刻风流归天地，不胜水中明月光！”白凝冰长吟一声，淡淡一笑。</p>
<p>第二十八节：无足鸟啊，振翅高飞吧！</p>
<p>◆ 反倒是方源扯动嘴边，笑起来：“我喜欢无足鸟，你知道为什么吗？”他的笑容，着实有些渗人。“为什么？”“因为它没有鸟足，只有翅膀。因此只能飞翔。当它落地之时，就意味着它的毁灭。”孤注一掷，不飞则死！蓝色的瞳孔一扩，开始熠熠闪光。迎面的风吹得银发飘扬，白凝冰的嘴角也微微上扬：“呵呵呵……那就让我们振翅高飞吧。”</p>
<p>第二十九节：幽豹殉情</p>
<p>◆ 爱美之心，人皆有之。但成就和皮肉美色毫无相干，能有毅然割舍的心性，才是成就大业的基石。</p>
<p>第四十四节：送到嘴边的肥肉</p>
<p>◆ 守法朝朝忧闷，强梁夜夜欢歌，损人利己骑马骡，正直公平挨饿。修桥补路瞎眼，杀人放火儿多，我到西天问我佛，佛说：我也没辙！</p>
<p>◆ 哈哈，所谓体制和律法，都是压榨大众的，限制弱者的。不管哪个世界，都是弱肉强食！</p>
<p>◆ 因此，就算是法治的时代，也有无数权贵钻营体制的漏洞，逃避法律的制裁。更何况这个地方割据，靠实力说话的蛊师世界呢？</p>
<p>◆ 人被蒙蔽，往往不是因为眼前景象，而是心中枷锁。对于方源而言，如果恪守商业道德，作为正规商人，顶多只能赚个七八倍。若是稍稍用些不正当的违规手段，成为不良商贩，那就是十几倍。若是抛开职守，尽情的坑蒙拐骗，当个大奸商，那就有数十倍的利润。若是直接烧杀抢掠，连本钱都不用。无本生意，永远是最赚的！</p>
<p>第四十九节：力所能及就可心安理得</p>
<p>◆ 这就是我最欣赏你的地方了。不理智的善良，都是犯罪。你虽是凡人，却令我敬佩。张家小姐，人生之路，风雨很多，有时候路途泥泞得很，只要做到力所能及这四个字，就可以心安理得了。”</p>
<p>第七十一节：商燕飞的酬谢</p>
<p>◆ 到了他这个高度，早就明悟出来：遵守规矩不算是本事，真正的本事是破坏规矩而享受利益，却不受惩罚。真正的大本事，是破坏旧秩序，建立新规矩，一直享受利益。</p>
<p>第八十节：这就动手？！</p>
<p>◆ 他太清楚魔道蛊师的艰辛了。蛊师的修行离不开元石、蛊虫以及种种饲料。修行越高，蛊师对这方面的需求也就越高。刚开始的时候，蛊师还能依靠自身能力满足这种需求。但是越往后，都会发现需求越来越大，竞争越来越强，有时候反而连个人温饱都不能解决！魏央在一转的时候，就踏入演武场。从一转到二转，再到三转，他越来越强大，却又感到自己越来越弱小。就好像是饱学之士，知道的越多，就越会明白自己的无知。魏央越强大，就越明白自己的弱小。个体是如此的弱小，唯有相互依靠，依托于家族，才能更好的生存。</p>
<p>第八十一节：剑影蛊</p>
<p>◆ “虽然说在演武场中，生死勿论，但是……”魏央缓缓摇头，“没必要每一场都做生死拼杀。演武区说大也大，说小也小，总会碰到比你强的对手。大家抬头不见低头见，毕竟都生活在商家城里，得饶人处且饶人吧。”方源微微皱起眉头：“可是我饶了别人，别人未必饶我啊。我之前也碰到过魔道蛊师，二话不说就动手。你不动杀手，人家动杀手，我过往的经验告诉我，能下杀手就下杀手，否则夜长梦多，绝不要给敌人机会！也正因为如此，我才能活到现在。”</p>
<p>第九十节：不能阻挡我</p>
<p>◆ 一个生命，最高的境界就是永生，最大的欲望就是永生。什么财富，不过是收集癖。什么男女，不过是原始的性欲。什么名声，不过是他人说的屁话，带着腐败的味道！”</p>
<p>◆ “财富、美色、名声、地位，追逐这些的人，简直是鼠目寸光。地球上是没有办法，每个人都必死无疑，只能追求这些东西，不然生命就无趣了。但在这个世界，元气充沛，有永生的可能为什么不去追逐？”</p>
<p>◆ 为了永生，财富、美色、名声、地位，都可以拿来利用，也都可以舍弃！为了永生，畏惧不能阻挡我，我将勇往直前！为了永生，懒惰不能阻挡我，我不会有一刻懈怠！为了永生，疼痛不能阻挡我，神魔不能阻挡我，天地也不能阻挡我！”</p>
<p>第九十一节：方源vs李好（上）</p>
<p>◆ 每逢重要的战斗，魏央都会过来观战。方源明白，他是在替自己掠阵。一部分原因，是商家有招揽意图，另一部分原因……是他真正将方源，当做兄弟对待！人和人之间就是这样奇怪。有的人相处数十年，都不交心。有的人只是一次谈话，就相交莫逆。魏央的情绪，方源了解。他是从方源身上，看到了自己昔日的影子。这种强烈的认同感，以及方源表现出来的率直性格，让他将方源当做自己人。</p>
<p>第九十二节：方源vs李好（下）</p>
<p>◆ 因为困难多壮志，不教红尘惑坚心。今身暂且栖草头，它日狂歌踏山河！”</p>
<p>第九十三节：法则碎片，大道之痕</p>
<p>◆ 因为困难多壮志，不教红尘惑坚心……这个世界上，志大才疏的人多的是。而有志向又有天赋才华的，很少，简直是万中无一。不仅有志向才华，更有坚强意志的，则简直是罕见！</p>
<p>第一百零一节：方源vs朱八（上）</p>
<p>◆ 这个世界上，有很多种男人。有的男人恋家，有的男人天生大志。其中有一种男人，当他认准了的事情，就算是全世界，也阻挡不了他的路。方源就是这样的男人！</p>
<p>第一百一十六节：硬气蛊</p>
<p>◆ 但凡男人都如雄狮苍狼，受了伤，会独自找一个无人的角落，默默的舔舐伤口。而女人却不同，受到一些委屈，都会有倾述的欲望。她们渴望得到保护和安慰。</p>
<p>第一百一十七节：必胜魔心</p>
<p>◆ 这不是自大，也不是自信，更不是狂妄，而是一种心态。魔心！不能输，不能倒下，必须要赢，一定能赢！哪怕只有一成不到的胜算，甚至哪怕没有胜算，也必须要赢的心态。魔道蛊师，一旦失败，往往就是万劫不复。所以必须成功，一路赢下去。没有万一，也没有如果。前世五百年的经历，让方源养成了这样的心态。成王败寇，踩着别人的尸骨，步步高升，踏上巅峰！只有我负天下，什么礼义廉耻，名利美色，恩怨情仇，都不能成为阻碍，都可利用。这就是白凝冰不如方源的地方。白凝冰那是求胜之心，方源这是必胜之心！没有什么能挡得住我，就算是灭亡也不能屈折我的魔心。</p>
<p>第一百一十八节：方源vs巨开碑（上）</p>
<p>◆ 微微一思索，他旋即恍然。这是魔道的气息！凌厉如刀锋般的杀意，毁灭世间的疯狂，睥睨天下的傲慢，践踏众生的无情……这笑声仿佛让巨开碑回到了过去。那不堪回事的曾经。每天几乎都在杀戮中度过，仿佛在无边的黑暗中独行，没有人可以倾述，无边的寂寞压抑成恐惧，生不如死的魔道生活……你必须往上走，你必须一路赢下去。就像是在悬崖边上走钢丝，神经绷到极点，不得一丝放松。输一场，也许就是堕落深渊，万劫不复。</p>
<p>第一百二十九节：都是吃</p>
<p>◆ 若换做以前的方源，自然要虚以委蛇一番，动用哄骗、欺瞒的手段，和和气气地买下这小摊上的东西。但现在，他实力大涨，今非昔比。能用最直接的手段，省事省力，为什么不用呢？正道人物，要爱惜名声，展示风度，所以常向弱小表达和善。方源却不是正道，而是魔道。自古以来，大鱼吃小鱼小鱼吃虾米，就是这样弱肉强食的丛林法则。只是魔道中人，都是撕扯血肉，一口口直接吞下。正道人物，则是一边吃，一边掉鳄鱼的眼泪，说自己被逼无奈。总有许多愚昧的人，被虚伪所欺骗。或者愚蠢到自己欺骗自己，不愿意面对残酷的真相。呵呵。事实上，都是吃。剥削者吃被剥削者，侵略者吃被侵略者，强大者吃弱小者，压迫者吃被压迫者，上位者吃下位者……众生万物没有不吃的，不吃，就生存不下去。只是彼此的吃相上有差异罢了。</p>
<p>第一百三十八节：见死不救</p>
<p>◆ 在方源看来：每个阶段，都要有其对应的，相适宜的发展思路。弱小的时候，就要低调潜行，暗中行事，卧薪尝胆，偷偷发展。强大的时候，则要传播威名，该出手时就出手，让他人忌惮、恐惧、害怕。有时候，名声是比实力更强大的武器。</p>
<p>第一百四十四节：卑劣无耻</p>
<p>◆ 在他看来：所谓的诚信，不过是害怕自己被欺骗，所以希望和要求别人的标准。走魔道，就是要恣无忌惮，百无禁忌。违背约定又怎样？不守承诺又怎样？只要实力够强大，想怎么来就怎么来。别人的鄙视、嘲讽又能如何？这些无力苍白的言语，只能彰显出弱者的无奈，能动得了自己一根汗毛？</p>
<p>第一百四十五节：有才无德</p>
<p>◆ 他面对狐魅儿，见死不救，根本不顾及美色。他蛮横无理，动不动就杀人，可以说漠视生命。他打杀横眉暴君等三人，次次都把对手打成肉酱，可以看出他生性暴虐凶残。他还欺骗薛三四，当众毁约，犹自得意。这就更可怕了。说明他行事肆无忌惮，做事毫无下限，背叛信手拈来，根本没有一丝心灵上的愧疚。</p>
<p>第一百五十八节：毛民的传说</p>
<p>◆ “不是我聪明。是爱慕虚荣的人，都会变得愚蠢。他们常常为了虚无的美丽，而默默忍受痛楚，放弃真正应该追求的东西。”</p>
<p>第一百七十节：魔道的觉悟</p>
<p>◆ 方源道：“我走魔道，就从未怕得罪人。只要自身不断地强大，复仇算什么？十个人复仇，我就是杀十个人，百个人复仇，我就杀百人。若全世界复仇，我就杀了全世界！如果我被人复仇成功，那就证明我不够强，不够努力，懈怠了修行，死了也活该！”</p>
<p>第一百八十三节：继续杀</p>
<p>◆ 作弊的感觉真是妙不可言啊！要是这样，被称为卑鄙无耻，我到愿意更卑鄙无耻一些，呵呵呵。”</p>
<p>第一百九十节：只差最后一步</p>
<p>◆ 接下来的很多机缘，一环套一环，没有一定的修为、实力，根本就没有参与的资格！“生灵万物，优胜劣汰，这机缘更是要寸步不让，时机也要争分夺秒。这样才不愧这重生之躯啊……”</p>
<p>第二百节：春秋蝉！</p>
<p>◆ 这就是现实的残酷，也是命运的美妙。在这天地中，人人都是主角，人人又都是配角。“每个人都有各自的优势，白凝冰是北冥冰魄体，铁若男有铁家大背景，凤金煌三岁就在梦中寻得仙蛊，而我则辗转挣扎，苦修数百年，炼成了春秋蝉。”</p>
<p>◆ 看万山红遍，层林尽染；漫江碧透，百舸争流。鹰击长空，鱼翔浅底，万类霜天竞自由。怅寥廓，问苍茫大地，谁主沉浮？”天若有情天亦老，大道无情至公，每一个存在都有问鼎的机会，就看如何把握，如何争锋！</p>
<p>◆ 这个世界上，没有人生来就是一辈子的配角。也没有人，会是永恒的主角。万物相争，优胜劣汰。正是因为天下英杰的争锋，相互之间实力的碰撞，底牌优势的较量，才显得历史如此厚重精彩，世间如此丰富曼妙啊。念及于此，方源胸中一阔，苦闷和仇恨，惊悸及悲喜，都化为烟云消散。他的心一片清明，魔的执着又令他双眼熠熠闪光。他开始冷静思考。</p>
<p>第二百零六节：今日暂且展翼去，明朝登仙笞凤凰！</p>
<p>◆ 千古地仙随风逝，昔日三王归青冢。阳莽憾陨谁无败？卷土重来再称王。天河一挂淘龙鱼，逆天独行顾八荒。今日暂且展翼去，明朝登仙笞凤凰！</p>
<p>第九节：上位者的良知</p>
<p>◆ 魔道中人，就应该争分夺秒，锱铢必较，搜刮一切，壮大自身！“既然身为上位者，就该明白：规矩律法、情谊道德，都是压榨利益的工具罢了。宽和和良知，严酷和仇恨也都是如此。”方源心中冷笑。</p>
<p>第五十九节：不永生都是屎</p>
<p>◆ 但凡会死亡的，都是平等的。无非是早死、晚死的些微区别罢了。</p>
<p>第一百五十四节：不在乎</p>
<p>◆ 他人的忠诚便是对自己的背叛，背叛他人是对自己的忠诚</p>
<p>第一百六十节：风云突变利益心</p>
<p>◆ 不管风云如何变化，利益始终是核心，从未变过！</p>
<p>第二百零九节：爱情蛊（下）</p>
<p>◆ 从此，爱情是自由的。</p>
<p>◆ “爱情，也是自己的！”</p>
<p>第二百四十五节：梦魇魔驹</p>
<p>◆ 这个世界太大，而我们太小。”“小时候，我想成为顶天立地的人物，就像是正道的那些传奇人物那样。少年时，觉得成为一族族长也不错。青年时，能够成为家老就感觉很棒了。中年后，被家族流放，发现其实能养得活自己，养得起身上的蛊虫，就能让自己满意。”</p>
<p>◆ 我们都是小人，都想走出平凡的深渊。”</p>
<p>◆ 咱们这种小人物，哭是没有用的，喊也是没人听，只能自己坚持。”“坚持下去，直至成就伟大，脱离平凡。或者，迎接死亡。</p>
<p>第二百六十四节：马鸿运之死</p>
<p>◆ 在我的一生中，经历的绝望实在太多太多了啊</p>
<p>第二百六十五节：方源的坚持！</p>
<p>◆ “你说：小时候，你想成为顶天立地的人物，就像是正道的那些传奇人物那样。少年时，觉得成为一族族长也不错。青年时，能够成为家老就感觉很棒了。中年后，被家族流放，发现其实能养得活自己，养得起身上的蛊虫，就能让自己满意。”“我不会这样，让梦想随着年龄而萎缩。”“这个世界太大，而我们都是小人物……但我会加油的！会一直努力！”</p>
<p>◆ 童年、少年、青年。青茅山、商队，一路行走。壮年、老年，终究获得寿蛊。南疆、西漠、东海、中洲。春秋蝉重生后，青茅山、三王山、狐仙福地、王庭福地、义天山、逆流河！一步步走来，一路风雨。</p>
<p>◆ 一个人的坚持会有多难？在场的所有蛊仙，都能回答这个问题。因为他们当中，有的因为责任而坚持，有的因为仇恨而坚持，有的因为精彩而坚持，有的因为爱情而坚持……而方源的回答呢？他仍旧面无表情，毫无所动地向前进。我曾经呐喊过，渐渐的我不发出声音。我曾经哭泣过，渐渐的我不再流泪。我曾经悲伤过，渐渐的我能承受一切。我曾经喜悦过，渐渐的我看淡世间。而如今！我只剩下面无表情，我的目光如磐石般坚硬，我的心中剩下坚持。这就是我，一个小人物，方源的——坚持！</p>
<p>第二百九十九节：斗诗</p>
<p>◆ 大海啊，你全是水。”“骏马啊，你四条腿。</p>
<p>◆ 美人啊，你有大大的眼睛，还有一张嘴！”吟诗结束。</p>
<p>第三百一十二节：宾主尽欢</p>
<p>◆ 俗话说，红颜祸水。一位美人，不是那么好追求的。只有单纯的人，才想着只用爱情和感动，就能征服一个美人。其实远远不止这些。女人的美丽，就是天然的嫁妆。这笔嫁妆丰厚至极，是一大笔的财富。谁不想获得这样的财富？但不是谁都有能力守护得住这样的财富。</p>
<p>第三百五十二节：紫陨（下）</p>
<p>◆ 人间沧桑十万年，半生清醒半疯癫。直望苍天不躬身，临终遗赠成乱源。</p>
<p>第三百六十八节：这便是凤九歌！</p>
<p>◆ 两仙急道：“仙友若不走，恐怕也会被诬告为魔头了。”凤九歌便笑：“魔不魔，正不正，天地自有凤九歌。走不走，留不留，死生皆在我心头。”</p>
<p>◆ 魔不魔，正不正，天地自有凤九歌。走不走，留不留，死生皆在我心头。魔道、正道，这两种阵营，两种身份，都不能拘束我凤九歌！是走还是留，对于我凤九歌而言，走了就是我心之死，留下才是我心之生。凡事依凭本心。我就是我。我就是凤九歌。一直都是！</p>
<p>第四百九十二节：偷道大宗师！</p>
<p>◆ 这个世界很大，而你太渺小。</p>
<p>第六百五十四节：人生和面具</p>
<p>◆ 不要因为他们的态度，而委屈自己的心意。如果你常常委屈自己，那么就会收获后悔，你会时常带上面具，变成另外的人，反正不是真正的你。”</p>
<p>第八百零四节：天地无正义</p>
<p>◆ “正是如此。”方源点头，“天地间的真理，就是大鱼吃小鱼，小鱼吃虾米，生来如此，自然而然。何有罪恶一说？更无正义的标榜。羊吃草，人吃羊，都和正义无关，只是出于生存的考虑。</p>
<p>◆ 现在方源告诉他答案——正义、美德，都是人的创造。这种创造可能是有意识的，也可能是无意识的。人们遵循这些标准，是为了自己个体拥有更好的生存环境，以及集体的长存不衰。</p>
<p>◆ 当你明白正义的本质，你就当清楚——所谓的正义，就像是铁甲，是人的工具。你穿戴在身上，是要将它当做工具使用。但是你看看你现在，你身上的铁甲已经成了你的枷锁，囚禁住了你。”</p>
<p>第九百四十六节：毁了又如何？</p>
<p>◆ 哗哗哗……河水激荡，掀起惊涛骇浪。一个身影潇洒从容，从巨浪风波中，徐徐而来。场中群仙便听他高歌道：当时年少掷春光，花马踏蹄酒溅香。爱恨情仇随浪来，夏蝉歌醒夜未央。光阴长河种红莲，韶光重回泪已干。今刻沧桑登舞榭，万灵且待命无缰！他少年模样，目光沧桑，一身朱袍，面冠如玉，眼若明星，肤白似雪。他从光阴长河的虚影中脱身而出，步入天庭战场。全场瞩目，鸦雀无声。环视左右，他的目光停留在龙公的身上。</p>
<p>第二百零七节：烟消云散！</p>
<p>◆ 我要这天，再遮不住我眼！”步天空狂吼，一招发出，光虹贯天，扫荡阴云五百里。“要这地，再埋不了我心！”步天空咆哮，一脚猛踏，山峦崩塌，露出防御破碎，面露惊诧之色的陆畏因。</p>
<p>第二百一十七节：星宿仙尊！</p>
<p>◆ 一生不利己，忧济在元元。捐躯赴难死，星光照人间。重活物人非，五洲大不同。丹心唯一一，三相挽天倾！</p>
<p>第二百二十九节：乐土重生</p>
<p>◆ “沉沦黄土十万年，”“今再扬尘拂行衣。”“只愿苍生共平等，”“万千生灵竞相揖。”</p>
<p>第二百四十一节：无极重生！</p>
<p>◆ 从来是疯魔道痴，”“俯仰问阴阳乾坤。”“百万年筹谋积蓄，”“待今朝无极永生！”</p>
<p>第二百四十六节：炼蛊炼人还炼天！！</p>
<p>◆ 双尊退败，齐齐吐血，伤势更深一分。方源一身雪袍，青丝飘扬，纵横战场，气盖山河。他牢牢占据上风，口中忽吟道——早岁已知世事艰，仍许飞鸿荡云间。一路寒风身如絮，命海沉浮客独行。千磨万击心铸铁，殚精竭虑铸一剑。今朝剑指叠云处，炼蛊炼人还炼天！方源的攻势宛若惊涛骇浪，笼罩千里战场，覆盖乾坤八极。</p>
<p>第二百五十五节：方源的原则和底线</p>
<p>◆ 如果说此人有原则，那么他的原则就是没有底线。”“如果说此人有底线，那么他的底线就是没有原则！”</p>
<p>05.<br>潮水只有击打在礁石上，才能碰触出美丽的浪花。人只有在不断的斗争中，才能感觉到生的光彩啊。</p>
<p>06.<br>遵守规矩不算是本事，真正的本事是破坏规矩而享受利益，却不受惩罚。真正的大本事，是破坏旧秩序，建立新规矩，一直享受利益。</p>
<p>07.<br>不过是些许风霜罢了。</p>
<p>08.<br>我们既然意识到自己的渺小，那就更应该变得强大。我们本来就是渺小的，只是从无知变得有知，你感到痛苦，是因为你在成长。</p>
<p>09.<br>人生匆匆百年，如梦幻泡影。人活在这个世界上是为了什么？无非是走上一遭见证精彩罢了。我虽然不想死，但却不畏惧死亡。我已走在路上，纵死不悔。</p>
<p>10.<br>这世间没有绝境，只有对处境绝望的人。 解决问题的答案就在我们自己的手中，当审视内心时，便会发现奇迹伟力就在我身！ 发现自己，认识自己，靠自己</p>
<p>11.<br>真正可靠的还是自己，真正成熟的人，永远不会依靠别人雪中送炭。</p>
<p>12.<br>此生就愿成真月，出天山，戏云海，照古今，行走在黑暗的诸天之上。</p>
<p>13.<br>但战斗之所以精彩，就是因为强大未必会胜利，弱小也不一定会倒下。</p>
<p>18.<br>但凡上当受骗的人，难道真的是因为他们蠢笨吗？ 不是，只是他们内心愿意去相信罢了。</p>
<p>23.<br>人们往往在了解什么是生命之前，已将自己的生命消磨了一半。—-时间、爱情等等，莫不是如此。</p>
<p>24.<br>一伸手，水晃月散。 这世间的人，亦常常如此。看到月影，就以为是真月。 殊不知，只是井中之月，眼中之月，心中之月罢了。 “此生就愿成真月，出天山，戏云海，照古今，行走在黑暗的诸天之上。”方源双目澄澈，瞳眸中倒映着锦绣青山。</p>
<p>25.<br>真魔只忠于自己，在黑暗孤独朝圣，只走自己的路。 真魔可以去敬佩他人，但永不可能臣服于他人。 真魔皆是自己的君王，至高无上!</p>
<p>26.<br>“这个世界上，谈何对错？孰对孰错？只是每个人的道路不同罢了。”</p>
<p>28.<br>千古地仙随风逝，昔曰三王归青冢。 阳莽憾陨谁无败？卷土重来再称王。 天河一挂淘龙鱼，逆天独行顾八荒。 今曰暂且展翼去，明朝登仙笞凤凰 。</p>
<p>29.<br>态度是心的面具</p>
<p>31.<br>人，本就是天地间的宝石。只是宝石璀璨与否，需要我们自己的雕琢。我们的每一次努力，每一次选择，都是一次雕琢。</p>
<p>34.<br>人不是山石，也不是浪花，人是有思想的。往往胡思乱想，才最是可怕，最有力量！</p>
<p>47.<br>人啊，走在自己的人生路上，就不要怕肮脏！踩着白骨和血肉，一步步走向辉煌！人啊，走在自己的人生路上，就不要怕悲伤！踏着汗水和泪水，一步步行向光芒！人啊！走在自己的人生路上，就不要怕仿徨！循着信念和理想，一步步走出迷惘！人啊！走在自己的人生路上，就注定要漂泊流浪！无需愤恨你没有知己，因为你还有自己！去吧，走向巅峰，踏向属于自己的天堂。</p>
<p>48.<br>“有利可图的正义，才能广为传播，才有实际遵循的可能。这样的正义，才是坚实稳定的。太高尚的正义，反而有些虚假，得不到广泛施行效仿，只会让正义显得孱弱不堪。”</p>
<p>49.<br>面对困境，就把心交给希望</p>
<p>52.<br>在狂热顽皮的爱情面前,思想和智慧都只能退避三舍。</p>
<p>53.<br>孤独是最深邃的黑暗</p>
<p>54.<br>“这就是人的可悲之处啊。”方源趺坐着，看着门外傻傻站着的漠颜，心中感慨，“有的时候，阻止人行动的，往往不是物质上的难题，而是心灵的枷锁。”</p>
<p>55.<br>烂耀眼的王位下，铺设的是万千白骨。</p>
<p>56.<br>人生匆匆百年，不过一场豪赌。</p>
<p>57.<br>人在寻找成功的过程中，往往变得面目全非。</p>
<p>58.<br>石人啊，为了表达你的爱情，你不再硬气，放下固执，丢掉尊严，甚至舍弃了自信。但是我看到的，却是个丑陋不堪的石人啊。你起来，我不会接受你对我的爱，我还有更重要的事情要去做呢。</p>
<p>60.<br>仙路阻且长，相逢于天涯。 岁月忽已晚，情仇已绵长。 君思仙尽头，我思君安危。 生死两茫茫，为君梦还乡。</p>
<p>61.<br>如果这世间单纯的仇恨、憎恶、咒骂有用，那还需要力量做什么？”</p>
<p>62.<br>他的威名让四海凛然，让人谈之色变。 理解他的人敬佩他尊崇他爱戴他，恨他的人咬牙切齿，施展各种手段，却只能让他越来越强。 他走在自己的路上，孤独包裹着他，冷漠的眸子能洞悉一切虚伪。 对于批判否决，他嗤笑不屑。对于虚夸阿谀，他冷笑不语。 他耐得住寂寞，甚至享受寂寞。 他不是走向成功，那么就是走向毁灭。 他是一个勇士，他走在黑暗中独自朝圣，一路披荆斩棘，不管是什么都不能阻挡他。神挡杀神，佛挡杀佛！</p>
<p>64.<br>男儿当世，自当如此，不受世俗拘束。纵横无忌，看谁不顺眼就杀谁。心恶时屠戮万物，心善时福泽苍生。天下皆随我心而动，主宰一切，将所有敢于反抗自己的敌人踩在脚下。这才是大自在，大畅快的人生啊！</p>
<p>65.<br>孤独是最深邃的黑暗，而亲情的光只是一种假象。</p>
<p>66.<br>在这自然中，万物都在抗争，都在生存，并不是仅仅只有人而已。这个天地，就是用生和死来演 绎精彩的大舞台啊！</p>
<p>67.<br>可惜人们总是害怕孤独，总要贪恋热闹的人群，总不愿无所事事。因为当他们面对孤独，往往就会面对痛苦。但是一旦能直面这种痛苦，人就往往有了才华和勇气。所以。有句俗语――杰出者必孤独。“这就是孤独的滋味啊，每每品味，都更加坚定我追求魔道之决心！”</p>
<p>68.<br>有些东西，往往只有失去了，才能看得明白。</p>
<p>69.<br>永生缥缈非我求，长生无为老愧羞。 界壁消散乱世起，宿命一去竞自由。 鹰击长空鲸霸海，不试怎知龙与蚯? 凡夫俗子岂识我，非到末路不甘休!</p>
<p>72.<br>“你怎么没有罪。你的弱小就是罪啊!”话音刚落，方源便射出落魄印。</p>
<p>74.<br>居高临下，目光洞穿繁芜世事。或抽丝剥茧，或一针见血。我自居高笑傲，冷看世间之人如颗颗棋子，遵循着各自的规矩，按部就班地行进。</p>
<p>76.<br>雄山漫道真如铁，如今迈步从头越。 险就一身乾坤精，我心依旧望苍天。</p>
<p>78.<br>态度是心的面具在寻找成功的过程中，人往往会变得面目全非，而人最大的失败，就是失去自我。</p>
<p>79.<br>“山延万里渊九重，蟠居井底鳅鳝蚌。今朝奋髯云乍起，矫首上凌飞太清。”</p>
<p>80.<br>自己蛊见人祖意兴阑珊，笑道：“人祖啊，你应该高兴才是。你要知道，发现自己，认识自己，是人生的第一件大事。自己才是世间最可靠的</p>
<p>82.<br>人的一生之精彩，在于自己追逐梦想的过程。不必苛求旁人的不失望或者喜欢。 走自己的路，让旁人失望和不喜欢去吧！</p>
<p>83.<br>弱肉强食，适者生存，本来就是这世间的本质。</p>
<p>84.<br>历经五十四次劫，劫云仍旧漫遮天。 胸中魂光压众生，拳里剑气纵北原。 时来时去四百载，无死何能生新颜? 弃此残躯换清风，卷席苍穹复光年!</p>
<p>85.<br>歌声寥落，英雄落魄，难挡命途多舛。 折剑沉沙，千古兴亡，不尽天河滚荡。 忧愁… 幽夜漫漫魂梦长，问何处安乡？ 物换心移几春秋。唯天意苍茫。</p>
<p>86.<br>忽然他轻笑出声：“想我堂堂一代魔头巨擘，何时畏首畏尾，如此瞻前顾后？只要有一线希望，就该勇于出手。只要有滔天的利益。就该奋不顾身。富贵险中求，什么稳中求胜，慢慢积累？我就是要一步登天！”“没错，就这个方案了！失败就死无葬身之地。成功就如蛟龙升天，对今后大计更为有利。呵呵呵，哈哈哈，人生匆匆百年。不过一场豪赌！”</p>
<p>87.<br>而且，我从不相信什么诚信。所谓的信誉，都是狗屁，不过是利益小，打动不了内心罢了。”</p>
<p>88.<br>忠诚自己，是对他人的背叛。 忠诚他人，是对自己的背叛。</p>
<p>89.<br>只要我想，以我的魔道巨擘的手段，整个青茅山都可以玩弄于股掌之间，不过他们也配？</p>
<p>90.<br>人的一生之精彩，在于自己追逐梦想的过程。不必苛求旁人的不失望或者喜欢。</p>
<p>91.<br>长凡不凡， 武庸不庸　 永生飘渺非我求， 长生无为老愧羞　 界壁消散乱世起，宿命一去竞自由。　 鹰击长空鲸霸海，不试怎知龙与蚯。　 凡夫俗子岂识我， 非到末路不甘休</p>
<p>92.<br>醉一回 梦一场 宿命之歌响四方 赌一回 狂一场 宿命之光照八荒 拼一回 赴一场 宿命之战携手闯 战到日月都无光 未散场</p>
<p>93.<br>梦里轻烟天外客， 夜夜梦中唤心魂。 纵是百年无缘分， 解脱俗尘梦纯真。</p>
<p>94.<br>红尘漩涡不由己，何朝散发弄扁舟？乘风破浪三万里，方是我辈魔道人！</p>
<p>95.<br>所谓的美色，到头来，也不过是黄土一捧而已。 尘归尘，土归土。 美丽的少女，在天地中，不过和鲜花一样。或是被路边的脚步践踏，或是时间到了枯萎老去，成为丑陋的肥料滋润土地。 没有永生，再美好的东西也是镜花水月啊。存在的价值，不过是刹那的芳华罢了。</p>
<p>96.<br>“这一切的一切都是宿命。” “我们每一个人，每一个生命，乃至每一块山石，每一滴水，每一团火，既然在这个世间存在，就必有存在的意义和价值。善恶也是如此，没有善，哪里来的恶？没有恶，又何必谈善？”</p>
<p>97.<br>不论哪个世界上，总有一群弱者，乞讨强者的施舍，死皮赖脸又不知分寸。好像帮助他们才是强者的风范，不帮助他们就是不对的事情。</p>
<p>99.<br>所谓团结，不过是因为彼此弱小。 人脉这种东西，在地球上的确需要。毕竟人和人之间，在本身力量上是不会有质的区别。但这世界是能修行的世界，从根本上就不一样。 人脉不过是力量的附属品，只要自身强大，人脉就会攀附而来。 但凡追求人脉关系，必是有求于 他人。 甚至不需要人脉――只要自身强大无比，什么东西都可信手拈来，不给就抢杀，还需要什么人脉关系?</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>一封初二女生的遗书：“毁掉一个人很简单，只需要毁了她的童年”</title>
    <url>//posts/6654ae13/</url>
    <content><![CDATA[<hr>
<h5 id="文章转载自微信里的文章，自行搜索不带链接了"><a href="#文章转载自微信里的文章，自行搜索不带链接了" class="headerlink" title="文章转载自微信里的文章，自行搜索不带链接了"></a><strong>文章转载自微信里的文章，自行搜索</strong>不带链接了</h5><hr>
<p>这两天看到一个新闻消息，后来搜了搜发现是2021年时候的事情，也就是我刚上大学时候的事情，但当时似乎并没有听说可能因为疫情原因？对啊，新闻消息总是能被覆盖的，总是关注到没用的…</p>
<hr>
<p>2021年8月18日，一封转自微信群的遗书在中文网络流传。最早的转发者提到遗书的作者是亲戚的女儿，开学初二。并提到她“把自己所有财产整理好放桌子上，一共三万元压岁钱。”“把学校李借书的明细也写好叫父母去还。”遗书内提到了作者时常遭到语言羞辱和体罚。</p>
<p>这封遗书在社交媒体受到广泛关注，随后遭到删除。以图片形式传播的文本也被屏蔽。</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412120821901.jpg" style="zoom:33%;"></p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412120821964.jpg" alt="junior_high_14_2" style="zoom:50%;"></p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412120821948.jpg" alt="junior_high_14_3" style="zoom:50%;"></p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412120821977.jpg" alt="junior_high_14_4" style="zoom:50%;"></p>
<p>图片里的内容如下：</p>
<blockquote>
<p>人生一趟，遇见你们我很荣幸，若有来生，我们不要再见面了。想想也没什么，你们爱的不是我，是冲进班级前十的我，是排名年龄前二十的我，是考到满分的我，你们心目中的完美女儿太优秀，我达不到。开学就是初二了，你们口中美好的小学，轻松的预备，快乐的初一，我都是玩命扛下来的，哪还敢奢望什么魔鬼初二初三。也没有什么好可惜好难过的，是你们说不指望我的，我相信你们。我是带给你们荣誉的人，严格出孝子的代言人，在朋友面前攀比的工具。在人前彬彬有礼，来了电话时语气礼貌又文明，在人后我承受了你们口中最肮脏的辱骂，气撒出来了，你们开心了，我就当睁一只眼闭一只眼，反正也没什么不是吗？人生比的不是长短，是价值，我知道许多你们不知道的事，为世界也做出过微薄的贡献。</p>
<p>巴掌打在脸上最疼，然后是手背，再是手臂，最后是大腿，打在背上还行，被皮带或电线抽时腿上最疼，然后是背上，最后双臂，羞辱人最有效的方法先是让她就穿着拖鞋站在屋外向外人示众，再是每日每夜不停地尖声骂最难听的话，还说的冠冕堂皇，最后是耍泼妇，失眠的原因是睡前被骂或被打，躺在床上接着听从主卧传来的谩骂声，剩下的时间用来回味一天的难过。中国人爱说小孩疯掉是因为学习压力大，可明明是家长把成绩看得太重，先来明白了，因为他们不知道自己错了，过去不知道，现在不知道，未来更不可能知道，孩子喜欢的玩耍方式一直在变，我们满意的作业量一直在该，流传下来的却是上一辈的那句：“我们在你们这个岁数是没有怎么怎么样，所以现在才怎么怎么样，因此你一定要怎么怎么样。”但凡你真的认识到自己的差都没脸说出这种句，但凡你在这方面有一点基因我们都不会这样。这年头就是这么怪，坐在沙发上躺在床上的人永远有资格指着鼻子骂一个正在读书或写功课的人，不为别的，就因为人家是长辈。是我太懦弱了，不敢面对下一次语文六十多分，数学七十多分和英语八十几分，我还是活成了自己最讨厌的样子。</p>
<p>这辈子做尽了别人的出气筒，但还是有些对不起的人的，自然不是你们，为了他们，我又意外挺过了初一，的确是意料之外。既然都受不了彼此，不如我们各退一步，我消失也不错啊，我不怕。我不气你们，爱护你们的肺的心脏，不缩短你们的寿命了，你们不适合养女儿，或许儿子承受能力更好。也不能完全怪我，我真的尽力了，实在受不了了，这蛮好，不用担心我抄人作业，我作业不用交了，也不用担心我某某时间背着你们玩电子产品，花钱买我喜欢的东西。为人大气，我给你们你们想要的东西，桌子上是我能拿的出手的所有的现金，你说压岁钱统一给我三万，我不要了，全归你，不知道他们会不会给保险金，有的话最好（手机也不需要了），少了一个败家子，家庭会富裕起来，微信的钱全给你们了，自己看着分，我要课都上完了，那羽毛球课叫你们别买你们偏不听，那个课好像成年人也能上，你们趁着暑假去听掉，平时没有打打球挺好，我不会赖在家里把房子变成凶宅的放心，把奶奶接过来一起住吧，别整天去那种地方旅游被人家骗钱。诚心诚意祝你手术顺利，早日康复，少加班少熬夜，别过来烦我，桌上那张蓝色的卡是我们学校的借书卡，我借了学校三本书：《创业史》《红岩》《哈利波特与死亡圣器》一定要帮我还掉，麻烦给老师说声谢谢。记得用我的零钱给小朋友买棒棒糖，珍珠棒的牌子好，房间里的东西她们有喜欢的一律随便拿。</p>
<p>毁掉一个人很简单，只需要毁了她的童年，其余一切顺其自然，你们已经毁了我，也毁了江XX，请好好待她的弟弟吧，请收手这种伤害，这并不威风，你们把我们想得太坚强了，反省这件事就留给岁月好了。</p>
</blockquote>
<p><strong>这是 2021 年的上海市南汇。</strong></p>
<p>这里远离市区，但身处上海，也算是得天独厚。</p>
<p>成长在这个地方的小孩，大部分都会拥有光明的未来。</p>
<p><strong>他们的青春年代，在外人看来，大概率是不会有多少烦心事的。</strong></p>
<p>早早的接触到二三线城市的孩子看不到的一切，一出生就赢在了别人的起点。</p>
<p>快乐，充实，不愁吃穿，等着长大….</p>
<p>但就是在这么一个让人羡慕的环境，</p>
<p><strong>一个 14 岁的小女孩，却在不久前突然跳楼自杀。</strong></p>
<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>8月份的上海，夏天结束，秋天归来。</p>
<p>这个花季女孩，正是在这个美丽的季节纵身一跃，从家中坠落。</p>
<p>当时当刻，他的父母或许还在计划着，将来再给她报个什么辅导班。</p>
<p><strong>但他们永远也等不到了。</strong></p>
<p><strong>孩子死了，留下了一封遗书，一些遗愿，还有 3 万块钱。</strong></p>
<p>3万块是什么概念？</p>
<p>对她的父母来说，也就是上海厕所的一个平方。</p>
<p>但对女孩说，这可能是她整个少女时代，拥有的巨大财富。</p>
<p>我甚至可以想象到，她应该很多次在上学的路上雀跃思考着：</p>
<p>这钱是买棒棒糖？买电子产品？还是等我长大了，给我喜欢的男孩子买花？</p>
<p>但无论她曾经花了多少的精力思考这3万的未来，都不重要了。</p>
<p><strong>她已经没有未来了。</strong> &lt;/br&gt;</p>
<p>因为再也受不了父母的指责，她选择留下这些没有完成的心愿，早早离开这个世界。<strong>与此同时， 还有一封惹哭了无数人的遗书。</strong></p>
<p>也正是这封遗书，让我们心痛的窥探到了，<strong>这起自杀事件的背后，到底躲着一对什么样的父母。</strong></p>
<p>这对父母，他们希望有一个能冲进年级前20的完美女儿。</p>
<p>但自己却从没想过去学习一套好的教育方式。</p>
<p>而是用“不指望你”这些伤自尊的，甚至<strong>更肮脏的辱骂，去训斥孩子。</strong>&lt;/br&gt;</p>
<p>不仅语言辱骂，还动用<strong>迂腐的棍棒教育。</strong></p>
<p>用<strong>皮带或电线</strong>抽打自己的孩子，从手背到手臂再到大腿，背上。</p>
<p>甚至用极具侮辱性的方式，让孩子就<strong>穿一个拖鞋，光身在屋外示众。</strong>&lt;/br&gt;</p>
<p>这封遗书，有整整三页，在一个夜晚，传遍了全网。</p>
<p>避免未成年人自杀的维特效应，我们不公开所有内容。</p>
<p>但相信哪怕是从这些小小片段中，我们也可以感受到：</p>
<p><strong>写下这些话的女孩，内心曾经遭遇过多少不可承受之重。</strong></p>
<p>而让我惊讶的是，女孩才14岁就已经有3万压岁钱，也就是说——</p>
<p>这不是一个贫困家庭指望孩子改变命运的故事，也不是父母没文化造成惨剧的故事，这是个小康家庭的故事。</p>
<p><strong>这意味着，女孩面对的父母不是底线，可能只是平均线，甚至，已经超出了平均线。</strong></p>
<p>我得以想象，在这个群居着14亿人的广阔田地里，还有多少14岁的孩子，正在由于各种各样的原因，像遗书中的女孩一样，被一群名为「为你好」的父母压迫着。</p>
<p>极其少量的他们被我们得知，而多数的他们，直接在笼中毁灭。</p>
<p><strong>而这个「多数」，不胜枚举。</strong><br></p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p><strong>2017年，云南，昭通。</strong></p>
<p>17 岁的留守少年小宝，喝下一瓶农药后结束了自己生命。</p>
<p>死前，他留下一封遗书，里面写道：</p>
<blockquote>
<p>爸爸，我死了，你就高兴了。</p>
<p>我的死是你造成的，与其他人无关。</p>
<p>你句句逼人，我没有办法，独有一死方休止。</p>
<p>我死后你不要无理取闹，希望下辈子你我互不相识。</p>
</blockquote>
<p><strong>2019年，上海，卢浦大桥。</strong></p>
<p>一个正在开车的母亲，和他17岁的儿子发生争吵。</p>
<p>两人吵到情绪最激动的时候，母亲直接在高架停车。</p>
<p>男生猛地推开车门，跳下大桥，母亲坐在地上，锤地痛哭。</p>
<p><strong>2020 年，武汉，教室门口。</strong></p>
<p>一个初三的男生因为在教室玩扑克，被母亲在走廊疯训斥。</p>
<p>当着同学的面，母亲对他<strong>狂扇耳光，锁喉，戳脑袋，说狠话</strong>…全程除了一个女老师，没有任何人阻拦。</p>
<p>母亲最后头也不回的走了，男孩站在走廊，以被惩罚的姿势足足愣了3分钟。</p>
<p>直到忽然低下头，转身，跳下教学楼，当场死亡。</p>
<p><strong>时间穿过这座教室，穿过卢浦大桥，穿过那瓶被喝下的农药，穿过女孩的遗书，我看到了那么多相似又重叠的场景。</strong></p>
<p>我看到无数懂事的孩子们，瞪着双眼含着眼泪，希望能获得父母的尊重。</p>
<p>但还是话在嘴边，一声不敢吭。</p>
<p>我看到了无数的父母，用凌厉的怒吼践踏子女自尊，甚至将外气撒在子女头上。</p>
<p>但对一切造成的伤害，视为天经地义。</p>
<p><strong>当一个青少年选择自杀，原生家庭，难逃其咎。</strong></p>
<p>仔细看上海这个小女孩的遗书里，我们其实不难分析出：</p>
<p>女孩选择自杀，不仅因为已经承受不了这巨大的压力，也因为<strong>她对父母不服。</strong></p>
<p>她不服，为什么因为你是长辈，就能指着鼻子骂一个正在努力的人？</p>
<p>她要用死亡，掀起父母的懊恼和重视。</p>
<p>孩子们的思维可能很单纯：</p>
<p><strong>我活着就永远得顺从你，那好啊，我要用死亡，赢你一次。</strong></p>
<p><strong>自杀，就像是一种幼稚可怜又无奈的复仇。</strong></p>
<p>假如我消失了，爸爸妈妈，你们总该会后悔了吧。</p>
<p>如果人生重来，爸爸妈妈，你们总共会更理解我一点了吧。</p>
<p><strong>用眼泪表达抗拒没有回应，便用自杀发出尖叫。</strong></p>
<p><strong>他们就像割肉还父的哪吒，指望用恰逢其时的死亡，换父母一个道歉。</strong></p>
<p><strong>但孩子们，显然还是太天真了。</strong></p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p><strong>我们这一代人的大多数父母，是学不会向孩子道歉的。</strong></p>
<p>这样的事情一年又一年的发生，家长见了依然只是轻飘飘丢下一句：</p>
<p><strong>现在的小孩被宠坏了，太脆弱了。</strong></p>
<p>是啊，少年时代的情绪确实形同猛兽。</p>
<p>但怕死，是生物的本能。</p>
<p><strong>没有人会脆弱到因为几句话就去自杀，哪怕他们只是孩子。</strong></p>
<p><strong>当一个人决定走向死亡，显然是因为—— TA兜不住了。</strong></p>
<p>总有人说，孩子们不懂事，不知道爸妈这是爱他们。</p>
<p>真可笑啊，这是爱？？？？？？？？</p>
<p><strong>大部分父母所谓的爱，是要一个孩子正确，听话，并服从。</strong></p>
<p><strong>这根本不是爱，这是变态，如果非要说是爱，那就是变态的爱。</strong><br></p>
<p>中国目前青少年的面临的自杀困境，不比女权问题轻松。</p>
<p>只是互联网掌权者，没有青少年。</p>
<p><strong>父母或即将成为父母的一群人，到处鼓吹青少年脆弱论。</strong></p>
<p><strong>而即将走向自杀的青少年们，只能在我们看不见的地方沉默。</strong></p>
<p>这些被锁在堆满学习资料的房间里的青少年们，严重缺失话语权。<br></p>
<p><strong>上面几起青少年自杀的导火线时刻，其实发生过在无数个家庭里。</strong></p>
<p>我曾经看见过亲戚家的孩子被父母打的鼻子冒血，孩子哇哇大哭，父母却打的更厉害。</p>
<p>父母说：我受不了看你哭的样子了！懦弱！无能！</p>
<p>孩子听到这话，想哭又不敢哭，声音从发泄变成哽咽，又恨又胆怯。</p>
<p>旁边的大人呢？一边拉父母，却又一边劝孩子：别哭了，爸妈是为你好。</p>
<p>野蛮的大人，坚信自己想的就是对的。</p>
<p>他们显然没有意识到，<strong>暴力是比贪玩更恐怖的人类恶习。</strong></p>
<p>女孩遗书中最后写到：反省这件事，就留给岁月好。<br></p>
<p><strong>但我担心，岁月根本教不会大人反省，而是日趋严重的愚昧。</strong></p>
<p>一个没有人站出来发声的环境，哪来的反省？</p>
<p><strong>家长说孩子不守孝道，社会说孩子你太脆弱，</strong></p>
<p><strong>媒体呢？抱歉，孩子没有价值，还是保护大人来的划算。</strong></p>
<p>指望岁月？岁月能干些什么啊？？？</p>
<p>岁月能让这些小小的孩子，突然将童年的黑暗记忆自我消化吗？</p>
<p>岁月能让这些紧握发声口的父母，突然集体醒悟，宣扬子女平等吗？</p>
<p>岁月能让这个社会突然明白，无条件恪守孝道的世界，其实是种愚昧吗？</p>
<p><strong>这些青少年自杀案之所以相继发生，靠的不是一对父母，是成千上万父母的合作，和成千上万人大人的沉默。</strong></p>
<p>怎么样才让这一切变的好起来？</p>
<p>要指望偏执的父母们，彻底放下上位者的骄傲。</p>
<p>要指望善良的大人们，不厌其烦去发出他们的声音。</p>
<p><strong>但从来不应该是像遗书中天真的女孩一样，指望将一切反省，都留给岁月。</strong></p>
<blockquote>
<p>本文转载自弹弹妹， 作者一款雷雷。文章非原创，若需转载请关注源公众号：弹弹妹（diyidancom)</p>
</blockquote>
]]></content>
      <tags>
        <tag>articles</tag>
      </tags>
  </entry>
  <entry>
    <title>一言</title>
    <url>//posts/dd6e3900/</url>
    <content><![CDATA[<blockquote>
<p>记录一些看到的话</p>
</blockquote>
<ul>
<li><p>make it run, make it fast, make it beautiful.</p>
</li>
<li><p>Stay Hungry，Stay Foolish. 求知若渴 —乔布斯</p>
</li>
<li><blockquote>
<ul>
<li><p>“物理学就如同性爱一样，尽管它们可以带来一些实际的成果，但那并不是我们喜欢做它们的原因。”</p>
<ul>
<li>英文原文：”Physics is like sex sure, it may give some practical results, but that’s not why we do it.”</li>
</ul>
</li>
<li><p>物理学之于数学，就如同性爱之于手淫。</p>
<ul>
<li>英文原文：”Physics is to math what sex is to masturbation.”</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>与善人居，如入兰芷之室，久而不闻其香，则与之化矣；与恶人居，如入鲍鱼之肆，久而不闻其臭，亦与之化矣—孔子</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>三种关系型数据库比较</title>
    <url>//posts/8ee9d9cb/</url>
    <content><![CDATA[<hr>
<hr>
<hr>
<hr>
<hr>
<p>原文链接: <a href="https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems">SQLite vs MySQL vs PostgreSQL：关系数据库管理系统的比较 |数字海洋</a></p>
<hr>
<h1 id="SQLite-vs-MySQL-vs-PostgreSQL-比较关系型数据库管理系统"><a href="#SQLite-vs-MySQL-vs-PostgreSQL-比较关系型数据库管理系统" class="headerlink" title="SQLite vs MySQL vs PostgreSQL: 比较关系型数据库管理系统"></a>SQLite vs MySQL vs PostgreSQL: 比较关系型数据库管理系统</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文比较了三种广泛使用的关系型数据库管理系统：SQLite、MySQL 和 PostgreSQL。通过比较它们的性能、可扩展性、社区支持、安全性和使用场景，帮助开发者选择最适合其项目的数据库。</p>
<h2 id="1-SQLite"><a href="#1-SQLite" class="headerlink" title="1. SQLite"></a>1. SQLite</h2><h3 id="基本特点"><a href="#基本特点" class="headerlink" title="基本特点"></a>基本特点</h3><ul>
<li><strong>轻量级</strong>：无服务器、零配置。</li>
<li><strong>嵌入式</strong>：适合移动设备、物联网设备和小型应用。</li>
<li><strong>易用性</strong>：简单易部署，无需管理服务器。</li>
<li><strong>数据量限制</strong>：适合小到中等规模的数据（最大数据库大小为 140 TB）。</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><strong>零配置</strong>：无需安装或配置。</li>
<li><strong>跨平台</strong>：支持多种操作系统。</li>
<li><strong>事务支持</strong>：完整的 ACID 事务支持。</li>
<li><strong>资源占用低</strong>：内存和磁盘使用效率高。</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><strong>性能限制</strong>：不适合高并发环境。</li>
<li><strong>扩展性差</strong>：不支持连接池、复制等高级功能。</li>
<li><strong>社区支持有限</strong>：社区较小，文档和资源较少。</li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li><strong>移动应用</strong>：如 iOS 和 Android 应用。</li>
<li><strong>嵌入式系统</strong>：如物联网设备。</li>
<li><strong>小型应用</strong>：如桌面应用或原型开发。</li>
</ul>
<h2 id="2-MySQL"><a href="#2-MySQL" class="headerlink" title="2. MySQL"></a>2. MySQL</h2><h3 id="基本特点-1"><a href="#基本特点-1" class="headerlink" title="基本特点"></a>基本特点</h3><ul>
<li><strong>开源</strong>：广泛使用，支持多种许可模式（社区版和企业版）。</li>
<li><strong>性能</strong>：适合中等规模的应用，支持高并发。</li>
<li><strong>可扩展性</strong>：支持水平扩展、复制和集群。</li>
<li><strong>生态系统丰富</strong>：有大量的工具、库和框架支持。</li>
</ul>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li><strong>高性能</strong>：适用于高并发和大数据量的场景。</li>
<li><strong>可扩展性</strong>：支持水平扩展和复制。</li>
<li><strong>企业支持</strong>：Oracle 提供商业支持和服务。</li>
<li><strong>社区活跃</strong>：拥有庞大的开发者社区和丰富的资源。</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><strong>许可证限制</strong>：企业版有一些限制和成本。</li>
<li><strong>功能有限</strong>：某些高级功能需要第三方插件。</li>
<li><strong>SQL 标准 compliance</strong>：对 SQL 标准的支持不如 PostgreSQL 完整。</li>
</ul>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li><strong>Web 应用</strong>：如 WordPress、Drupal 等。</li>
<li><strong>电子商务</strong>：如 Magento、WooCommerce 等。</li>
<li><strong>大数据应用</strong>：如日志存储、数据分析等。</li>
</ul>
<h2 id="3-PostgreSQL"><a href="#3-PostgreSQL" class="headerlink" title="3. PostgreSQL"></a>3. PostgreSQL</h2><h3 id="基本特点-2"><a href="#基本特点-2" class="headerlink" title="基本特点"></a>基本特点</h3><ul>
<li><strong>开源</strong>：功能丰富，支持高级特性。</li>
<li><strong>性能</strong>：适用于复杂查询和大数据量。</li>
<li><strong>可扩展性</strong>：支持用户定义的数据类型、索引、操作符等。</li>
<li><strong>社区支持</strong>：活跃的社区和丰富的文档。</li>
</ul>
<h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul>
<li><strong>功能丰富</strong>：支持复杂查询、全文搜索、空间数据库等。</li>
<li><strong>SQL 标准 compliance</strong>：对 SQL 标准的支持非常好。</li>
<li><strong>可扩展性</strong>：支持用户定义的函数、操作符和数据类型。</li>
<li><strong>安全性</strong>：支持角色-based访问控制、加密等。</li>
</ul>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><strong>性能</strong>：在某些场景下可能不如 MySQL 性能高。</li>
<li><strong>复杂性</strong>：配置和管理相对复杂。</li>
<li><strong>资源占用</strong>：相对于 SQLite 和 MySQL，资源占用较高。</li>
</ul>
<h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li><strong>复杂应用</strong>：如地理信息系统、科学计算等。</li>
<li><strong>大数据应用</strong>：如数据仓库、数据分析等。</li>
<li><strong>需要高级功能的项目</strong>：如全文搜索、JSON 支持等。</li>
</ul>
<h2 id="4-比较总结"><a href="#4-比较总结" class="headerlink" title="4. 比较总结"></a>4. 比较总结</h2><div class="table-container">
<table>
<thead>
<tr>
<th>特性</th>
<th>SQLite</th>
<th>MySQL</th>
<th>PostgreSQL</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>架构</strong></td>
<td>嵌入式</td>
<td>客户端-服务器</td>
<td>客户端-服务器</td>
</tr>
<tr>
<td><strong>性能</strong></td>
<td>适合小数据量</td>
<td>适合中等数据量</td>
<td>适合大数据量和复杂查询</td>
</tr>
<tr>
<td><strong>可扩展性</strong></td>
<td>有限</td>
<td>良好</td>
<td>优秀</td>
</tr>
<tr>
<td><strong>社区支持</strong></td>
<td>小</td>
<td>非常大</td>
<td>非常大</td>
</tr>
<tr>
<td><strong>安全性</strong></td>
<td>基本</td>
<td>良好</td>
<td>优秀</td>
</tr>
<tr>
<td><strong>使用场景</strong></td>
<td>小型应用、移动设备</td>
<td>Web 应用、电子商务</td>
<td>复杂应用、大数据</td>
</tr>
</tbody>
</table>
</div>
<h2 id="5-选择建议"><a href="#5-选择建议" class="headerlink" title="5. 选择建议"></a>5. 选择建议</h2><ul>
<li><strong>选择 SQLite</strong>，如果你需要一个轻量级、无服务器的数据库，适合小型应用或嵌入式系统。</li>
<li><strong>选择 MySQL</strong>，如果你需要一个高性能、可扩展的数据库，适合Web应用和电子商务。</li>
<li><strong>选择 PostgreSQL</strong>，如果你需要一个功能丰富、可扩展的数据库，适合复杂应用和大数据场景。</li>
</ul>
<h2 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h2><p>每种数据库都有其优缺点和适用场景。选择合适的数据库取决于你的项目需求、数据量、并发需求和功能要求。希望本文的比较能帮助你做出明智的选择。</p>
]]></content>
      <tags>
        <tag>articles</tag>
      </tags>
  </entry>
  <entry>
    <title>上海交通大学生存手册</title>
    <url>//posts/14d70cac/</url>
    <content><![CDATA[<blockquote>
<p>下面给出几个阅读链接，供大家查看，选取自己需要的篇章阅读即可。</p>
<p><a href="https://survivesjtu.gitbook.io/survivesjtumanual">README | SurviveSJTUManual</a></p>
<p><a href="https://file.cz123.top/6Social_book/上海交通大学学生生存手册.pdf">上海交通大学学生生存手册.pdf</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/17662807531">无助的大学生，自发编了个“生存手册” - 知乎</a> </p>
</blockquote>
<p>《上海交通大学生存手册》是一份由上海交通大学学生自发编写的指南，旨在帮助新生和在校生更好地适应大学生活，解决在学习和生活中可能遇到的各种问题。手册内容通常涵盖以下几个方面：</p>
<h3 id="1-校园生活指南"><a href="#1-校园生活指南" class="headerlink" title="1. 校园生活指南"></a>1. <strong>校园生活指南</strong></h3><ul>
<li><strong>宿舍生活</strong>：包括宿舍设施介绍、宿舍管理规定、室友相处技巧等。</li>
<li><strong>饮食指南</strong>：介绍校园内外的食堂、餐厅、小吃街等，推荐美食和性价比高的餐饮选择。</li>
<li><strong>校园设施</strong>：图书馆、体育馆、实验室、自习室等设施的使用方法和开放时间。</li>
<li><strong>交通出行</strong>：校园内外的交通方式，如校车、地铁、公交等，以及如何快速到达各个校区。</li>
</ul>
<h3 id="2-学习与考试"><a href="#2-学习与考试" class="headerlink" title="2. 学习与考试"></a>2. <strong>学习与考试</strong></h3><ul>
<li><strong>选课攻略</strong>：如何选择适合自己的课程，避免选课“雷区”，推荐一些口碑好的老师和课程。</li>
<li><strong>学习资源</strong>：图书馆资源、在线学习平台、学术数据库的使用方法。</li>
<li><strong>考试技巧</strong>：如何高效复习、应对考试压力、考试时间管理等。</li>
<li><strong>学术规范</strong>：如何避免学术不端行为，如抄袭、剽窃等。</li>
</ul>
<h3 id="3-社团与活动"><a href="#3-社团与活动" class="headerlink" title="3. 社团与活动"></a>3. <strong>社团与活动</strong></h3><ul>
<li><strong>社团介绍</strong>：各类学生社团的介绍，如何加入感兴趣的社团，社团活动的参与方式。</li>
<li><strong>校园活动</strong>：学校举办的各类活动，如讲座、比赛、晚会等，如何参与和获取信息。</li>
<li><strong>志愿者与实习</strong>：如何寻找志愿者机会和实习机会，积累社会经验。</li>
</ul>
<h3 id="4-心理健康与生活平衡"><a href="#4-心理健康与生活平衡" class="headerlink" title="4. 心理健康与生活平衡"></a>4. <strong>心理健康与生活平衡</strong></h3><ul>
<li><strong>心理健康</strong>：如何应对学业压力、人际关系问题，学校心理咨询服务的介绍。</li>
<li><strong>时间管理</strong>：如何平衡学习、社团活动和个人生活，避免过度疲劳。</li>
<li><strong>健康生活</strong>：保持健康的饮食和作息习惯，校园内外的健身场所推荐。</li>
</ul>
<h3 id="5-安全与应急"><a href="#5-安全与应急" class="headerlink" title="5. 安全与应急"></a>5. <strong>安全与应急</strong></h3><ul>
<li><strong>校园安全</strong>：如何保障个人财物安全，校园内的安全设施和报警电话。</li>
<li><strong>应急处理</strong>：遇到突发事件（如生病、失窃等）时的应对措施，校医院和保卫处的联系方式。</li>
</ul>
<h3 id="6-毕业与就业"><a href="#6-毕业与就业" class="headerlink" title="6. 毕业与就业"></a>6. <strong>毕业与就业</strong></h3><ul>
<li><strong>毕业要求</strong>：学分要求、毕业论文、实习要求等毕业相关事项。</li>
<li><strong>就业指导</strong>：如何准备简历、面试技巧、校园招聘会信息等。</li>
<li><strong>考研与出国</strong>：考研准备、出国留学的申请流程和经验分享。</li>
</ul>
<h3 id="7-校园文化与历史"><a href="#7-校园文化与历史" class="headerlink" title="7. 校园文化与历史"></a>7. <strong>校园文化与历史</strong></h3><ul>
<li><strong>校史介绍</strong>：上海交通大学的历史、知名校友和校园文化。</li>
<li><strong>校园传说</strong>：一些有趣的校园传说和故事，增加新生对学校的归属感。</li>
</ul>
<h3 id="8-实用工具与技巧"><a href="#8-实用工具与技巧" class="headerlink" title="8. 实用工具与技巧"></a>8. <strong>实用工具与技巧</strong></h3><ul>
<li><strong>校园APP</strong>：介绍学校常用的APP，如校园卡充值、课程查询、成绩查询等。</li>
<li><strong>网络与IT服务</strong>：校园网的连接和使用，如何解决常见的网络问题。</li>
<li><strong>二手交易</strong>：校园内外的二手交易平台，如何买卖二手书籍、电子产品等。</li>
</ul>
<h3 id="9-校外生活"><a href="#9-校外生活" class="headerlink" title="9. 校外生活"></a>9. <strong>校外生活</strong></h3><ul>
<li><strong>周边娱乐</strong>：学校附近的购物中心、电影院、KTV等娱乐场所推荐。</li>
<li><strong>旅游攻略</strong>：上海及周边城市的旅游景点推荐，适合学生党的旅游路线。</li>
</ul>
<h3 id="10-学长学姐经验分享"><a href="#10-学长学姐经验分享" class="headerlink" title="10. 学长学姐经验分享"></a>10. <strong>学长学姐经验分享</strong></h3><ul>
<li><strong>经验谈</strong>：学长学姐的学习、生活、实习、考研等经验分享，帮助新生少走弯路。</li>
</ul>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>《上海交通大学生存手册》不仅是一份实用的指南，更是学长学姐们对新生的一份关怀和帮助。通过这份手册，新生可以更快地融入大学生活，找到属于自己的节奏和方向。</p>
]]></content>
      <tags>
        <tag>articles</tag>
      </tags>
  </entry>
  <entry>
    <title>代码注释</title>
    <url>//posts/14c16829/</url>
    <content><![CDATA[<h1 id="代码的神注释"><a href="#代码的神注释" class="headerlink" title="代码的神注释"></a>代码的神注释</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　瓦瓦　　　　　　　　　　　　十　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　十齱龠己　　　　　　　　　亅瓦車己　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　乙龍龠毋日丶　　　　　　丶乙己毋毋丶　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　十龠馬鬼車瓦　　　　　　己十瓦毋毋　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　鬼馬龠馬龠十　　　　己己毋車毋瓦　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　毋龠龠龍龠鬼乙丶丶乙車乙毋鬼車己　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　乙龠龍龍鬼龍瓦　十瓦毋乙瓦龠瓦亅　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　馬齱龍馬鬼十丶日己己己毋車乙丶　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　己齱馬鬼車十十毋日乙己己乙乙　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　車馬齱齱日乙毋瓦己乙瓦日亅　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　亅車齺龖瓦乙車龖龍乙乙十　　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　　日龠龠十亅車龍毋十十　　　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　　日毋己亅　己己十亅亅　　　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　丶己十十乙　　丶丶丶丶丶　　　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　亅己十龍龖瓦　　丶　丶　乙十　　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　亅己十龠龖毋　丶丶　　丶己鬼鬼瓦亅　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　十日十十日亅丶亅丶　丶十日毋鬼馬馬車乙　　　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　十日乙十亅亅亅丶　　十乙己毋鬼鬼鬼龍齺馬乙　　　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　丶瓦己乙十十亅丶亅乙乙乙己毋鬼鬼鬼龍齱齺齺鬼十　　　</span><br><span class="hljs-comment"> *　　　　　　　　　　　　乙乙十十十亅乙瓦瓦己日瓦毋鬼鬼龠齱齱龍龍齱齱毋丶　</span><br><span class="hljs-comment"> *　　　　　　　　　　　　亅十十十十乙瓦車毋瓦瓦日車馬龠龍龍龍龍龍龠龠龠馬亅</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　十十十十己毋車瓦瓦瓦瓦鬼馬龠龍龠龠龍龠龠龠馬龠車</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　　亅十十日毋瓦日日瓦鬼鬼鬼龠龠馬馬龠龍龍龠馬馬車</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　　亅亅亅乙瓦瓦毋車車車馬龍龠鬼鬼馬龠龍龍龠馬馬鬼</span><br><span class="hljs-comment"> *　　　　　　　　　　　　丶丶乙亅亅乙車鬼鬼鬼毋車龍龍龠鬼馬馬龠龍齱齱龍馬鬼</span><br><span class="hljs-comment"> *　　　　　　　　　　　亅己十十己十日鬼鬼車瓦毋龠龍龠馬馬龠龠龠齱齺齺齱龠鬼</span><br><span class="hljs-comment"> *　　　　　　　　　　　　亅乙乙乙十車馬車毋馬齱齱龍龠龠龠馬龠龍齱龍龠龠鬼瓦</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　　　　丶毋龠鬼車瓦車馬龠龍龠龠龍齱齱龠馬馬鬼毋日</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　　　　十乙己日十　　丶己鬼龍齱齺齱龍馬馬馬車毋己</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　　丶十己乙亅丶　　　　　　亅瓦馬龠龍龠龠馬毋瓦乙</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　丶十十乙亅十　　　　　　　　亅己瓦車馬龠鬼車瓦乙</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　丶十乙十十丶　　　　　　　　　丶丶亅十瓦鬼車瓦己</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　　丶亅亅丶　　　　　　　　　　　　　　　亅日瓦日</span><br><span class="hljs-comment"> *　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　丶</span><br><span class="hljs-comment"> */</span><br>就不卖关子了，图片转字符可以上这个传送门，白底的话会按空格补全，否则都为字符。<br><br>前面的传送门貌似出了点问题，下面再补上个新的传送门，也是很好用的，可以选择质量。<br><br>这不，下面的两只doge和一头滑稽就是产自于它，have fun，快去制作专属的字符注释吧。<br><br>再补上一个好玩的网站Ascii World，由于这网站的图形太多了，我就不贴上来了。<br><br><span class="hljs-comment">/**                                                                          </span><br><span class="hljs-comment"> *          .,:,,,                                        .::,,,::.          </span><br><span class="hljs-comment"> *        .::::,,;;,                                  .,;;:,,....:i:         </span><br><span class="hljs-comment"> *        :i,.::::,;i:.      ....,,:::::::::,....   .;i:,.  ......;i.        </span><br><span class="hljs-comment"> *        :;..:::;::::i;,,:::;:,,,,,,,,,,..,.,,:::iri:. .,:irsr:,.;i.        </span><br><span class="hljs-comment"> *        ;;..,::::;;;;ri,,,.                    ..,,:;s1s1ssrr;,.;r,        </span><br><span class="hljs-comment"> *        :;. ,::;ii;:,     . ...................     .;iirri;;;,,;i,        </span><br><span class="hljs-comment"> *        ,i. .;ri:.   ... ............................  .,,:;:,,,;i:        </span><br><span class="hljs-comment"> *        :s,.;r:... ....................................... .::;::s;        </span><br><span class="hljs-comment"> *        ,1r::. .............,,,.,,:,,........................,;iir;        </span><br><span class="hljs-comment"> *        ,s;...........     ..::.,;:,,.          ...............,;1s        </span><br><span class="hljs-comment"> *       :i,..,.              .,:,,::,.          .......... .......;1,       </span><br><span class="hljs-comment"> *      ir,....:rrssr;:,       ,,.,::.     .r5S9989398G95hr;. ....,.:s,      </span><br><span class="hljs-comment"> *     ;r,..,s9855513XHAG3i   .,,,,,,,.  ,S931,.,,.;s;s&amp;BHHA8s.,..,..:r:     </span><br><span class="hljs-comment"> *    :r;..rGGh,  :SAG;;G@BS:.,,,,,,,,,.r83:      hHH1sXMBHHHM3..,,,,.ir.    </span><br><span class="hljs-comment"> *   ,si,.1GS,   sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8       3@HXHBMBHBBH#X,.,,,,,,rr    </span><br><span class="hljs-comment"> *   ;1:,,SH:   .A@&amp;&amp;B#&amp;8H#BS,,,,,,,,,.,5XS,     3@MHABM&amp;59M#As..,,,,:,is,   </span><br><span class="hljs-comment"> *  .rr,,,;9&amp;1   hBHHBB&amp;8AMGr,,,,,,,,,,,:h&amp;&amp;9s;   r9&amp;BMHBHMB9:  . .,,,,;ri.  </span><br><span class="hljs-comment"> *  :1:....:5&amp;XSi;r8BMBHHA9r:,......,,,,:ii19GG88899XHHH&amp;GSr.      ...,:rs.  </span><br><span class="hljs-comment"> *  ;s.     .:sS8G8GG889hi.        ....,,:;:,.:irssrriii:,.        ...,,i1,  </span><br><span class="hljs-comment"> *  ;1,         ..,....,,isssi;,        .,,.                      ....,.i1,  </span><br><span class="hljs-comment"> *  ;h:               i9HHBMBBHAX9:         .                     ...,,,rs,  </span><br><span class="hljs-comment"> *  ,1i..            :A#MBBBBMHB##s                             ....,,,;si.  </span><br><span class="hljs-comment"> *  .r1,..        ,..;3BMBBBHBB#Bh.     ..                    ....,,,,,i1;   </span><br><span class="hljs-comment"> *   :h;..       .,..;,1XBMMMMBXs,.,, .. :: ,.               ....,,,,,,ss.   </span><br><span class="hljs-comment"> *    ih: ..    .;;;, ;;:s58A3i,..    ,. ,.:,,.             ...,,,,,:,s1,    </span><br><span class="hljs-comment"> *    .s1,....   .,;sh,  ,iSAXs;.    ,.  ,,.i85            ...,,,,,,:i1;     </span><br><span class="hljs-comment"> *     .rh: ...     rXG9XBBM#M#MHAX3hss13&amp;&amp;HHXr         .....,,,,,,,ih;      </span><br><span class="hljs-comment"> *      .s5: .....    i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r:       ........,,,,:,,sh;       </span><br><span class="hljs-comment"> *      . ihr, ...  .         ..                    ........,,,,,;11:.       </span><br><span class="hljs-comment"> *         ,s1i. ...  ..,,,..,,,.,,.,,.,..       ........,,.,,.;s5i.         </span><br><span class="hljs-comment"> *          .:s1r,......................       ..............;shs,           </span><br><span class="hljs-comment"> *          . .:shr:.  ....                 ..............,ishs.             </span><br><span class="hljs-comment"> *              .,issr;,... ...........................,is1s;.               </span><br><span class="hljs-comment"> *                 .,is1si;:,....................,:;ir1sr;,                  </span><br><span class="hljs-comment"> *                    ..:isssssrrii;::::::;;iirsssssr;:..                    </span><br><span class="hljs-comment"> *                         .,::iiirsssssssssrri;;:.                      </span><br><span class="hljs-comment"> */</span>                         <br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *               ii.                                         ;9ABH,          </span><br><span class="hljs-comment"> *              SA391,                                    .r9GG35&amp;G          </span><br><span class="hljs-comment"> *              &amp;#ii13Gh;                               i3X31i;:,rB1         </span><br><span class="hljs-comment"> *              iMs,:,i5895,                         .5G91:,:;:s1:8A         </span><br><span class="hljs-comment"> *               33::::,,;5G5,                     ,58Si,,:::,sHX;iH1        </span><br><span class="hljs-comment"> *                Sr.,:;rs13BBX35hh11511h5Shhh5S3GAXS:.,,::,,1AG3i,GG        </span><br><span class="hljs-comment"> *                .G51S511sr;;iiiishS8G89Shsrrsh59S;.,,,,,..5A85Si,h8        </span><br><span class="hljs-comment"> *               :SB9s:,............................,,,.,,,SASh53h,1G.       </span><br><span class="hljs-comment"> *            .r18S;..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,....,,.1H315199,rX,       </span><br><span class="hljs-comment"> *          ;S89s,..,,,,,,,,,,,,,,,,,,,,,,,....,,.......,,,;r1ShS8,;Xi       </span><br><span class="hljs-comment"> *        i55s:.........,,,,,,,,,,,,,,,,.,,,......,.....,,....r9&amp;5.:X1       </span><br><span class="hljs-comment"> *       59;.....,.     .,,,,,,,,,,,...        .............,..:1;.:&amp;s       </span><br><span class="hljs-comment"> *      s8,..;53S5S3s.   .,,,,,,,.,..      i15S5h1:.........,,,..,,:99       </span><br><span class="hljs-comment"> *      93.:39s:rSGB@A;  ..,,,,.....    .SG3hhh9G&amp;BGi..,,,,,,,,,,,,.,83      </span><br><span class="hljs-comment"> *      G5.G8  9#@@@@<span class="hljs-doctag">@X</span>. .,,,,,,.....  iA9,.S&amp;B###@<span class="hljs-doctag">@Mr</span>...,,,,,,,,..,.;Xh     </span><br><span class="hljs-comment"> *      Gs.X8 S@@@@@@<span class="hljs-doctag">@B</span>:..,,,,,,,,,,. rA1 ,A@@@@@@@@<span class="hljs-doctag">@H</span>:........,,,,,,.iX:    </span><br><span class="hljs-comment"> *     ;9. ,8A#@@@@@@#5,.,,,,,,,,,... 9A. 8@@@@@@@@@<span class="hljs-doctag">@M</span>;    ....,,,,,,,,S8    </span><br><span class="hljs-comment"> *     X3    iS8XAHH8s.,,,,,,,,,,...,..58hH@@@@@@@@<span class="hljs-doctag">@Hs</span>       ...,,,,,,,:Gs   </span><br><span class="hljs-comment"> *    r8,        ,,,...,,,,,,,,,,.....  ,h8XABMMHX3r.          .,,,,,,,.rX:  </span><br><span class="hljs-comment"> *   :9, .    .:,..,:;;;::,.,,,,,..          .,,.               ..,,,,,,.59  </span><br><span class="hljs-comment"> *  .Si      ,:.i8HBMMMMMB&amp;5,....                    .            .,,,,,.sMr</span><br><span class="hljs-comment"> *  SS       :: h@@@@@@@@@@#; .                     ...  .         ..,,,,iM5</span><br><span class="hljs-comment"> *  91  .    ;:.,1&amp;@@@@@<span class="hljs-doctag">@MXs</span>.                            .          .,,:,:&amp;S</span><br><span class="hljs-comment"> *  hS ....  .:;,,,i3MMS1;..,..... .  .     ...                     ..,:,.99</span><br><span class="hljs-comment"> *  ,8; ..... .,:,..,8Ms:;,,,...                                     .,::.83</span><br><span class="hljs-comment"> *   s&amp;: ....  .sS553B@<span class="hljs-doctag">@HX</span>3s;,.    .,;13h.                            .:::&amp;1</span><br><span class="hljs-comment"> *    SXr  .  ...;s3G99XA&amp;X88Shss11155hi.                             ,;:h&amp;,</span><br><span class="hljs-comment"> *     iH8:  . ..   ,;iiii;,::,,,,,.                                 .;irHA  </span><br><span class="hljs-comment"> *      ,8X5;   .     .......                                       ,;iihS8Gi</span><br><span class="hljs-comment"> *         1831,                                                 .,;irrrrrs&amp;@</span><br><span class="hljs-comment"> *           ;5A8r.                                            .:;iiiiirrss1H</span><br><span class="hljs-comment"> *             :X@H3s.......                                .,:;iii;iiiiirsrh</span><br><span class="hljs-comment"> *              r#h:;,...,,.. .,,:;;;;;:::,...              .:;;;;;;iiiirrss1</span><br><span class="hljs-comment"> *             ,M8 ..,....,.....,,::::::,,...         .     .,;;;iiiiiirss11h</span><br><span class="hljs-comment"> *             8B;.,,,,,,,.,.....          .           ..   .:;;;;iirrsss111h</span><br><span class="hljs-comment"> *            i@5,:::,,,,,,,,.... .                   . .:::;;;;;irrrss111111</span><br><span class="hljs-comment"> *            9Bi,:,,,,......                        ..r91;;;;;iirrsss1ss1111</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**                                                                    </span><br><span class="hljs-comment"> *            .,,       .,:;;iiiiiiiii;;:,,.     .,,                   </span><br><span class="hljs-comment"> *          rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS,                </span><br><span class="hljs-comment"> *         r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1,               </span><br><span class="hljs-comment"> *            .;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii:                  </span><br><span class="hljs-comment"> *          :rsriii;;r::::::::::::::::::::::;;,;;iiirsi,               </span><br><span class="hljs-comment"> *       .,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,.           </span><br><span class="hljs-comment"> *    ,9BM&amp;,            .,:;;:,,,,,,,,,,,hXA8:            ..,,,.       </span><br><span class="hljs-comment"> *   ,;&amp;@@#r:;;;;;::::,,.   ,r,,,,,,,,,,iA@@<span class="hljs-doctag">@s</span>,,:::;;;::,,.   .;.      </span><br><span class="hljs-comment"> *    :ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,..       </span><br><span class="hljs-comment"> *   .ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri         </span><br><span class="hljs-comment"> *   iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir;        </span><br><span class="hljs-comment"> *  ,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir.       </span><br><span class="hljs-comment"> *  iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir:       </span><br><span class="hljs-comment"> * .rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri       </span><br><span class="hljs-comment"> * ,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir.      </span><br><span class="hljs-comment"> * ,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir.      </span><br><span class="hljs-comment"> * ,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir.      </span><br><span class="hljs-comment"> * .rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri       </span><br><span class="hljs-comment"> *  ;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir:       </span><br><span class="hljs-comment"> *  .rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri        </span><br><span class="hljs-comment"> *   ;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir,        </span><br><span class="hljs-comment"> *    irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir:         </span><br><span class="hljs-comment"> *     irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir:          </span><br><span class="hljs-comment"> *      ;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr:           </span><br><span class="hljs-comment"> *       :rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri,            </span><br><span class="hljs-comment"> *        .;rrii;;;:,;rhS393S55hh11hh5S3393Shr:,:;;;iirr:              </span><br><span class="hljs-comment"> *          .;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:.               </span><br><span class="hljs-comment"> *            .:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;,                  </span><br><span class="hljs-comment"> *               .:irrrriiiiii;;;;;;;;iiiiiirrrr;,.                    </span><br><span class="hljs-comment"> *                  .,:;iirrrrrrrrrrrrrrrrri;:.                        </span><br><span class="hljs-comment"> *                        ..,:::;;;;:::,,.                             </span><br><span class="hljs-comment"> */</span>                                                                     <br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class="hljs-comment"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span><br><span class="hljs-comment"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class="hljs-comment"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class="hljs-comment"> * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span><br><span class="hljs-comment"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class="hljs-comment"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{ [│} ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class="hljs-comment"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class="hljs-comment"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class="hljs-comment"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class="hljs-comment"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class="hljs-comment"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class="hljs-comment"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class="hljs-comment"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *                    _ooOoo_</span><br><span class="hljs-comment"> *                   o8888888o</span><br><span class="hljs-comment"> *                   88" . "88</span><br><span class="hljs-comment"> *                   (| -_- |)</span><br><span class="hljs-comment"> *                    O\ = /O</span><br><span class="hljs-comment"> *                ____/`---'\____</span><br><span class="hljs-comment"> *              .   ' \\| |// `.</span><br><span class="hljs-comment"> *               / \\||| : |||// \</span><br><span class="hljs-comment"> *             / _||||| -:- |||||- \</span><br><span class="hljs-comment"> *               | | \\\ - /// | |</span><br><span class="hljs-comment"> *             | \_| ''\---/'' | |</span><br><span class="hljs-comment"> *              \ .-\__ `-` ___/-. /</span><br><span class="hljs-comment"> *           ___`. .' /--.--\ `. . __</span><br><span class="hljs-comment"> *        ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".</span><br><span class="hljs-comment"> *       | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="hljs-comment"> *         \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="hljs-comment"> * ======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="hljs-comment"> *                    `=---='</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * .............................................</span><br><span class="hljs-comment"> *          佛祖保佑             永无BUG</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  佛曰:</span><br><span class="hljs-comment"> *          写字楼里写字间，写字间里程序员；</span><br><span class="hljs-comment"> *          程序人员写程序，又拿程序换酒钱。</span><br><span class="hljs-comment"> *          酒醒只在网上坐，酒醉还来网下眠；</span><br><span class="hljs-comment"> *          酒醉酒醒日复日，网上网下年复年。</span><br><span class="hljs-comment"> *          但愿老死电脑间，不愿鞠躬老板前；</span><br><span class="hljs-comment"> *          奔驰宝马贵者趣，公交自行程序员。</span><br><span class="hljs-comment"> *          别人笑我忒疯癫，我笑自己命太贱；</span><br><span class="hljs-comment"> *          不见满街漂亮妹，哪个归得程序员？</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * _ooOoo_</span><br><span class="hljs-comment"> * o8888888o</span><br><span class="hljs-comment"> * 88" . "88</span><br><span class="hljs-comment"> * (| -_- |)</span><br><span class="hljs-comment"> *  O\ = /O</span><br><span class="hljs-comment"> * ___/`---'\____</span><br><span class="hljs-comment"> * .   ' \\| |// `.</span><br><span class="hljs-comment"> * / \\||| : |||// \</span><br><span class="hljs-comment"> * / _||||| -:- |||||- \</span><br><span class="hljs-comment"> * | | \\\ - /// | |</span><br><span class="hljs-comment"> * | \_| ''\---/'' | |</span><br><span class="hljs-comment"> * \ .-\__ `-` ___/-. /</span><br><span class="hljs-comment"> * ___`. .' /--.--\ `. . __</span><br><span class="hljs-comment"> * ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".</span><br><span class="hljs-comment"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="hljs-comment"> * \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="hljs-comment"> * ======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="hljs-comment"> * `=---='</span><br><span class="hljs-comment"> *          .............................................</span><br><span class="hljs-comment"> *           佛曰：bug泛滥，我已瘫痪！</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   █████▒█    ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗</span><br><span class="hljs-comment"> * ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝</span><br><span class="hljs-comment"> * ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗</span><br><span class="hljs-comment"> * ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║</span><br><span class="hljs-comment"> * ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝</span><br><span class="hljs-comment"> *  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝</span><br><span class="hljs-comment"> *  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░</span><br><span class="hljs-comment"> *  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░</span><br><span class="hljs-comment"> *           ░     ░ ░      ░  ░</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *                    .::::.</span><br><span class="hljs-comment"> *                  .::::::::.</span><br><span class="hljs-comment"> *                 :::::::::::  FUCK YOU</span><br><span class="hljs-comment"> *             ..:::::::::::'</span><br><span class="hljs-comment"> *           '::::::::::::'</span><br><span class="hljs-comment"> *             .::::::::::</span><br><span class="hljs-comment"> *        '::::::::::::::..</span><br><span class="hljs-comment"> *             ..::::::::::::.</span><br><span class="hljs-comment"> *           ``::::::::::::::::</span><br><span class="hljs-comment"> *            ::::``:::::::::'        .:::.</span><br><span class="hljs-comment"> *           ::::'   ':::::'       .::::::::.</span><br><span class="hljs-comment"> *         .::::'      ::::     .:::::::'::::.</span><br><span class="hljs-comment"> *        .:::'       :::::  .:::::::::' ':::::.</span><br><span class="hljs-comment"> *       .::'        :::::.:::::::::'      ':::::.</span><br><span class="hljs-comment"> *      .::'         ::::::::::::::'         ``::::.</span><br><span class="hljs-comment"> *  ...:::           ::::::::::::'              ``::.</span><br><span class="hljs-comment"> * ```` ':.          ':::::::::'                  ::::..</span><br><span class="hljs-comment"> *                    '.:::::'                    ':'````..</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *      ┌─┐       ┌─┐</span><br><span class="hljs-comment"> *   ┌──┘ ┴───────┘ ┴──┐</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   │       ───       │</span><br><span class="hljs-comment"> *   │  ─┬┘       └┬─  │</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   │       ─┴─       │</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   └───┐         ┌───┘</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         └──────────────┐</span><br><span class="hljs-comment"> *       │                        │</span><br><span class="hljs-comment"> *       │                        ├─┐</span><br><span class="hljs-comment"> *       │                        ┌─┘</span><br><span class="hljs-comment"> *       │                        │</span><br><span class="hljs-comment"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘</span><br><span class="hljs-comment"> *         │ ─┤ ─┤       │ ─┤ ─┤</span><br><span class="hljs-comment"> *         └──┴──┘       └──┴──┘</span><br><span class="hljs-comment"> *                神兽保佑</span><br><span class="hljs-comment"> *               代码无BUG!</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *      ┌─┐       ┌─┐</span><br><span class="hljs-comment"> *   ┌──┘ ┴───────┘ ┴──┐</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   │       ───       │</span><br><span class="hljs-comment"> *   │   &gt;        &lt;    │</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   │   ...  ⌒  ...   │</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   └───┐         ┌───┘</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         └──────────────┐</span><br><span class="hljs-comment"> *       │                        │</span><br><span class="hljs-comment"> *       │                        ├─┐</span><br><span class="hljs-comment"> *       │                        ┌─┘</span><br><span class="hljs-comment"> *       │                        │</span><br><span class="hljs-comment"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘</span><br><span class="hljs-comment"> *         │ ─┤ ─┤       │ ─┤ ─┤</span><br><span class="hljs-comment"> *         └──┴──┘       └──┴──┘</span><br><span class="hljs-comment"> *                神兽保佑</span><br><span class="hljs-comment"> *               代码无BUG!</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *      ┌─┐       ┌─┐ + +</span><br><span class="hljs-comment"> *   ┌──┘ ┴───────┘ ┴──┐++</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   │       ───       │++ + + +</span><br><span class="hljs-comment"> *   ███████───███████ │+</span><br><span class="hljs-comment"> *   │                 │+</span><br><span class="hljs-comment"> *   │       ─┴─       │</span><br><span class="hljs-comment"> *   │                 │</span><br><span class="hljs-comment"> *   └───┐         ┌───┘</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         │   + +</span><br><span class="hljs-comment"> *       │         │</span><br><span class="hljs-comment"> *       │         └──────────────┐</span><br><span class="hljs-comment"> *       │                        │</span><br><span class="hljs-comment"> *       │                        ├─┐</span><br><span class="hljs-comment"> *       │                        ┌─┘</span><br><span class="hljs-comment"> *       │                        │</span><br><span class="hljs-comment"> *       └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + +</span><br><span class="hljs-comment"> *         │ ─┤ ─┤       │ ─┤ ─┤</span><br><span class="hljs-comment"> *         └──┴──┘       └──┴──┘  + + + +</span><br><span class="hljs-comment"> *                神兽保佑</span><br><span class="hljs-comment"> *               代码无BUG!</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *                  ___====-_  _-====___</span><br><span class="hljs-comment"> *            _--^^^#####//      \\#####^^^--_</span><br><span class="hljs-comment"> *         _-^##########// (    ) \\##########^-_</span><br><span class="hljs-comment"> *        -############//  |\^^/|  \\############-</span><br><span class="hljs-comment"> *      _/############//   (@::@)   \\############\_</span><br><span class="hljs-comment"> *     /#############((     \\//     ))#############\</span><br><span class="hljs-comment"> *    -###############\\    (oo)    //###############-</span><br><span class="hljs-comment"> *   -#################\\  / VV \  //#################-</span><br><span class="hljs-comment"> *  -###################\\/      \//###################-</span><br><span class="hljs-comment"> * _#/|##########/\######(   /\   )######/\##########|\#_</span><br><span class="hljs-comment"> * |/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|</span><br><span class="hljs-comment"> * `  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '</span><br><span class="hljs-comment"> *    `   `  `      `   / | |  | | \   '      '  '   '</span><br><span class="hljs-comment"> *                     (  | |  | |  )</span><br><span class="hljs-comment"> *                    __\ | |  | | /__</span><br><span class="hljs-comment"> *                   (vvv(VVV)(VVV)vvv)                </span><br><span class="hljs-comment"> *                        神兽保佑</span><br><span class="hljs-comment"> *                       代码无BUG!</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *                                                    __----~~~~~~~~~~~------___</span><br><span class="hljs-comment"> *                                   .  .   ~~//====......          __--~ ~~</span><br><span class="hljs-comment"> *                   -.            \_|//     |||\\  ~~~~~~::::... /~</span><br><span class="hljs-comment"> *                ___-==_       _-~o~  \/    |||  \\            _/~~-</span><br><span class="hljs-comment"> *        __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~</span><br><span class="hljs-comment"> *    _-~~     .=~    |  \\-_    '-~7  /-   /  ||    \      /</span><br><span class="hljs-comment"> *  .~       .~       |   \\ -_    /  /-   /   ||      \   /</span><br><span class="hljs-comment"> * /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /</span><br><span class="hljs-comment"> * |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\</span><br><span class="hljs-comment"> *          '         ~-|      /|    |-~\~~       __--~~</span><br><span class="hljs-comment"> *                      |-~~-_/ |    |   ~\_   _-~            /\</span><br><span class="hljs-comment"> *                           /  \     \__   \/~                \__</span><br><span class="hljs-comment"> *                       _--~ _/ | .-~~____--~-/                  ~~==.</span><br><span class="hljs-comment"> *                      ((-&gt;/~   '.|||' -_|    ~~-/ ,              . _||</span><br><span class="hljs-comment"> *                                 -_     ~\      ~~---l__i__i__i--~~_/</span><br><span class="hljs-comment"> *                                 _-~-__   ~)  \--______________--~~</span><br><span class="hljs-comment"> *                               //.-~~~-~_--~- |-------~~~~~~~~</span><br><span class="hljs-comment"> *                                      //.-~~~--\</span><br><span class="hljs-comment"> *                               神兽保佑</span><br><span class="hljs-comment"> *                              代码无BUG!</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**                              _</span><br><span class="hljs-comment"> *  _._ _..._ .-',     _.._(`))</span><br><span class="hljs-comment"> * '-. `     '  /-._.-'    ',/</span><br><span class="hljs-comment"> *    )         \            '.</span><br><span class="hljs-comment"> *   / _    _    |             \</span><br><span class="hljs-comment"> *  |  a    a    /              |</span><br><span class="hljs-comment"> *  \   .-.                     ;</span><br><span class="hljs-comment"> *   '-('' ).-'       ,'       ;</span><br><span class="hljs-comment"> *      '-;           |      .'</span><br><span class="hljs-comment"> *         \           \    /</span><br><span class="hljs-comment"> *         | 7  .__  _.-\   \</span><br><span class="hljs-comment"> *         | |  |  ``/  /`  /</span><br><span class="hljs-comment"> *        /,_|  |   /,_/   /</span><br><span class="hljs-comment"> *           /,_/      '`-'</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> **************************************************************</span><br><span class="hljs-comment"> *                                                            *</span><br><span class="hljs-comment"> *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       *</span><br><span class="hljs-comment"> *    |                     ______                     |      *</span><br><span class="hljs-comment"> *    |                  .-"      "-.                  |      *</span><br><span class="hljs-comment"> *    |                 /            \                 |      *</span><br><span class="hljs-comment"> *    |     _          |              |          _     |      *</span><br><span class="hljs-comment"> *    |    ( \         |,  .-.  .-.  ,|         / )    |      *</span><br><span class="hljs-comment"> *    |     &gt; "=._     | )(__/  \__)( |     _.=" &lt;     |      *</span><br><span class="hljs-comment"> *    |    (_/"=._"=._ |/     /\     \| _.="_.="\_)    |      *</span><br><span class="hljs-comment"> *    |           "=._"(_     ^^     _)"_.="           |      *</span><br><span class="hljs-comment"> *    |               "=\__|IIIIII|__/="               |      *</span><br><span class="hljs-comment"> *    |              _.="| \IIIIII/ |"=._              |      *</span><br><span class="hljs-comment"> *    |    _     _.="_.="\          /"=._"=._     _    |      *</span><br><span class="hljs-comment"> *    |   ( \_.="_.="     `--------`     "=._"=._/ )   |      *</span><br><span class="hljs-comment"> *    |    &gt; _.="                            "=._ &lt;    |      *</span><br><span class="hljs-comment"> *    |   (_/                                    \_)   |      *</span><br><span class="hljs-comment"> *    |                                                |      *</span><br><span class="hljs-comment"> *    '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-='      *</span><br><span class="hljs-comment"> *                                                            *</span><br><span class="hljs-comment"> *           LASCIATE OGNI SPERANZA, VOI CH'ENTRATE           *</span><br><span class="hljs-comment"> **************************************************************</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *                                         ,s555SB@@&amp;                          </span><br><span class="hljs-comment"> *                                      :9H####@@@@<span class="hljs-doctag">@Xi</span>                        </span><br><span class="hljs-comment"> *                                     1@@@@@@@@@@@@@@8                       </span><br><span class="hljs-comment"> *                                   ,8@@@@@@@@<span class="hljs-doctag">@B</span>@@@@@@8                      </span><br><span class="hljs-comment"> *                                  :B@@@<span class="hljs-doctag">@X</span>3hi8Bs;B@@@@<span class="hljs-doctag">@Ah</span>,                   </span><br><span class="hljs-comment"> *             ,8i                  r@@<span class="hljs-doctag">@B</span>:     1S ,M@@@@@@#8;                 </span><br><span class="hljs-comment"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@<span class="hljs-doctag">@S</span>                </span><br><span class="hljs-comment"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               </span><br><span class="hljs-comment"> *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@<span class="hljs-doctag">@A</span>               </span><br><span class="hljs-comment"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               </span><br><span class="hljs-comment"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@<span class="hljs-doctag">@B</span>1                </span><br><span class="hljs-comment"> *               .h8h.,A@@<span class="hljs-doctag">@MXSs</span>,           #<span class="hljs-doctag">@H</span>1:    3ssSSX@1                  </span><br><span class="hljs-comment"> *               s ,@@@@@@@@@@@<span class="hljs-doctag">@Xhi</span>,       r#@<span class="hljs-doctag">@X</span>1s9M8    .GA981               </span><br><span class="hljs-comment"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@<span class="hljs-doctag">@BS</span>;i;          </span><br><span class="hljs-comment"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@<span class="hljs-doctag">@MS</span>        </span><br><span class="hljs-comment"> *                s@<span class="hljs-doctag">@MM</span>@@<span class="hljs-doctag">@hsX</span>#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,      </span><br><span class="hljs-comment"> *              :GB@#3G@<span class="hljs-doctag">@Brs</span> ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="hljs-doctag">@B</span>,     </span><br><span class="hljs-comment"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     </span><br><span class="hljs-comment"> *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="hljs-comment"> *      s&amp;HA#@@@@@@@@@@@@@<span class="hljs-doctag">@M</span>89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="hljs-doctag">@r</span>    </span><br><span class="hljs-comment"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@<span class="hljs-doctag">@i</span>    </span><br><span class="hljs-comment"> *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    </span><br><span class="hljs-comment"> *  9@@<span class="hljs-doctag">@X</span>:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="hljs-comment"> *   SH#<span class="hljs-doctag">@B</span>9.rM@@@@@@@@@@@@<span class="hljs-doctag">@B</span>       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    </span><br><span class="hljs-comment"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@<span class="hljs-doctag">@B</span>    </span><br><span class="hljs-comment"> *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@<span class="hljs-doctag">@S</span>   </span><br><span class="hljs-comment"> *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  </span><br><span class="hljs-comment"> *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@<span class="hljs-doctag">@A</span>.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    又看源码，看你妹妹呀！</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *_______________#########_______________________</span><br><span class="hljs-comment"> *______________############_____________________</span><br><span class="hljs-comment"> *______________#############____________________</span><br><span class="hljs-comment"> *_____________##__###########___________________</span><br><span class="hljs-comment"> *____________###__######_#####__________________</span><br><span class="hljs-comment"> *____________###_#######___####_________________</span><br><span class="hljs-comment"> *___________###__##########_####________________</span><br><span class="hljs-comment"> *__________####__###########_####_______________</span><br><span class="hljs-comment"> *________#####___###########__#####_____________</span><br><span class="hljs-comment"> *_______######___###_########___#####___________</span><br><span class="hljs-comment"> *_______#####___###___########___######_________</span><br><span class="hljs-comment"> *______######___###__###########___######_______</span><br><span class="hljs-comment"> *_____######___####_##############__######______</span><br><span class="hljs-comment"> *____#######__#####################_#######_____</span><br><span class="hljs-comment"> *____#######__##############################____</span><br><span class="hljs-comment"> *___#######__######_#################_#######___</span><br><span class="hljs-comment"> *___#######__######_######_#########___######___</span><br><span class="hljs-comment"> *___#######____##__######___######_____######___</span><br><span class="hljs-comment"> *___#######________######____#####_____#####____</span><br><span class="hljs-comment"> *____######________#####_____#####_____####_____</span><br><span class="hljs-comment"> *_____#####________####______#####_____###______</span><br><span class="hljs-comment"> *______#####______;###________###______#________</span><br><span class="hljs-comment"> *________##_______####________####______________</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *             ,%%%%%%%%,</span><br><span class="hljs-comment"> *           ,%%/\%%%%/\%%</span><br><span class="hljs-comment"> *          ,%%%\c "" J/%%%</span><br><span class="hljs-comment"> * %.       %%%%/ o  o \%%%</span><br><span class="hljs-comment"> * `%%.     %%%%    _  |%%%</span><br><span class="hljs-comment"> *  `%%     `%%%%(__Y__)%%'</span><br><span class="hljs-comment"> *  //       ;%%%%`\-/%%%'</span><br><span class="hljs-comment"> * ((       /  `%%%%%%%'</span><br><span class="hljs-comment"> *  \\    .'          |</span><br><span class="hljs-comment"> *   \\  /       \  | |</span><br><span class="hljs-comment"> *    \\/         ) | |</span><br><span class="hljs-comment"> *     \         /_ | |__</span><br><span class="hljs-comment"> *     (___________))))))) 攻城湿</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *        _       _</span><br><span class="hljs-comment"> * __   _(_)_   _(_) __ _ _ __</span><br><span class="hljs-comment"> * \ \ / / \ \ / / |/ _` |'_ \</span><br><span class="hljs-comment"> *  \ V /| |\ V /| | (_| | | | |</span><br><span class="hljs-comment"> *   \_/ |_| \_/ |_|\__,_|_| |_|</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * https://gold.xitu.io/</span><br><span class="hljs-comment"> *　　　　１１１　　　　　　　　　　　　　　　　　　　　　　　　　１　　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　１１１　１１１１１１１１１１１１　　　　　　　　　　　１１１　　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　１１　　１１１１１１１１１１１１　　　　　　　　　　１１１１１　　　　　　　　　</span><br><span class="hljs-comment"> *　　　　１１　　１１１　　　　　　　１１　　　　　　　　　１１１１１１１　　　　　　　　</span><br><span class="hljs-comment"> *　　１１１１　１　１１１１１１１１１１１　　　　　　　　　１１１　１１１１　　　　　　　</span><br><span class="hljs-comment"> *　　１１１１１１　１１１１１１１１１１１　　　　　　　１１１１　　　１１１１１　　　　　</span><br><span class="hljs-comment"> *　　１１１１１１　１１　　　　　　　　　　　　　　　１１１１　　　　　１１１１１１　　　</span><br><span class="hljs-comment"> *　　　　１１　　　１１１１１１１１　１１　　　　１１１１１１１１１１１１１１１１１１　　</span><br><span class="hljs-comment"> *　　　　１１　　　１１１１１１１１１１１　　　１１１１１１１１１１１１１１１１１１１　　</span><br><span class="hljs-comment"> *　　　　１１１１１１１１１　１１　　１１　　　　１１　　　　　　１１　　　　　　　　　　</span><br><span class="hljs-comment"> *　　１１１１１１１１１１１１１１１１１１　　　　　　　　　　　　１１　　　　　　　　　　</span><br><span class="hljs-comment"> *　　１１１１　　１１１１１１１１１１１１　　　　　　１１１１１１１１１１１１１１　　　　</span><br><span class="hljs-comment"> *　　１１１１　　１１　　　　１１　　　　　　　　　　１１１１１１１１１１１１１１　　　　</span><br><span class="hljs-comment"> *　　　　１１　　１１　１１　１１　　１１１　　　　　　１１　　　１１　　１１１　　　　　</span><br><span class="hljs-comment"> *　　　　１１　　１１　１１　１１　　１１　　　　　　　１１１　　１１　　１１１　　　　　</span><br><span class="hljs-comment"> *　　　　１１　１１１　１１　１１　　１１　　　　　　　　１１１　１１　１１１　　　　　　</span><br><span class="hljs-comment"> *　　１１１１　１１１　１１１１１１１１１　　　　　１１　１１１　１１　１１１１１１１　　</span><br><span class="hljs-comment"> *　　　１１１１１１　　１１１１１１１１１１　　　　１１１１１１１１１１１１１１１１１　　</span><br><span class="hljs-comment"> *　　　１１　１１１　　　　　　　　　１１１　　　　１１１１１１１１１１１１１１１１１　　</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * https://www.zhihu.com/</span><br><span class="hljs-comment"> *           _____                    _____                    _____                    _____          </span><br><span class="hljs-comment"> *          /\    \                  /\    \                  /\    \                  /\    \         </span><br><span class="hljs-comment"> *         /::\____\                /::\    \                /::\    \                /::\    \        </span><br><span class="hljs-comment"> *        /:::/    /                \:::\    \              /::::\    \              /::::\    \       </span><br><span class="hljs-comment"> *       /:::/    /                  \:::\    \            /::::::\    \            /::::::\    \      </span><br><span class="hljs-comment"> *      /:::/    /                    \:::\    \          /:::/\:::\    \          /:::/\:::\    \     </span><br><span class="hljs-comment"> *     /:::/____/                      \:::\    \        /:::/__\:::\    \        /:::/__\:::\    \    </span><br><span class="hljs-comment"> *    /::::\    \                      /::::\    \      /::::\   \:::\    \      /::::\   \:::\    \   </span><br><span class="hljs-comment"> *   /::::::\    \   _____    ____    /::::::\    \    /::::::\   \:::\    \    /::::::\   \:::\    \  </span><br><span class="hljs-comment"> *  /:::/\:::\    \ /\    \  /\   \  /:::/\:::\    \  /:::/\:::\   \:::\____\  /:::/\:::\   \:::\    \</span><br><span class="hljs-comment"> * /:::/  \:::\    /::\____\/::\   \/:::/  \:::\____\/:::/  \:::\   \:::|    |/:::/__\:::\   \:::\____\</span><br><span class="hljs-comment"> * \::/    \:::\  /:::/    /\:::\  /:::/    \::/    /\::/   |::::\  /:::|____|\:::\   \:::\   \::/    /</span><br><span class="hljs-comment"> *  \/____/ \:::\/:::/    /  \:::\/:::/    / \/____/  \/____|:::::\/:::/    /  \:::\   \:::\   \/____/</span><br><span class="hljs-comment"> *           \::::::/    /    \::::::/    /                 |:::::::::/    /    \:::\   \:::\    \     </span><br><span class="hljs-comment"> *            \::::/    /      \::::/____/                  |::|\::::/    /      \:::\   \:::\____\    </span><br><span class="hljs-comment"> *            /:::/    /        \:::\    \                  |::| \::/____/        \:::\   \::/    /    </span><br><span class="hljs-comment"> *           /:::/    /          \:::\    \                 |::|  ~|               \:::\   \/____/     </span><br><span class="hljs-comment"> *          /:::/    /            \:::\    \                |::|   |                \:::\    \         </span><br><span class="hljs-comment"> *         /:::/    /              \:::\____\               \::|   |                 \:::\____\        </span><br><span class="hljs-comment"> *         \::/    /                \::/    /                \:|   |                  \::/    /        </span><br><span class="hljs-comment"> *          \/____/                  \/____/                  \|___|                   \/____/         </span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * http://www.freebuf.com/</span><br><span class="hljs-comment"> *           _.._        ,------------.</span><br><span class="hljs-comment"> *        ,'      `.    ( We want you! )</span><br><span class="hljs-comment"> *       /  __) __` \    `-,----------'</span><br><span class="hljs-comment"> *      (  (`-`(-')  ) _.-'</span><br><span class="hljs-comment"> *      /)  \  = /  (</span><br><span class="hljs-comment"> *     /'    |--' .  \</span><br><span class="hljs-comment"> *    (  ,---|  `-.)__`</span><br><span class="hljs-comment"> *     )(  `-.,--'   _`-.</span><br><span class="hljs-comment"> *    '/,'          (  Uu",</span><br><span class="hljs-comment"> *     (_       ,    `/,-' )</span><br><span class="hljs-comment"> *     `.__,  : `-'/  /`--'</span><br><span class="hljs-comment"> *       |     `--'  |</span><br><span class="hljs-comment"> *       `   `-._   /</span><br><span class="hljs-comment"> *        \        (</span><br><span class="hljs-comment"> *        /\ .      \.  freebuf</span><br><span class="hljs-comment"> *       / |` \     ,-\</span><br><span class="hljs-comment"> *      /  \| .)   /   \</span><br><span class="hljs-comment"> *     ( ,'|\    ,'     :</span><br><span class="hljs-comment"> *     | \,`.`--"/      }</span><br><span class="hljs-comment"> *     `,'    \  |,'    /</span><br><span class="hljs-comment"> *    / "-._   `-/      |</span><br><span class="hljs-comment"> *    "-.   "-.,'|     ;</span><br><span class="hljs-comment"> *   /        _/["---'""]</span><br><span class="hljs-comment"> *  :        /  |"-     '</span><br><span class="hljs-comment"> *  '           |      /</span><br><span class="hljs-comment"> *              `      |</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * https://campus.alibaba.com/</span><br><span class="hljs-comment"> *                                 `:::::::::::,</span><br><span class="hljs-comment"> *                             `::;:::::::;:::::::,  `</span><br><span class="hljs-comment"> *                          `::;;:::::::@@@@;:::::::`</span><br><span class="hljs-comment"> *                        ,:::::::::::::@    #@':::::`</span><br><span class="hljs-comment"> *                      :::::::::::::::'@@      @;::::</span><br><span class="hljs-comment"> *                    ::::::::::::'@@@@'```      .+:::`</span><br><span class="hljs-comment"> *                  ::::::::::;@@@#.              ,:::,</span><br><span class="hljs-comment"> *                .::::::::+@#@`                   ::::</span><br><span class="hljs-comment"> *               :::::::+@@'                       ::::</span><br><span class="hljs-comment"> *             `:::::'@@:                         `:::.</span><br><span class="hljs-comment"> *            ,::::@@:  `                         ::::</span><br><span class="hljs-comment"> *           ;::::::@                            .:::;</span><br><span class="hljs-comment"> *          :;:::::;@`        `                  :::;</span><br><span class="hljs-comment"> *         :::::::::@`        @                 ;::::</span><br><span class="hljs-comment"> *        :::::::::#`          @`              ,::::</span><br><span class="hljs-comment"> *       :::::::::@`         +@ @             .::::`</span><br><span class="hljs-comment"> *      .::::::'@@`       `@@'  @             ::::,</span><br><span class="hljs-comment"> *      :::::::++@@@@@@@@@@.                 ::::;</span><br><span class="hljs-comment"> *     ;:::::::+,   `..`                    :::::</span><br><span class="hljs-comment"> *    ,::::::::',                          :::::</span><br><span class="hljs-comment"> *    :::::::::+,                         :::::`</span><br><span class="hljs-comment"> *   :::::::::+@.                        ,::::.`                     `,</span><br><span class="hljs-comment"> *   ::::::;;@+                         .::;::                     `;</span><br><span class="hljs-comment"> *  :::::::@@                          `:::;:                   `::``</span><br><span class="hljs-comment"> *  ::::::#@                           ;::::                  .::`</span><br><span class="hljs-comment"> *  :::::;@                           :::::`               .;::`</span><br><span class="hljs-comment"> *  :::::@                           `:;:::            `::::;</span><br><span class="hljs-comment"> *  :::::#                           :::::.        `,;:::::</span><br><span class="hljs-comment"> *  ::::::                    `      ::::::,.,::::::::::.</span><br><span class="hljs-comment"> *  ,::::::`              .::        ::::::::::::::::;`</span><br><span class="hljs-comment"> *   ;::::::::,````.,:::::,          ::::::::::::::.</span><br><span class="hljs-comment"> *    :::::::::::::::::: `           `::::::::::`</span><br><span class="hljs-comment"> *     `::::::::::::,                  .:::.</span><br><span class="hljs-comment"> *         `..`</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * http://www.flvcd.com/</span><br><span class="hljs-comment"> *  .--,       .--,</span><br><span class="hljs-comment"> * ( (  \.---./  ) )</span><br><span class="hljs-comment"> *  '.__/o   o\__.'</span><br><span class="hljs-comment"> *     {=  ^  =}</span><br><span class="hljs-comment"> *      &gt;  -  &lt;</span><br><span class="hljs-comment"> *     /       \</span><br><span class="hljs-comment"> *    //       \\</span><br><span class="hljs-comment"> *   //|   .   |\\</span><br><span class="hljs-comment"> *   "'\       /'"_.-~^`'-.</span><br><span class="hljs-comment"> *      \  _  /--'         `</span><br><span class="hljs-comment"> *    ___)( )(___</span><br><span class="hljs-comment"> *   (((__) (__)))    高山仰止,景行行止.虽不能至,心向往之。</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span><br><span class="hljs-comment"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span><br><span class="hljs-comment"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="hljs-comment"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="hljs-comment"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span><br><span class="hljs-comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="hljs-comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="hljs-comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="hljs-comment"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="hljs-comment"> * 　　　頂頂　　　　　　　頂頂頂　</span><br><span class="hljs-comment"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span><br><span class="hljs-comment"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span><br><span class="hljs-comment"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░</span><br><span class="hljs-comment"> * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░</span><br><span class="hljs-comment"> * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐</span><br><span class="hljs-comment"> * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐</span><br><span class="hljs-comment"> * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐</span><br><span class="hljs-comment"> * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌</span><br><span class="hljs-comment"> * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒</span><br><span class="hljs-comment"> * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐</span><br><span class="hljs-comment"> * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄</span><br><span class="hljs-comment"> * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒</span><br><span class="hljs-comment"> * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒</span><br><span class="hljs-comment"> * 单身狗就这样默默地看着你，一句话也不说。</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *                   /88888888888888888888888888\</span><br><span class="hljs-comment"> *                   |88888888888888888888888888/</span><br><span class="hljs-comment"> *                    |~~____~~~~~~~~~"""""""""|</span><br><span class="hljs-comment"> *                   / \_________/"""""""""""""\</span><br><span class="hljs-comment"> *                  /  |              \         \</span><br><span class="hljs-comment"> *                 /   |  88    88     \         \</span><br><span class="hljs-comment"> *                /    |  88    88      \         \</span><br><span class="hljs-comment"> *               /    /                  \        |</span><br><span class="hljs-comment"> *              /     |   ________        \       |</span><br><span class="hljs-comment"> *              \     |   \______/        /       |</span><br><span class="hljs-comment"> *   /"\         \     \____________     /        |</span><br><span class="hljs-comment"> *   | |__________\_        |  |        /        /</span><br><span class="hljs-comment"> * /""""\           \_------'  '-------/       --</span><br><span class="hljs-comment"> * \____/,___________\                 -------/</span><br><span class="hljs-comment"> * ------*            |                    \</span><br><span class="hljs-comment"> *   ||               |                     \</span><br><span class="hljs-comment"> *   ||               |                 ^    \</span><br><span class="hljs-comment"> *   ||               |                | \    \</span><br><span class="hljs-comment"> *   ||               |                |  \    \</span><br><span class="hljs-comment"> *   ||               |                |   \    \</span><br><span class="hljs-comment"> *   \|              /                /"""\/    /</span><br><span class="hljs-comment"> *      -------------                |    |    /</span><br><span class="hljs-comment"> *      |\--_                        \____/___/</span><br><span class="hljs-comment"> *      |   |\-_                       |</span><br><span class="hljs-comment"> *      |   |   \_                     |</span><br><span class="hljs-comment"> *      |   |     \                    |</span><br><span class="hljs-comment"> *      |   |      \_                  |</span><br><span class="hljs-comment"> *      |   |        ----___           |</span><br><span class="hljs-comment"> *      |   |               \----------|</span><br><span class="hljs-comment"> *      /   |                     |     ----------""\</span><br><span class="hljs-comment"> * /"\--"--_|                     |               |  \</span><br><span class="hljs-comment"> * |_______/                      \______________/    )</span><br><span class="hljs-comment"> *                                               \___/</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *                        d*##$.</span><br><span class="hljs-comment"> *  zP"""""$e.           $"    $o</span><br><span class="hljs-comment"> * 4$       '$          $"      $</span><br><span class="hljs-comment"> * '$        '$        J$       $F</span><br><span class="hljs-comment"> *  'b        $k       $&gt;       $</span><br><span class="hljs-comment"> *   $k        $r     J$       d$</span><br><span class="hljs-comment"> *   '$         $     $"       $~</span><br><span class="hljs-comment"> *    '$        "$   '$E       $</span><br><span class="hljs-comment"> *     $         $L   $"      $F ...</span><br><span class="hljs-comment"> *      $.       4B   $      $$$*"""*b</span><br><span class="hljs-comment"> *      '$        $.  $$     $$      $F</span><br><span class="hljs-comment"> *       "$       R$  $F     $"      $</span><br><span class="hljs-comment"> *        $k      ?$ u*     dF      .$</span><br><span class="hljs-comment"> *        ^$.      $$"     z$      u$$$$e</span><br><span class="hljs-comment"> *         #$b             $E.dW@e$"    ?$</span><br><span class="hljs-comment"> *          #$           .o$$# d$$$$c    ?F</span><br><span class="hljs-comment"> *           $      .d$$#" . zo$&gt;   #$r .uF</span><br><span class="hljs-comment"> *           $L .u$*"      $&amp;$$$k   .$$d$$F</span><br><span class="hljs-comment"> *            $$"            ""^"$$$P"$P9$</span><br><span class="hljs-comment"> *           JP              .o$$$$u:$P $$</span><br><span class="hljs-comment"> *           $          ..ue$"      ""  $"</span><br><span class="hljs-comment"> *          d$          $F              $</span><br><span class="hljs-comment"> *          $$     ....udE             4B</span><br><span class="hljs-comment"> *           #$    """"` $r            @$</span><br><span class="hljs-comment"> *            ^$L        '$            $F</span><br><span class="hljs-comment"> *              RN        4N           $</span><br><span class="hljs-comment"> *               *$b                  d$</span><br><span class="hljs-comment"> *                $$k                 $F</span><br><span class="hljs-comment"> *                 $$b                $F</span><br><span class="hljs-comment"> *                  $""               $F</span><br><span class="hljs-comment"> *                  '$                $</span><br><span class="hljs-comment"> *                   $L               $</span><br><span class="hljs-comment"> *                   '$               $</span><br><span class="hljs-comment"> *                    $               $</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *              ,----------------,              ,---------,</span><br><span class="hljs-comment"> *         ,-----------------------,          ,"        ,"|</span><br><span class="hljs-comment"> *       ,"                      ,"|        ,"        ,"  |</span><br><span class="hljs-comment"> *      +-----------------------+  |      ,"        ,"    |</span><br><span class="hljs-comment"> *      |  .-----------------.  |  |     +---------+      |</span><br><span class="hljs-comment"> *      |  |                 |  |  |     | -==----'|      |</span><br><span class="hljs-comment"> *      |  |  I LOVE DOS!    |  |  |     |         |      |</span><br><span class="hljs-comment"> *      |  |  Bad command or |  |  |/----|`---=    |      |</span><br><span class="hljs-comment"> *      |  |  C:\&gt;_          |  |  |   ,/|==== ooo |      ;</span><br><span class="hljs-comment"> *      |  |                 |  |  |  // |(((( [33]|    ,"</span><br><span class="hljs-comment"> *      |  `-----------------'  |," .;'| |((((     |  ,"</span><br><span class="hljs-comment"> *      +-----------------------+  ;;  | |         |,"</span><br><span class="hljs-comment"> *         /_)______________(_/  //'   | +---------+</span><br><span class="hljs-comment"> *    ___________________________/___  `,</span><br><span class="hljs-comment"> *   /  oooooooooooooooo  .o.  oooo /,   \,"-----------</span><br><span class="hljs-comment"> *  / ==ooooooooooooooo==.o.  ooo= //   ,`\--{)B     ,"</span><br><span class="hljs-comment"> * /_==__==========__==_ooo__ooo=_/'   /___________,"</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *                 .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span><br><span class="hljs-comment"> *             __.'              ~.   .~              `.__</span><br><span class="hljs-comment"> *           .'//                  \./                  \\`.</span><br><span class="hljs-comment"> *         .'//                     |                     \\`.</span><br><span class="hljs-comment"> *       .'// .-~"""""""~~~~-._     |     _,-~~~~"""""""~-. \\`.</span><br><span class="hljs-comment"> *     .'//.-"                 `-.  |  .-'                 "-.\\`.</span><br><span class="hljs-comment"> *   .'//______.============-..   \ | /   ..-============.______\\`.</span><br><span class="hljs-comment"> * .'______________________________\|/______________________________`.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-comment">/**             无可奉告 一颗赛艇</span><br><span class="hljs-comment"> *  uJjYJYYLLv7r7vJJ5kqSFFFUUjJ7rrr7LLYLJLJ7</span><br><span class="hljs-comment"> *  JuJujuYLrvuEM@@<span class="hljs-doctag">@B</span>@@<span class="hljs-doctag">@B</span><span class="hljs-doctag">@B</span><span class="hljs-doctag">@B</span>@@<span class="hljs-doctag">@MG</span>5Y7vLjYjJL</span><br><span class="hljs-comment"> *  JYjYJvr7XM@BB8GOOE8ZEEO8GqM8OBBBMu77LLJ7</span><br><span class="hljs-comment"> *  LJLY7ru@@<span class="hljs-doctag">@BOZ</span>8O8NXFFuSkSu25X0OFZ8MZJ;vLv</span><br><span class="hljs-comment"> *  YvL7i5@BM8OGGqk22uvriiriii;r7LuSZXEMXrvr</span><br><span class="hljs-comment"> *  vv7iU@BMNkF1uY7v7rr;iiii:i:i:ii7JEPNBPir</span><br><span class="hljs-comment"> *  L7iL@BM8Xjuujvv77rr;ri;i;:iiiii:iLXFOBJ:</span><br><span class="hljs-comment"> *  7ri@B@MOFuUS2Y7L7777rii;:::::i:iirjPG@O:</span><br><span class="hljs-comment"> *  7:1B@BBOPjXXSJvrL7rr7iiii:i::::i;iv5MBB,</span><br><span class="hljs-comment"> *  r:0@BBM8SFPX2Y77rri::iirri:::::iii75O@G.</span><br><span class="hljs-comment"> *  7:SB@BBGqXPk0122UJL::i::r:::i:i;i:v2@Bk.</span><br><span class="hljs-comment"> *  ri:MB@BBEqEMGq2JLLL1u7.iX51u77LF27iSB@r,</span><br><span class="hljs-comment"> *  ri,v@B@MB8@qqNEqN1u:5B8BOFE0S7ii7qMB@F::</span><br><span class="hljs-comment"> *  ii,J80Eq1MZkqPPX5YkPE@B@iXPE52j7:vBjE7::</span><br><span class="hljs-comment"> *  ii:7MSqkS0PvLv7rrii0@L.Z1iLr::ir:rO,vi::</span><br><span class="hljs-comment"> *  ii::EZXPSkquLvii:iF@N:.,BUi7ri,::UY;r:::</span><br><span class="hljs-comment"> *  i::.2ONXqkPXS5FUUEOPP;..iSPXkjLYLLrr:::,</span><br><span class="hljs-comment"> *  :::,iMXNP0NPLriiLGZ@BB1P87;JuL7r:7ri:::,</span><br><span class="hljs-comment"> *  :::,.UGqNX0EZF2uUjUuULr:::,:7uuvv77::::.</span><br><span class="hljs-comment"> *  ::::..5OXqXNJ50NSY;i:.,,,:i77Yvr;v;,,::.</span><br><span class="hljs-comment"> *  :::,:.jOEPqPJiqBMMMO8NqP0SYLJriirv:.:,:.</span><br><span class="hljs-comment"> *  ,:,,,.,Zq0P0X7vPFqF1ujLv7r:irrr7j7.,,::.</span><br><span class="hljs-comment"> *  ,,,....0qk0080v75ujLLv7ri:i:rvj2J...,,,.</span><br><span class="hljs-comment"> *  ......8@UXqZEMNvJjr;ii::,:::7uuv...,.,,.</span><br><span class="hljs-comment"> *  .....B@BOvX88GMGk52vririiirJS1i.......,.</span><br><span class="hljs-comment"> *  .JEMB@B@BMvL0MOMMMO8PE8GPqSk2L:.........</span><br><span class="hljs-comment"> *  <span class="hljs-doctag">@B</span>@@<span class="hljs-doctag">@B</span><span class="hljs-doctag">@M</span><span class="hljs-doctag">@B</span><span class="hljs-doctag">@L</span>:7PGBOO8MOMOEP0Xri@B@Mk7,...</span><br><span class="hljs-comment"> *  B@B@BBMBB@B@0::rJP8MO0uvvu7..,B@B@B@B@Z7</span><br><span class="hljs-comment"> *  MMBM@BBB@B@B@Br:i,..:Lur:....7@OMMBM@B@@</span><br><span class="hljs-comment"> *  8OOMMMOMMMMBB@B:....,PZENNi..JBOZ8GMOOOO</span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个公司没有年终奖的,兄弟别指望了,也别来了,我准备辞职了</span><br><span class="hljs-comment"> * 另外这个项目有很多*Bug* 你坚持不了多久的,拜拜!</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1只羊 == one sheep</span><br><span class="hljs-comment"> * 2只羊 == two sheeps</span><br><span class="hljs-comment"> * 3只羊 == three sheeps</span><br><span class="hljs-comment"> * 4只羊 == four sheeps</span><br><span class="hljs-comment"> * 5只羊 == five sheeps</span><br><span class="hljs-comment"> * 6只羊 == six sheeps</span><br><span class="hljs-comment"> * 7只羊 == seven sheeps</span><br><span class="hljs-comment"> * 8只羊 == eight sheeps</span><br><span class="hljs-comment"> * 9只羊 == nine sheeps</span><br><span class="hljs-comment"> * 10只羊 == ten sheeps</span><br><span class="hljs-comment"> * 11只羊 == eleven sheeps</span><br><span class="hljs-comment"> * 12只羊 == twelve sheeps</span><br><span class="hljs-comment"> * 13只羊 == thirteen sheeps</span><br><span class="hljs-comment"> * 14只羊 == fourteen sheeps</span><br><span class="hljs-comment"> * 15只羊 == fifteen sheeps</span><br><span class="hljs-comment"> * 16只羊 == sixteen sheeps</span><br><span class="hljs-comment"> * 17只羊 == seventeen sheeps</span><br><span class="hljs-comment"> * 18只羊 == eighteen sheeps</span><br><span class="hljs-comment"> * 19只羊 == nineteen sheeps</span><br><span class="hljs-comment"> * 20只羊 == twenty sheeps</span><br><span class="hljs-comment"> * 21只羊 == twenty one sheeps</span><br><span class="hljs-comment"> * 22只羊 == twenty two sheeps</span><br><span class="hljs-comment"> * 23只羊 == twenty three sheeps</span><br><span class="hljs-comment"> * 24只羊 == twenty four sheeps</span><br><span class="hljs-comment"> * 25只羊 == twenty five sheeps</span><br><span class="hljs-comment"> * 26只羊 == twenty six sheeps</span><br><span class="hljs-comment"> * 27只羊 == twenty seven sheeps</span><br><span class="hljs-comment"> * 28只羊 == twenty eight sheeps</span><br><span class="hljs-comment"> * 29只羊 == twenty nine sheeps</span><br><span class="hljs-comment"> * 30只羊 == thirty sheeps</span><br><span class="hljs-comment"> * 现在瞌睡了吧，好了，不要再改下面的代码了，睡觉咯~~</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * You may think you know what the following code does.</span><br><span class="hljs-comment"> * But you dont. Trust me.</span><br><span class="hljs-comment"> * Fiddle with it, and youll spend many a sleepless</span><br><span class="hljs-comment"> * night cursing the moment you thought youd be clever</span><br><span class="hljs-comment"> * enough to "optimize" the code below.</span><br><span class="hljs-comment"> * Now close this file and go play with something else.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 你可能会认为你读得懂以下的代码。但是你不会懂的，相信我吧。</span><br><span class="hljs-comment"> * 要是你尝试玩弄这段代码的话，你将会在无尽的通宵中不断地咒骂自己为什么会认为自己聪明到可以优化这段代码。</span><br><span class="hljs-comment"> * 现在请关闭这个文件去玩点别的吧。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * somedev1 -  6/7/02 Adding temporary tracking of Login screen</span><br><span class="hljs-comment"> * somedev2 -  5/22/07 Temporary my ass</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一些修改1 - 2002/6/7 增加临时的跟踪登录界面</span><br><span class="hljs-comment"> * 一些修改2 - 2007/5/22 我临时的犯傻</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 程序员1（于2010年6月7日）：在这个坑临时加入一些调料</span><br><span class="hljs-comment"> * 程序员2（于2011年5月22日）：临你个屁啊</span><br><span class="hljs-comment"> * 程序员3（于2012年7月23日）：楼上都是狗屎，鉴定完毕</span><br><span class="hljs-comment"> * 程序员4（于2013年8月2日）：fuck 楼上，三年了，这坑还在！！！</span><br><span class="hljs-comment"> * 程序员5（于2014年8月21日）：哈哈哈，这坑居然坑了这么多人，幸好我也不用填了，系统终止运行了，you're died</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * For the brave souls who get this far: You are the chosen ones,</span><br><span class="hljs-comment"> * the valiant knights of programming who toil away, without rest,</span><br><span class="hljs-comment"> * fixing our most awful code. To you, true saviors, kings of men,</span><br><span class="hljs-comment"> * I say this: never gonna give you up, never gonna let you down,</span><br><span class="hljs-comment"> * never gonna run around and desert you. Never gonna make you cry,</span><br><span class="hljs-comment"> * never gonna say goodbye. Never gonna tell a lie and hurt you.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 致终于来到这里的勇敢的人：</span><br><span class="hljs-comment"> * 你是被上帝选中的人，是英勇的、不敌辛苦的、不眠不休的来修改我们这最棘手的代码的编程骑士。</span><br><span class="hljs-comment"> * 你，我们的救世主，人中之龙，我要对你说：永远不要放弃，永远不要对自己失望，永远不要逃走，辜负了自己，</span><br><span class="hljs-comment"> * 永远不要哭啼，永远不要说再见，永远不要说谎来伤害自己。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Dear maintainer:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Once you are done trying to 'optimize' this routine,</span><br><span class="hljs-comment"> * and have realized what a terrible mistake that was,</span><br><span class="hljs-comment"> * please increment the following counter as a warning</span><br><span class="hljs-comment"> * to the next guy:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * total_hours_wasted_here = 42</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 亲爱的维护者：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 如果你尝试了对这段程序进行'优化'</span><br><span class="hljs-comment"> * 下面这个计数器的个数用来对后来人进行警告</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 浪费在这里的总时间 = 42h</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Exception</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">"Something is really wrong."</span>);<br><span class="hljs-keyword">throw</span> up;  <span class="hljs-comment">//ha ha</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * When I wrote this, only God and I understood what I was doing</span><br><span class="hljs-comment"> * Now, God only knows</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 写这段代码的时候，只有上帝和我知道它是干嘛的</span><br><span class="hljs-comment">* 现在，只有上帝知道</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java">stop(); <span class="hljs-comment">// Hammertime!</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Autogenerated, do not edit. All changes will be undone.</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// sometimes I believe compiler ignores all my comments</span><br><span class="hljs-comment">// 有时候我相信编译器忽略了我所有的注释</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * I dedicate all this code, all my work, to my wife, Darlene, who will</span><br><span class="hljs-comment"> * have to support me and our three children and the dog once it gets</span><br><span class="hljs-comment"> * released into the public.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// drunk, fix later</span><br><span class="hljs-comment">// 有点晕了，以后再修改</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Magic. Do not touch.</span><br><span class="hljs-comment">// 麻鸡。勿动。</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java">#define TRUE FALSE<span class="hljs-comment">// Happy debugging suckers</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// I'm sorry.</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; # returns <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Always returns true.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAvailable</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Here be dragons --&gt;</span><br><span class="hljs-comment">&lt;!-- 前方高能 --&gt;</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> penetration; <span class="hljs-comment">// ouch</span><br><span class="hljs-comment">// 自行了解，不方便解释</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/////////////////////////////////////// this is a well commented line</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// To understand recursion, see the bottom of this file</span><br>At the bottom of the file:<br><span class="hljs-comment">// To understand recursion, see the top of this file</span><br><span class="hljs-comment">// 想要明白递归须看文件末尾</span><br>到了文末<br><span class="hljs-comment">// 想要明白递归须看文件顶部</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* Please work */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-type">long</span> ago; <span class="hljs-comment">/* in a galaxy far far away */</span><br><span class="hljs-comment">// 很久很久以前 在一个遥远的银河中（出自星球大战）</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// This code sucks, you know it and I know it.  </span><br><span class="hljs-comment">// Move on and call me an idiot later.</span><br><span class="hljs-comment">// 你我都知道这代码很烂</span><br><span class="hljs-comment">// 先不要骂我2B了，请先继续往下看</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// I am not sure why this works but it fixes the problem.</span><br><span class="hljs-comment">// 虽然我不知道为什么这样管用，但它却是修复了问题</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// If this comment is removed the program will blow up</span><br><span class="hljs-comment">// 如果删了此处注释程序就炸了</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// This function has been here since 1987. DON'T FXXKING TOUCH IT</span><br><span class="hljs-comment">// 这函数1987年就这在了，别他娘动它</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// if i ever see this again i'm going to start bringing guns to work</span><br><span class="hljs-comment">// 如果要是再让我看见这样的代码，也许我会带着一把枪来上班</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// no comments for you</span><br><span class="hljs-comment">// it was hard to write</span><br><span class="hljs-comment">// so it should be hard to read</span><br><span class="hljs-comment">// 难写的代码，肯定很难读。因此，我没有注释留给你。</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// I will give you two of my seventy-two virgins if you can fix this.</span><br><span class="hljs-comment">// 要是你能修正这个问题的话，我会在我的七十二个处女中挑两个送你</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// I am not responsible of this code.</span><br><span class="hljs-comment">// They made me write it, against my will.</span><br><span class="hljs-comment">// 下面的代码，我不负责。因为是他们逼我写的，违背了我的意愿。</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* You are not expected to understand this */</span><br><span class="hljs-comment">/* 你绝不会明白的 */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// I have to find a better job</span><br><span class="hljs-comment">// 看来我需要找份更好的工作了</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这个类是Object的子类</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>保持大脑健康</title>
    <url>//posts/b8cce657/</url>
    <content><![CDATA[<hr>
<h1 id="保持大脑健康的9种方法"><a href="#保持大脑健康的9种方法" class="headerlink" title="保持大脑健康的9种方法"></a>保持大脑健康的9种方法</h1><h2 id="1-规律运动"><a href="#1-规律运动" class="headerlink" title="1. 规律运动"></a>1. 规律运动</h2><ul>
<li><strong>作用</strong>：促进脑血流，增加海马体体积（提升16%），改善记忆和认知  </li>
<li><strong>建议</strong>：每周3-5次有氧运动（如快走、游泳），每次30-60分钟</li>
</ul>
<h2 id="2-打破常规"><a href="#2-打破常规" class="headerlink" title="2. 打破常规"></a>2. 打破常规</h2><p>改变日常习惯，给大脑带来惊喜，避免思维定式；</p>
<h2 id="3-充足睡眠"><a href="#3-充足睡眠" class="headerlink" title="3. 充足睡眠"></a>3. 充足睡眠</h2><ul>
<li><strong>机制</strong>：清除脑内代谢废物，巩固记忆  </li>
<li><strong>建议</strong>：每晚7-9小时，避免睡前使用电子设备</li>
</ul>
<h2 id="4-持续学习新技能"><a href="#4-持续学习新技能" class="headerlink" title="4. 持续学习新技能"></a>4. 持续学习新技能</h2><ul>
<li><strong>推荐活动</strong>：学习语言、乐器、填字游戏或编程  </li>
<li><strong>科学依据</strong>：刺激神经可塑性，增加灰质密度，大脑保持年轻活力</li>
</ul>
<h2 id="5-社交互动"><a href="#5-社交互动" class="headerlink" title="5. 社交互动"></a>5. 社交互动</h2><ul>
<li><strong>作用</strong>：激活多脑区，延缓认知衰退  </li>
<li><strong>建议</strong>：每周面对面交流，加入兴趣小组</li>
</ul>
<h2 id="6-控制血管风险"><a href="#6-控制血管风险" class="headerlink" title="6. 控制血管风险"></a>6. 控制血管风险</h2><ul>
<li><strong>关键指标</strong>：管理高血压、糖尿病、高胆固醇  </li>
<li><strong>方法</strong>：低盐饮食、定期体检、遵医嘱用药—-远离酒精药物烟草</li>
</ul>
<h2 id="7-正念减压"><a href="#7-正念减压" class="headerlink" title="7. 正念减压"></a>7. 正念减压</h2><ul>
<li><strong>实践</strong>：每日冥想5-10分钟，深呼吸练习  </li>
<li><strong>效果</strong>：降低皮质醇，增强情绪调节</li>
</ul>
<h2 id="8-脑力训练"><a href="#8-脑力训练" class="headerlink" title="8. 脑力训练"></a>8. 脑力训练</h2><ul>
<li><strong>推荐</strong>：数独、国际象棋、记忆卡片或Lumosity等APP  </li>
<li><strong>益处</strong>：提升注意力、逻辑思维和反应速度</li>
</ul>
<h2 id="9-补充关键营养素"><a href="#9-补充关键营养素" class="headerlink" title="9. 补充关键营养素"></a>9. 补充关键营养素</h2><ul>
<li>Omega-3（三文鱼、亚麻籽）  </li>
<li>维生素B群（全谷物、绿叶菜）  </li>
<li>抗氧化剂（黑巧克力、石榴）</li>
</ul>
<h2 id="10-电子产品断舍离"><a href="#10-电子产品断舍离" class="headerlink" title="10.电子产品断舍离"></a>10.电子产品断舍离</h2><hr>
<h1 id="如何更好地学习"><a href="#如何更好地学习" class="headerlink" title="如何更好地学习"></a><strong>如何更好地学习</strong></h1><ol>
<li><h6 id="学习资料多样化"><a href="#学习资料多样化" class="headerlink" title="学习资料多样化"></a>学习资料多样化</h6><blockquote>
<p>看视频、翻书、记笔记，等用不同方式去接触知识</p>
</blockquote>
</li>
<li><p>善于联想很重要</p>
<blockquote>
<p>把新学的东西和已懂的概念联系起来</p>
</blockquote>
</li>
<li><p>不要死记硬背</p>
<blockquote>
<p>要琢磨：为什么会这样</p>
</blockquote>
</li>
<li><p>身体是革命的本钱</p>
<blockquote>
<p>睡好-吃好-运动</p>
</blockquote>
</li>
<li><p>学习讲究节奏</p>
<blockquote>
<p>大脑需要休息</p>
</blockquote>
</li>
<li><p>复杂的东西拆解开</p>
<blockquote>
<p>就像吃饭，大口噎到，小口容易消化</p>
</blockquote>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>health</category>
      </categories>
  </entry>
  <entry>
    <title>关于SQLite的各种趣事</title>
    <url>//posts/b4f97437/</url>
    <content><![CDATA[<hr>
<hr>
<hr>
<p>原文链接：<a href="https://avi.im/blag/2024/sqlite-facts/">关于 SQLite 的疯狂和有趣的事实集合 - blag</a></p>
<hr>
<ol>
<li><p>SQLite 是部署最多、使用最多的数据库。有超过一万亿（1000000000000000 或一百万）个 SQLite 数据库正在积极使用。</p>
<p>它由<a href="https://www.sqlite.org/crew.html">三个人</a>维护。他们不允许外部贡献。</p>
</li>
<li><p>SQLite 的使用量可能比所有其他数据库引擎的总和还要多。数十亿个 SQLite 副本存在于野外。它无处不在。</p>
</li>
</ol>
<ol>
<li>它也可能是部署最多的五个软件模块之一。</li>
</ol>
<ol>
<li><p><a href="https://hwaci.com/">Hwaci</a> 是 SQLite 背后的公司。他们也喜欢音乐（？</p>
<p><img src="https://avi.im/blag/images/2024/sqlite-fact-3.png" alt="img"></p>
</li>
<li><p>SQLite 起源于一艘美国军舰。D. Richard Hipp （DRH） 正在为海军驱逐舰 USS Oscar Austin 构建软件。每当服务器出现故障时，现有软件就会停止工作（这是在 2000 年代）。对于一艘战列舰来说，这是不可接受的。</p>
<p>因此，DRH 提出了一个问题：如果数据库在没有任何服务器的情况下工作呢？用 DRH 的话来说：</p>
<blockquote>
<p>为什么我们甚至需要一个服务器？为什么我不能直接从磁盘驱动器上拉出它？这样，如果计算机足够健康，它就可以运行我们的应用程序，我们没有可能失败并导致我们失败的依赖项，我环顾四周，没有 SQL 数据库引擎可以做到这一点，与我一起工作的一个人说，“Richard，你为什么不写一个呢？“好吧，我试一试。”我没有立即这样做，但后来，资金中断了。那是在 2000 年，如果我没记错的话，纽特·金里奇和比尔·克林顿正在发生某种争吵，所以所有的政府合同都被关闭了，所以我失业了几个月，我想，“好吧，我现在就写那个数据库引擎吧。</p>
</blockquote>
</li>
<li><p>与大多数使用标准许可证（如 MIT 或 GPL）的开源项目不同，SQLite 不附带 OSI 批准的许可证。</p>
</li>
</ol>
<p>   相反，SQLite 被发布到公共领域，并且限制更少。</p>
<p>   另请注意，在一些不承认公有领域的国家/地区/司法管辖区，这可能是<a href="https://opensource.org/blog/public-domain-is-not-open-source">一个问题</a>。因此，SQLite <a href="https://www.sqlite.org/purchase/license">出售许可证</a>，称为“所有权保证”。</p>
<ol>
<li>他们不允许外部贡献。<em>你不能</em>只是发送一个 pull request 并希望补丁会被接受。</li>
</ol>
<ol>
<li>开源，而不是开放贡献</li>
</ol>
<p>   为 SQLite 做贡献是仅限邀请的（我没有源代码）。只有在您收到邀请并签署了一份宣誓书，将你的贡献献给公共领域后，你才能提交补丁。</p>
<ol>
<li><p>他们是怎么做饭的？</p>
<p>SQLite 中的每一行代码都有超过 600 行测试代码。测试覆盖库中 100% 的分支（和 100% <a href="https://en.wikipedia.org/wiki/Modified_condition/decision_coverage">的 MC/DC</a>）。该测试套件非常多样化，包括模糊测试、边界值测试、回归测试以及模拟操作系统崩溃、电源损失、I/O 错误和内存不足错误的测试。</p>
<p>SQLite 最初是作为 <a href="https://www.sqlite.org/tclsqlite.html">Tcl 扩展</a>开始的，其主要测试套件是用 Tcl 编写的。</p>
</li>
<li><p>有趣的是，一些 SQLite 测试是专有的。名为 <a href="https://www.sqlite.org/th3.html">TH3 （Test Harness 3）</a> 的测试套件可实现代码的 100% 分支覆盖率，是专有的，不开放访问。</p>
<p>我不知道有任何其他项目使代码免费，但测试套件是付费的。</p>
<p>然而，他们无法销售 TH3 的一份副本。DRH 在播客中说：</p>
<blockquote>
<p>100% MCD 测试，称为 TH3。那是专有的。我的想法是，我们将这些测试出售给航空电子设备制造商，并以这种方式赚钱。我们正好卖了零份，所以这并没有真正奏效。</p>
</blockquote>
<p>为了获得访问权限，需要成为 SQLite Consortium 的一员，每年的费用为 120K 美元。</p>
</li>
<li><p>这是一个有趣的商业模式。他们通过许可证、付费支持、维护服务、联盟成员资格和商业扩展来产生收入。</p>
</li>
<li><p>SQLite 没有行为准则 （CoC），而是源自《圣本笃规则》第 4 章中的“善行工具”的<a href="https://sqlite.org/codeofethics.html">道德准则</a></p>
</li>
</ol>
<ol>
<li>在 SQLite 中：代替法律声明，这里有一个<a href="https://github.com/sqlite/sqlite/blob/624cb96/src/wal.c#L4,#L9">祝福</a>：</li>
</ol>
<pre><code class="hljs">所有的源代码文件都附带了一个祝福。
</code></pre><ol>
<li>SQLite 的速度如此之快，它们与 .对于某些用例，您可以使用 SQLite 而不是文件系统，这可以加快 35% 的速度。<code>fopen</code></li>
</ol>
<ol>
<li>SQLite 与 Redis（猜猜哪个更快？</li>
</ol>
<pre><code class="hljs">对于[某些用例](https://x.com/iavins/status/1849422515027763227)，由于网络堆栈和（反）序列化开销，SQLite 可能比 Redis 更快。
</code></pre><ol>
<li><p>但是，与大多数数据库不同的是，SQLite 只有一个写入器模型。不能有多个并发写入器。</p>
<p>最近在 2010 年，通过添加 WAL 模式，这种情况也发生了变化。在此之前，您可以拥有读者或作家，但永远不能在一起。</p>
</li>
<li><p>还有其他一些事情在其他数据库中很常见，但在 SQLite 中却不常见：</p>
<ul>
<li>默认值为 rollback journal 模式，该模式限制您拥有多个读取器或单个写入器</li>
<li>外键已禁用;他们是自愿加入的</li>
<li>它是 “弱类型”。SQLite 称其为“类型亲和性”。这意味着即使你已经定义了一个类型，你也可以在列中插入任何内容。强类型列是可选的（由 <a href="https://www.sqlite.org/stricttables.html"><code>STRICT</code></a> 表）。</li>
<li>您在其他数据库中期望的许多 <a href="https://sqlite.org/omitted.html"><code>ALTER</code> 命令</a>不起作用。例如，您不能向现有列添加约束。（他们最近添加了重命名列名称的功能）</li>
</ul>
<p>这里有一整套<a href="https://www.sqlite.org/quirks.html">怪癖。</a></p>
</li>
<li><p>我讨厌它不强制类型。这完全是 YOLO：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> <span class="hljs-keyword">user</span>(id <span class="hljs-type">INTEGER</span>);<br><span class="hljs-keyword">INSERT into</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">VALUES</span> ("YOLO!"); <span class="hljs-comment">--- This works!</span><br></code></pre></td></tr></tbody></table></figure>
<p>不仅如此，如果你给出一些随机类型，它不会引发任何错误。</p>
<p><code>CREATE TABLE t(value TIMMYSTAMP);</code></p>
<p>没有类型，但 SQLite 很高兴地接受这一点。<code>TIMMYSTAMP</code></p>
<p>SQLite 有五种类型：、、、、、 .想知道什么被诅咒的东西吗？类型亲和性通过<a href="https://www.sqlite.org/datatype3.html#determination_of_column_affinity">子字符串匹配</a>工作！<code>NULL``INTEGER``REAL``TEXT``BLOB</code></p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> t(<span class="hljs-keyword">value</span> SPONGEBLOB) <span class="hljs-comment">--- This is BLOB type!</span><br></code></pre></td></tr></tbody></table></figure>
<p>所以，是的，这也发生了：</p>
<blockquote>
<p>请注意，由于 “POINT” 末尾的 “INT” ，声明的 “FLOAT POINT” 类型将提供 INTEGER 关联，而不是 REAL 关联。</p>
</blockquote>
</li>
<li><p>这是我<a href="https://x.com/iavins/status/1865746403072389612">最喜欢的传说</a>之一。SQLite 不得不将默认前缀从 更改为用户在半夜开始给开发人员打电话<code>sqlite_``etilqs_</code></p>
</li>
</ol>
<ol>
<li><p>SQLite 非常重视向后兼容性</p>
<blockquote>
<p>SQLite 版本 3 的所有版本都可以读取和写入由第一个 SQLite 3 版本（版本 3.0.0）创建的数据库文件，其历史可以追溯到 2004 年 6 月 18 日。这就是 “向后兼容性”。开发人员承诺为 SQLite 3 的所有未来版本保持数据库文件格式的向后兼容性。</p>
</blockquote>
</li>
<li><p>但是他们非常重视向后兼容性，以至于即使他们<a href="https://x.com/iavins/status/1851276312876326980">发布了一个 bug</a>，他们也不会修复它</p>
</li>
</ol>
<ol>
<li><p>SQLite 的作者 D. Richard Hipp （DRH） 认为现有的版本控制系统不合适。所以他写了自己的书，叫<a href="https://fossil-scm.org/home/doc/trunk/www/fossil-v-git.wiki">做 Fossil</a>。当然，Fossil 是由 SQLite 提供支持的。</p>
<p>这让我想起了 Linus 是如何编写 Git 的。</p>
<p>DRH 还编写了自己的解析器生成器，名为 Lemon。</p>
</li>
<li><p>DRH 根据 Donald Knuth 的 TAOCP 一书中的算法编写了 B 树，并在旅行时在飞机上对其进行编码（基于超级）</p>
</li>
<li><p>SQLite 发音为“Ess-Cue-El-ite”。不过，没有官方指南。<a href="https://web.archive.org/web/20201126110450/http://sqlite.1065341.n5.nabble.com/SQLite-Pronunciation-td88186.html#message88194">SQLite 论坛</a>中提到的 DRH：</p>
<blockquote>
<p>我写了 SQLite，我认为它应该发音为“S-Q-L-ite”。就像一种矿物。但是我很酷你们想怎么发音就怎么发音。</p>
<p>:-)</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>劝世章</title>
    <url>//posts/d88dfa32/</url>
    <content><![CDATA[<p>​                                                          破窑赋 / 寒窑赋 / 劝世章                                     </p>
<p>​                                                                                                                                  北宋 · 吕蒙正</p>
<hr>
<h3 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h3><p>天有不测风云，人有旦夕祸福。蜈蚣百足，行不及蛇；雄鸡两翼，飞不过鸦。马有千里之程，无骑不能自往；人有冲天之志，非运不能自通。</p>
<p>盖闻：人生在世，富贵不能淫，贫贱不能移。文章盖世，<a href="https://baike.baidu.com/item/孔子/1584?fromModule=lemma_inlink">孔子</a>厄于<a href="https://baike.baidu.com/item/陈/13006743?fromModule=lemma_inlink">陈</a>邦；武略超群，<a href="https://baike.baidu.com/item/太公/19689215?fromModule=lemma_inlink">太公</a>钓于<a href="https://baike.baidu.com/item/渭水/4827164?fromModule=lemma_inlink">渭水</a>。<a href="https://baike.baidu.com/item/颜渊/6290371?fromModule=lemma_inlink">颜渊</a>命短，殊非凶恶之徒；<a href="https://baike.baidu.com/item/盗跖/63690?fromModule=lemma_inlink">盗跖</a>年长，岂是善良之辈。<a href="https://baike.baidu.com/item/尧帝/789900?fromModule=lemma_inlink">尧帝</a>明圣，却生不肖之儿；<a href="https://baike.baidu.com/item/瞽叟/9822239?fromModule=lemma_inlink">瞽叟</a>愚顽，反生大孝之子。<a href="https://baike.baidu.com/item/张良/6658?fromModule=lemma_inlink">张良</a>原是布衣，<a href="https://baike.baidu.com/item/萧何/1422?fromModule=lemma_inlink">萧何</a>曾为县吏。<a href="https://baike.baidu.com/item/晏子/425292?fromModule=lemma_inlink">晏子</a>身无五尺，封作<a href="https://baike.baidu.com/item/齐国/50284?fromModule=lemma_inlink">齐国</a>宰相；<a href="https://baike.baidu.com/item/孔明/5439?fromModule=lemma_inlink">孔明</a>卧居草庐，能作<a href="https://baike.baidu.com/item/蜀汉/276618?fromModule=lemma_inlink">蜀汉</a>军师。楚霸虽雄，败于乌江自刎；汉王虽弱，竟有万里江山。<a href="https://baike.baidu.com/item/李广/398?fromModule=lemma_inlink">李广</a>有射虎之威，到老无封；<a href="https://baike.baidu.com/item/冯唐/18265?fromModule=lemma_inlink">冯唐</a>有乘龙之才，一生不遇。<a href="https://baike.baidu.com/item/韩信/5321?fromModule=lemma_inlink">韩信</a>未遇之时，无一日三餐，及至遇行，腰悬三尺玉印，一旦时衰，死于<a href="https://baike.baidu.com/item/阴人/23557427?fromModule=lemma_inlink">阴人</a>之手。</p>
<p>有先贫而后富，有老壮而少衰。满腹文章，白发竟然不中；才疏学浅，少年及第登科。深院宫娥，运退反为妓妾；风流妓女，时来配作夫人。</p>
<p>青春美女，却招愚蠢之夫；俊秀郎君，反配粗丑之妇。蛟龙未遇，潜水于鱼鳖之间；君子失时，拱手于小人之下。衣服虽破，常存仪礼之容；面带忧愁，每抱怀安之量。时遭不遇，只宜安贫守份；心若不欺，必然扬眉吐气。初贫君子，天然骨骼生成；乍富小人，不脱贫寒肌体。</p>
<p>天不得时，日月无光；地不得时，草木不生；水不得时，风浪不平；人不得时，利运不通。注福注禄，命里已安排定，富贵谁不欲？人若不依根基八字，岂能为卿为相？</p>
<p>吾昔寓居洛阳，朝求僧餐，暮宿破窑，思衣不可遮其体，思食不可济其饥，上人憎，下人厌，人道我贱，非我不弃也。今居朝堂，官至极品，位置三公，身虽鞠躬于一人之下，而列职于千万人之上，有挞百僚之杖，有斩鄙吝之剑，思衣而有罗锦千箱，思食而有珍馐百味，出则壮士执鞭，入则佳人捧觞，上人宠，下人拥。人道我贵，非我之能也，此乃时也、运也、命也。</p>
<p>嗟呼！人生在世，富贵不可尽用，贫贱不可自欺，听由天地循环，周而复始焉。</p>
<h5 id="译文："><a href="#译文：" class="headerlink" title="译文："></a>译文：</h5><blockquote>
<p>天气阴晴不定，变幻莫测；人的一生也会面临各种问题，难以预料会有什么灾祸。蜈蚣有很多只脚，可是它的爬行速度却不如没有脚的蛇。家养的鸡也有两只翅膀，却不能像乌鸦那般高飞。好马可以驰骋千里，但是没有人驾驭是不能来回的。每个人都有远大的志向，但是没有机会是无法飞黄腾达的。</p>
<p>人们常说：人生在世，在富贵时，能使自己节制而不挥霍；在贫贱时不要改变自己的意志。孔子的文章写得超过世人，但是却被围困于陈国；文韬武略的姜子牙也曾在渭水垂钓等待机会。孔子的学生颜回虽然早亡，但绝非凶恶的人。盗跖虽然活得长，却不是什么善良之辈。尧、舜虽然英明圣贤，却生下不孝的儿子。舜的父亲瞽叟顽固愚昧，反而生下舜这样的大孝子。张良原来只是一介平民，萧何也只是个县吏。晏子的身高不到五尺，却被封为齐国宰相；孔明居住在茅草屋中，却能担当蜀国的军师。项羽虽然强大，却落得个兵败自刎乌江的下场；刘邦虽然弱小，最终掌管天下江山。汉将李广虽有射虎石的威名，却终身都未能够封侯。冯唐虽有治国安邦的才能，却一生怀才不遇。韩信时运不济时，连饭都吃不上，等到运气来了，成为掌印的大将军，而一旦运气衰败，又死于阴毒人的计谋。</p>
<p>有的人先贫穷后富裕，也有人老年壮志少年衰落。满腹锦绣文章，直到头发花白还没有考上功名；才疏学浅的人，可能年纪轻轻就金榜题名。皇城深宫中的妃娥在动乱中可能沦为妾妓，风流的妓女，时来运转也能做贵夫人。青春美丽的女子嫁了愚蠢的丈夫，俊秀的青年反倒找了丑陋的妻子。蛟龙没有机遇，只能藏身于鱼鳖之间；君子没有机会时，只能屈居于小人之下。衣服虽然破旧，常保持恭敬礼仪，面带忧愁却可能怀有兼济天下的志向。不得志时，只能安于贫穷谨守本分，心中坦荡一定会有扬眉吐气的一天。君子贫寒也有一身傲骨，暴富的小人摆脱不了内心的贫寒。</p>
<p>天气不好时，就见不到太阳和月亮的光辉；土地没有合适的气候条件时，草木都不会生长。水得不到恰当的环境时，就会掀起波涛巨浪；人若得不到机遇时，好运就不畅通。富贵荣华命中都有安排，谁不想要呢？人如果没有依从八德而生活，哪里能做高官当宰相？</p>
<p>以前，我寄居在洛阳的时候，白天去寺庙里吃斋饭，晚上住在破败的窑洞里。所穿衣服无法完全遮蔽身体，吃的粥饭也抵御不了饥饿。上等人憎恨我，下等人讨厌我，人人都说我卑贱，只是我还没有机遇啊。现在我入朝为官，官职做到最高层，地位达到三公，地位只在皇帝一人之下，千万人之上，拥有管理百官的权利，有惩罚卑鄙悭吝官员的权力。穿衣服是绫罗锦缎，吃的则是山珍海味，出门有武士保护，回家有仆人侍奉，皇上宠爱我，百官拥戴我，所有的人说我尊贵，不是我真有多大本领，这是我得到天时和命运的眷顾啊。</p>
<p>哎！所以人活在世上，发达富贵的时候不能只图享受，贫贱的时候也不要自暴自弃，听从天地的循环和周而复始吧！</p>
</blockquote>
<h3 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h3><p>天地有常用，日月有常明，四时有常序，鬼神有常灵。天有宝，日月星辰。地有宝，五谷金银。家有宝，孝子贤孙。国有宝，正直忠良。合天道，则天府鉴临。合地道，则地府消愆。合人道，则民用和睦。三道既合，祸去福来。天地和，则万物生。地道和，则万物兴。父子和，而家有济。夫妇和，而义不分。</p>
<p>时势不可尽倚，贫穷不可尽欺，世事翻来覆去，须当周而复始。</p>
<p>余者，居洛阳之时，朝投僧寺，夜宿破窑。布衣不能遮其体，饘粥不能充其饥。上人嫌，下人憎，皆言余之贱也，余曰：非贱也，乃时也，运也，命也。余后登高及第，入中书，官至极品，位列三公，思衣则有绮罗千箱，思食则有百味珍馐，有挞百僚之杖，有斩佞臣之剑，出则壮士执鞭，入则佳人扶袂，廪有余粟，库有余财，人皆言余之贵也，余曰：非贵也，乃时也，运也，命也。</p>
<p>蛟龙未遇，暂居云雾之间。君子失时，屈守小人之下。命运未通，被愚人之轻弃。时运未到，被小人之欺凌。初贫君子，自怨骨格风流。乍富小人，不脱俗人体态。生平结交惟结心，莫论富贵贫贱。深得千金，而不为贵，得人一语，而胜千金。吾皆悼追无恨人，富贵须当长保守。</p>
<p><a href="https://baike.baidu.com/item/苏秦/7043?fromModule=lemma_inlink">苏秦</a>未遇，归家时，父母憎，兄弟恶，嫂不下玑，妻不愿炊，然衣锦归故里，马壮人强，萤光彩布，兄弟含笑出户迎，妻嫂下阶倾己顾，苏秦本是旧苏秦，昔日何陈今何亲。自家骨肉尚如此，何况区区陌路人，抑犹未也。</p>
<p>文章冠世，孔子尚厄于陈邦。武略超群，太公曾钓于渭水。颜回命短，岂是凶暴之徒。盗柘年长，自非贤良之辈。帝尧天圣，却养不肖之男。瞽叟顽嚣，反生大孝之子。<a href="https://baike.baidu.com/item/甘罗/798380?fromModule=lemma_inlink">甘罗</a>十二为宰相，买臣五十作公卿。晏婴身长五尺，封为齐国宰相。韩信力无缚鸡，立为汉朝贤臣，未遇之时，口无一日瓮飧，及至兴通，身受齐王将印，吓燕取赵，统百万雄兵，一旦时休，卒于阴人之毒手。李广有射虎之威，到老无封。冯唐有安邦之志，一世无遇。</p>
<p>上古圣贤，不掌阴阳之数。今日儒士，岂离否泰之中。腰金衣紫，都生贫贱之家。草履毛鞋，都是富豪之裔。有贫贱，而后有富贵。有小壮，而后有老衰。人能学积善，家有余庆。青春美女，反招愚独之夫。俊秀才郎，竟配丑貌之妇。五男二女，老来一身全无。万贯千金，死后离乡别井。才疏学浅，少年及第登科。满腹文章，到老终身不第。或富贵，或贫贱，皆由命理注定。</p>
<p>若天不得时，则日月无光。地不得时，则草木不生。水不得时，则波浪不静。人不得时，则命运不通。若无根本八字，岂能为卿为相。一生皆由命，半点不由人。</p>
<p>蜈蚣多足，不及蛇灵。雄鸡有翼，飞不及鸦。马有千里之驰，非人不能自往。人有千般巧计，无运不能自达。</p>
<p>吾敬为此劝世文也。</p>
]]></content>
      <categories>
        <category>中国古文</category>
      </categories>
  </entry>
  <entry>
    <title>十种有关学习的心智模型</title>
    <url>//posts/3c7a4cf1/</url>
    <content><![CDATA[<h1 id="十种学习心智模型"><a href="#十种学习心智模型" class="headerlink" title="十种学习心智模型"></a>十种学习心智模型</h1><p><a href="[十种学习心智模型 - Scott H Young](https://www.scotthyoung.com/blog/2022/09/19/learning-mental-models/">原文链接:Ten Mental Models for Learning</a>)           <code>Scott H. Young</code></p>
<hr>
<p>心智模型是一个通用的概念，可以用来解释许多不同的现象。经济学中的<a href="https://en.wikipedia.org/wiki/Supply_and_demand">供求</a>关系、生物学中的<a href="https://en.wikipedia.org/wiki/Natural_selection">自然选择</a>、计算机科学中的<a href="https://en.wikipedia.org/wiki/Recursion">递归</a>或数学中的<a href="https://en.wikipedia.org/wiki/Mathematical_induction">归纳证明</a>——一旦你知道去寻找它们，这些模型就无处不在。</p>
<p>正如了解供求关系有助于您推理经济问题一样，了解学习的心智模型将使思考学习问题变得更加容易。</p>
<p>不幸的是，学习很少作为一门单独的课程来教授，这意味着这些心智模型中的大多数只有专家才知道。在这篇文章中，我想分享对我影响最大的十个，以及如果您想了解更多信息，可以更深入地挖掘的参考资料。</p>
<h2 id="1-解决问题是搜索。"><a href="#1-解决问题是搜索。" class="headerlink" title="1. 解决问题是搜索。"></a>1. 解决问题是搜索。</h2><p>Herbert Simon 和 Allen Newell 在他们的里程碑式著作<em>《人类问题解决</em>》中启动了问题解决的研究。在这篇文章中，他们认为人们通过搜索问题空间来解决问题。</p>
<p>问题空间就像一个迷宫：你知道你现在在哪里，你会知道你是否已经到达出口，但你不知道如何到达那里。一路上，您的行动受到迷宫墙壁的限制。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels1-1536x768.jpg" alt=""></p>
<p>问题空间也可以是抽象的。例如，解决魔方意味着在大型问题空间的配置中移动 — 打乱的立方体是您的起点，每种颜色被隔离到一侧的立方体是出口，曲折定义了问题空间的“墙”。</p>
<p>现实生活中的问题通常比迷宫或魔方更广泛——开始状态、结束状态和确切的移动通常并不明确。但是，在可能性空间中寻找仍然是人们在解决不熟悉的问题时所做的事情的一个很好的特征——这意味着当他们还没有直接引导他们找到答案的方法或记忆时。</p>
<p>这个模型的一个含义是，如果没有先验知识，大多数问题真的很难解决。魔方有<a href="https://getgocube.com/play/rubiks-cube-combinations/">超过 43 种五重配置</a>——如果你不聪明的话，这是一个很大的搜索空间。学习是获取模式和方法以减少暴力搜索的过程。</p>
<h2 id="2-通过检索来增强记忆力。"><a href="#2-通过检索来增强记忆力。" class="headerlink" title="2. 通过检索来增强记忆力。"></a>2. 通过检索来增强记忆力。</h2><p><a href="https://en.wikipedia.org/wiki/Testing_effect#Retrieval_practice">检索知识</a>比第二次看到某物更能增强记忆力。测试知识不仅仅是衡量您所知道的知识的一种方式，它还会积极提高您的记忆力。事实上，测试是研究人员发现的最好的研究技术之一。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels2-1024x512.jpg" alt=""></p>
<p>为什么检索如此有用？一种思考方式是，大脑通过只记住那些可能被证明有用的事情来节省精力。如果您手头始终有答案，则无需在内存中对其进行编码。相比之下，与检索相关的难度是您需要记住的强烈信号。</p>
<p>仅当有要检索的内容时，检索才有效。这就是为什么我们需要书籍、老师和课程。当内存失败时，我们回退到解决问题的搜索上，根据问题空间的大小，它可能会完全失败，无法给我们一个正确的答案。但是，一旦我们看到了答案，我们将通过检索它而不是反复查看它来了解更多。</p>
<h2 id="3-知识呈指数级增长。"><a href="#3-知识呈指数级增长。" class="headerlink" title="3. 知识呈指数级增长。"></a>3. 知识呈指数级增长。</h2><p>你能学到多少取决于你已经知道什么。研究发现，从文本中保留的知识量取决于<a href="https://psycnet.apa.org/record/1988-24805-001">该主题的先前知识</a>。在某些情况下，这种影响甚至会超过一般智力。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels3-1024x512.jpg" alt=""></p>
<p>当你学习新事物时，你会将它们整合到你已经知道的事物中。此集成提供了更多钩子，供您稍后调用该信息。然而，当你对一个主题知之甚少时，你可以放置新信息的钩子就更少了。这使得信息更容易被遗忘。就像从种子中生长出的水晶一样，一旦打好了基础，未来的学习就会容易得多。</p>
<p>当然，这个过程是有限制的，否则知识会无限加速。尽管如此，最好记住，因为学习的早期阶段通常是最困难的，并且可能会给人一种关于某个领域内未来困难的误导性印象。</p>
<h2 id="4-创造力主要是复制。"><a href="#4-创造力主要是复制。" class="headerlink" title="4. 创造力主要是复制。"></a>4. 创造力主要是复制。</h2><p>很少有主题被误解为创造力。我们倾向于为有创造力的人注入一种近乎神奇的光环，但创造力在实践中要平凡得多。</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412101653689.jpeg" alt=""></p>
<p>在对重大发明的令人印象深刻的评论中，马特·里德利 （Matt Ridley） 认为<a href="https://www.amazon.ca/How-Innovation-Works-Flourishes-Freedom/">创新是进化过程的结果</a>。新发明不是完全成型地涌入世界，而是本质上是旧思想的随机突变。当这些想法被证明有用时，它们就会扩展以填补新的利基市场。</p>
<p>这种观点的证据来自近乎同步的创新现象。在历史上，多个没有联系的人曾无数次开发出相同的创新，这表明这些发明在被发现之前就以某种方式“接近”了可能性的空间。</p>
<p>即使在美术中，临摹的重要性也被忽视了。是的，许多艺术革命都是对过去趋势的明确拒绝。但革命者自己几乎无一例外地沉浸在他们所反抗的传统中。反抗任何惯例都需要意识到该惯例。</p>
<h2 id="5-技能是特定的。"><a href="#5-技能是特定的。" class="headerlink" title="5. 技能是特定的。"></a>5. 技能是特定的。</h2><p>转移是指在一项任务中练习或训练后，一项任务中的能力得到增强。在对迁移的研究中，出现了一个典型的模式：</p>
<ul>
<li>在一项任务中练习会让你做得更好。</li>
<li>在任务中练习有助于完成类似的任务（通常是在程序或知识上重叠的任务）。</li>
<li>在一项任务上练习对不相关的任务几乎没有帮助，即使它们似乎需要同样广泛的能力，如 “记忆”、“批判性思维 ”或 “智力”。</li>
</ul>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels5-1024x512.jpg" alt=""></p>
<p>很难对迁移做出准确的预测，因为它们取决于确切地了解人类思维的工作原理和所有知识的结构。然而，在更受限制的领域中，约翰·安德森 （John Anderson） 发现，生产——以知识为基础的 IF-THEN 规则——与<a href="https://www.scotthyoung.com/blog/2022/02/15/act-r/">在智力技能中观察到的转移量</a>形成了相当好的匹配。</p>
<p>虽然技能可能是具体的，但广度会产生普遍性。例如，学习外语单词仅在使用或听到该单词时才有帮助。但是如果你知道很多单词，你就可以说很多不同的东西。</p>
<p>同样，知道一个想法可能无关紧要，但掌握多个想法可以带来巨大的力量。每多接受一年的教育，智商就会提高 <a href="https://journals.sagepub.com/doi/abs/10.1177/0956797618774253">1-5 分</a>，部分原因是学校教授的知识广度与现实生活（和智力测试）所需的知识广度重叠。</p>
<p>如果您想变得更聪明，没有捷径 - 您必须学习很多东西。但反之亦然。学习很多会让你比你想象的更聪明。</p>
<h2 id="6-精神带宽极其有限。"><a href="#6-精神带宽极其有限。" class="headerlink" title="6. 精神带宽极其有限。"></a>6. 精神带宽极其有限。</h2><p>我们在任何时候都只能记住几件事。George Miller 最初将数字定为 <a href="https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two">7，正负 2 项</a>。但最近的研究表明，这个数字<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2864034/">更接近四件事</a>。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels6-1024x512.jpg" alt=""></p>
<p>这个极其狭窄的空间是所有学习、每一个想法、记忆和经验都必须流经的瓶颈，才能成为我们长期体验的一部分。潜意识学习不起作用。如果你不专心，你就没有学习。</p>
<p>我们提高学习效率的主要方法是确保通过瓶颈的事物是有用的。将带宽投入到不相关的元素上可能会减慢我们的速度。</p>
<p>自 1980 年代以来，<a href="https://www.scotthyoung.com/blog/2022/01/04/cognitive-load-theory/">认知负荷理论</a>一直被用来解释干预措施如何根据我们有限的心理带宽来优化（或限制）学习。这项研究发现：</p>
<ul>
<li>对于初学者来说，解决问题可能会适得其反。新手在展示工作示例（解决方案）时表现得更好。</li>
<li>材料的设计应避免需要在页面或图表的各个部分之间翻转以了解材料。</li>
<li>冗余信息会阻碍学习。</li>
<li>如果首先分部分介绍，则可以更轻松地学习复杂的想法。</li>
</ul>
<h2 id="7-成功是最好的老师。"><a href="#7-成功是最好的老师。" class="headerlink" title="7. 成功是最好的老师。"></a>7. 成功是最好的老师。</h2><p>我们从<a href="https://www.scotthyoung.com/blog/2022/09/06/failure-lousy-teacher/">成功中学到的东西比从失败中学到的要多</a>。原因是问题空间通常很大，并且大多数解决方案都是错误的。知道什么有效会大大降低可能性，而经历失败只能告诉你一种特定的策略不起作用。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels7-1024x512.jpg" alt=""></p>
<p>一个好的规则是在学习时以大约 <a href="https://www.scotthyoung.com/blog/2022/07/05/85-percent-rule/">85% 的成功率</a>为目标。您可以通过校准练习的难度（开卷与闭卷、有导师与无导师、简单问题与复杂问题）或在低于此阈值时寻求额外的培训和帮助来做到这一点。如果您成功超过了这个阈值，您可能没有寻找足够难的问题——并且正在练习例行公事而不是学习新技能。</p>
<h2 id="8-我们通过例子进行推理。"><a href="#8-我们通过例子进行推理。" class="headerlink" title="8. 我们通过例子进行推理。"></a>8. 我们通过例子进行推理。</h2><p>人们如何进行逻辑思考是一个古老的谜题。自康德以来，我们就知道逻辑不能从经验中获得。不知何故，我们必须已经知道逻辑规则，否则一个不合逻辑的头脑永远不可能发明它们。但如果是这样的话，为什么我们经常在逻辑学家发明的那种问题上失败呢？</p>
<p>1983 年，菲利普·约翰逊-莱尔德 （Philip Johnson-Laird） <a href="https://www.amazon.ca/Mental-Models-Philip-Johnson-Laird/dp/0674568826/ref=sr_1_1?crid=QXAJWW7OGNMP&amp;keywords=mental+models+johnson-laird&amp;qid=1647987740&amp;sprefix=mental+models+johnson-laird%2Caps%2C133&amp;sr=8-1">提出了一个解决方案</a>：我们通过构建情境的心智模型来推理。</p>
<p>要检验像“所有男人都是凡人。苏格拉底是一个男人。因此，苏格拉底是凡人“，我们想象一群人，他们都是凡人，并想象苏格拉底是他们中的一员。我们通过这个检查推断出三段论是正确的。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels8-1024x512.jpg" alt=""></p>
<p>Johnson-Laird 认为，这种基于心智模型的推理也可以解释我们的逻辑缺陷。我们最挣扎的是需要我们检查多个模型的逻辑陈述。需要构建和审查的模型越多，我们犯错误的可能性就越大。</p>
<p>Daniel Kahneman 和 Amos Tversky 的<a href="https://en.wikipedia.org/wiki/Availability_heuristic">相关研究表明</a>，这种基于示例的推理会导致我们误以为我们回忆示例的流畅性是事件或模式的实际概率。例如，我们可能会认为适合模式 K <em> </em> <em> 的词比 </em> <em> K </em> 多，因为第一类的例子（例如，KITE、KALE、KILL）比第二类（例如 TAKE、BIKE、NUKE）更容易想到。</p>
<p>通过示例进行推理有几个含义：</p>
<ol>
<li>通过示例学习通常比抽象描述更快。</li>
<li>要学习一般模式，我们需要许多示例。</li>
<li>在根据几个例子进行广泛的推断时，我们必须小心。（你确定你已经考虑了所有可能的情况吗？</li>
</ol>
<h2 id="9-知识随着经验而变得不可见。"><a href="#9-知识随着经验而变得不可见。" class="headerlink" title="9. 知识随着经验而变得不可见。"></a>9. 知识随着经验而变得不可见。</h2><p>通过练习，技能变得越来越自动化。这降低了我们对这项技能的有意识意识，使其需要更少的我们宝贵的工作记忆能力来执行。想想开车：起初，使用闪光灯和刹车是经过深思熟虑的。经过多年的驾驶，您几乎不会考虑它。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels9-1024x512.jpg" alt=""></p>
<p>然而，技能自动化程度的提高也有缺点。一是向别人传授一项技能变得更加困难。当知识变得隐性时，就更难明确地做出决策。专家经常低估“基本”技能的重要性，因为长期以来，这些技能一直被自动化，似乎在日常决策中并没有太多因素。</p>
<p>另一个缺点是自动化技能不太容易受到有意识的控制。当你继续以你一直的方式做某事时，这可能会导致进展停滞不前，即使这不再合适。寻求更困难的挑战变得至关重要，因为这些挑战会让您失去自动性并迫使您尝试更好的解决方案。</p>
<h2 id="10-重新学习相对较快。"><a href="#10-重新学习相对较快。" class="headerlink" title="10. 重新学习相对较快。"></a>10. 重新学习相对较快。</h2><p>在学校度过多年后，我们中有多少人还能通过毕业所需的期末考试？面对课堂问题，许多成年人羞愧地承认他们记得很少。</p>
<p><img src="https://www.scotthyoung.com/blog/wp-content/uploads/2022/09/Mentalmodels10-1024x512.jpg" alt=""></p>
<p>遗忘是我们不经常使用的任何技能都不可避免的命运。赫尔曼·艾宾浩斯 （Hermann Ebbinghaus） 发现，知识以<a href="https://en.wikipedia.org/wiki/Forgetting_curve">指数级的速度逐渐减少</a>——开始时最快，随着时间的推移而减慢。</p>
<p>然而，也有一线希望。重新学习通常比初始学习快得多。其中一些可以理解为阈值问题。想象一下内存强度范围在 0 到 100 之间。在某个阈值（例如 35）下，内存无法访问。因此，如果记忆力从 36 下降到 34，你就会忘记你所知道的。但即使是重新学习的一点点提升也能修复足以回忆起它的记忆。相比之下，新内存 （从 0 开始） 需要更多的工作。</p>
<p>受人类神经网络启发<a href="https://www.amazon.ca/Parallel-Distributed-Processing-Explorations-Microstructure/dp/026268053X/ref=asc_df_026268053X/?tag=googleshopc0c-20&amp;linkCode=df0&amp;hvadid=293004119900&amp;hvpos=&amp;hvnetw=g&amp;hvrand=4821769717454607209&amp;hvpone=&amp;hvptwo=&amp;hvqmt=&amp;hvdev=c&amp;hvdvcmdl=&amp;hvlocint=&amp;hvlocphy=9001551&amp;hvtargid=pla-493817988908&amp;psc=1">的联结主义模型</a>为再学习的有效性提供了另一个论据。在这些模型中，计算神经网络可能需要数百次迭代才能达到最佳点。如果你 “抖动” 这个网络中的连接，它就会忘记正确的答案，并且不会比偶然做出更好的响应。但是，与上面的阈值解释一样，网络第二次重新学习最佳响应的速度要快得多。<a href="https://www.scotthyoung.com/blog/2022/09/19/learning-mental-models/#easy-footnote-bottom-1-14500">1</a></p>
<p>重新学习是一件令人讨厌的事情，尤其是因为与以前简单的问题作斗争可能会令人沮丧。然而，没有理由不深入和广泛地学习——即使是被遗忘的知识也可以比从头开始更快地恢复。</p>
]]></content>
      <tags>
        <tag>articles</tag>
      </tags>
  </entry>
  <entry>
    <title>宁静祷文</title>
    <url>//posts/93e43e6b/</url>
    <content><![CDATA[<p><strong>宁静祷文</strong></p>
<p>主啊，请赐予我平静，去接受那些无法改变的。</p>
<p>赐予我勇气，去改变那些我能改变的，</p>
<p>赐于我智慧，分辨这两者的区别。</p>
<p>过好每一天，享受您所赐于的每一刻，把困苦当作通往平安的道路，</p>
<p>像主耶稣那样，接受这罪恶世界的现状，而非如我所愿的样子，</p>
<p>顺服他的旨意，相信他会使一切重归美好，</p>
<p>我可以在此生过的幸福，并在永生里，与他永享至福。</p>
<p>阿门。”</p>
<blockquote>
<p>宁静祷文是神学家尼布尔(Reinhold Niebuhr 1892—1971他的人类学被认为是20世纪基督教神学对人类学的最大贡献)写于 1934年。</p>
</blockquote>
<p><strong>原文</strong></p>
<p><strong>Serenity Prayer</strong></p>
<p>“God, Grant me</p>
<p>the SERENITY, to accept the things I cannot change,</p>
<p>COURAGE to change the things I can, and</p>
<p>the WISDOM to know the difference.</p>
<p>Living one day at a time; Enjoying one moment at a time;</p>
<p>Accepting hardships as the pathway to peace.</p>
<p>Taking as He did, this sinful world as it is, not as I would have it;</p>
<p>Trusting that He will make all things right if I surrender to His Will.</p>
<p>That I may be reasonably happy in this life, and</p>
<p>supremely happy with Him forever in the next.</p>
<p>Amen”</p>
]]></content>
      <tags>
        <tag>articles</tag>
      </tags>
  </entry>
  <entry>
    <title>各种客服服务电话</title>
    <url>//posts/4194a8ec/</url>
    <content><![CDATA[<hr>
<p>  高德客服-打车问题人工电话：4008802252</p>
]]></content>
  </entry>
  <entry>
    <title>如何阅读科研论文</title>
    <url>//posts/540c6e02/</url>
    <content><![CDATA[<h3 id="如何阅读科研论文"><a href="#如何阅读科研论文" class="headerlink" title="如何阅读科研论文"></a>如何阅读科研论文</h3><p>S. Keshav</p>
<p>滑铁卢大学大卫·切瑞顿计算机科学学院</p>
<p>加拿大安大略省滑铁卢市</p>
<p><a href="mailto:keshav@uwaterloo.ca">keshav@uwaterloo.ca</a></p>
<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h3><p>科研人员必须阅读论文的几个理由：为了会议或者学生审稿、为了在本领域中保持消息灵通、为了解新领域进行文献调研。一个典型的科研人员每年可能要花费几百小时去阅读论文。</p>
<p>学会有效地阅读论文是一项非常重要但是很少会有机会学到的技能。正因为这样，新入学的研究生都是在“试验——失败”中独自学习的。学生们会因此浪费大量的时间，并且会经常因此感到沮丧。</p>
<p>多年来，我一直使用一个简单的“三步法”来使我在读论文时能对其有居高临下的理解，而不是淹没在细节当中。这种读论文的方法还可以让我评估审阅一堆论文时需要花费的时间。除此之外，我可以根据需要和自己时间的多少来调整对论文的理解深度。这篇文章描述了“三步法”的具体内容和该方法在做文献调研时应如何应用。</p>
<h3 id="2-三步法"><a href="#2-三步法" class="headerlink" title="2.三步法"></a>2.三步法</h3><p>主要思想就是你应该在三步内读完论文，而不是从开始不分轻重地“耕耘”到最后。每一步要基于之前的阅读完成一个明确的目标：第一步要弄清一篇论文的大体想法；第二步要抓住论文的主要内容，但不是细节；第三步帮助你深度理解整篇论文。</p>
<h4 id="2-1第一步"><a href="#2-1第一步" class="headerlink" title="2.1第一步"></a>2.1第一步</h4><p>第一步是：快速浏览整篇论文，对其有个大概的了解。你也可以自己决定是否需要进一步阅读。这一步大概需要五到十分钟，有下面几个小节组成：</p>
<ol>
<li>认真阅读题目、摘要、引言。</li>
<li>阅读标题和段落开头，除此之外一概不看。</li>
<li>瞥一眼数学部分（如果有的话），以确定其基本理论概况。</li>
<li>阅读结论部分。</li>
<li>瞥一眼引用，找一下是否有你读过的论文。</li>
</ol>
<p>完成第一步后，你应该能回答以下几个问题了：</p>
<p>1．类别：这篇论文是什么类型？测试类？对现有系统进行分析的？对原型系统进行描述的？</p>
<p>2．内容：你读过的其他论文有没有和这个相关的？文章中分析问题用的什么理论基础？</p>
<p>3．正确性：结论看起来是否真实有效？</p>
<p>4．创新点：论文的主要创新点是什么？</p>
<p>5．清晰度：这篇论文是否写的条理清晰？</p>
<p>得出以上信息后，你可以选择不再继续阅读（那就不打印，也就节约了树木:））。这有可能是因为这篇论文不吸引你，或者你对这篇论文所涉及的领域了解不多，也可能因为作者给出了不适当的假设。这一步对于处理当前不在你研究领域内，但是以后也许相关的论文非常有效。</p>
<p>顺带提一下，当你写一篇论文时，你可以设想大部分的审稿人（或读者）只对你的论文使用第一步。小心地选择标题和子段落开头部分，摘要应该精确而且易理解。如果一个审稿人在第一步过后还不能理解你论文的主旨，那么很可能你的论文就不过关了。如果一个读者在五分钟内不能理解论文的突出部分，那么很可能以后这篇论文再也不会被捡起。正是由于这些原因，用一个“图示摘要”及一个精心选择的图形总结一篇论文是很棒的想法，以后会在科学杂志中越来越多。</p>
<h4 id="2-2第二步"><a href="#2-2第二步" class="headerlink" title="2.2第二步"></a>2.2第二步</h4><p>在第二步中，要仔细阅读论文，但是诸如证明等信息要忽略掉。在阅读时你应该草记下重点，或者在论文空白处写点标注。来自奥格斯堡（Augsburg）的Dominik Grusemann建议“记录下那些你不懂的部分，或者那些你想问作者的问题”。如果你是一名论文评审员，以上那些记录在你写评审意见时很有用，也可以在开论文研讨会时帮助你记录你当时的想法。</p>
<ol>
<li>仔细论文中阅读图片、表格和其他说明。要特别注意图表：坐标轴标记是否合适？标示的结果是否有误差线？这类常见错误可以区分那些粗制滥造的论文和真正出色的论文。</li>
<li>为了进一步阅读相关论文，记得要标注相关的未读引用文献（这是进一步了解论文相关背景的好方法）。</li>
</ol>
<p>第二步对于有经验的读者来说，应该需要一小时左右的时间。经过以上步骤，你应该就了解了论文的整体内容。此时你应该能把论文的主要思想和相关论据讲给其他人听了。对于你感兴趣的论文，读到这个程度就可以了，但是对于那些在你研究领域内的论文来时，还远远不够。</p>
<p>有些论文，你甚至可能在第二步结束的时候还不能理解。这有可能是因为论文中的主旨对你来说是全新的，论文里的术语和缩写词你都陌生，也可能是因为作者用了你不理解的论据和试验技术，所以导致论文中大部分的内容都不好理解。有些论文有可能写的很差，充斥着未经证实的断言和大量前向引用（forward references）。不过也可能你是在夜里很累的情况下阅读的，因此感觉不太好懂，如果是这样，你可以选择：（1）把论文放到一边，期望着在你走向事业成功的路上不需要理解它，（b）在了解了相关背景知识后，过段时间再回头读，或者（c）坚持不懈继续阅读。</p>
<h4 id="2-3第三步"><a href="#2-3第三步" class="headerlink" title="2.3第三步"></a>2.3第三步</h4><p>为了彻底理解一篇论文，尤其是当你是审稿人时，必须要走到第三步。第三部的核心思想是，试着“在脑中重新实现（virtually re-implement）”那篇论文：也就是，和作者一样做出相同的假设，然后重新实现相同的工作。通过对比你自己得出的和论文中给出的结果，不仅可以很轻易验证一篇论文的创新点是否真实，而且还能发现论文中不会讲的缺点和假想。</p>
<p>这一步需要耗费你很多精力去细化，完成这一步，你就可以验证论文中的每一个假设是否真实。而且，同时要思考下，如果你是作者，会如何呈现并介绍自己的想法。这种虚拟和现实的对比，可以让你对论文中的论据和表达技巧有深刻的理解，当然就可以把这种表达技巧和论据“据为己有”。在完成第三步过程中，你应该时刻不忘记下对于未来研究工作的新想法。</p>
<p>这一步有可能需要耗费初学者很多小时，对于有经验的研究人员也要至少一两个小时。当完成这一步后，你应该可以在脑海中重现构造论文的整个架构，同时能确定论文中哪些是好的，哪些是一般的论点。特别地，你也应该能明确指出论文中不清晰的假设、漏掉引用的相关工作以及论文中试验和分析的手段潜在的缺点。</p>
<h3 id="3-如何完成文献调研"><a href="#3-如何完成文献调研" class="headerlink" title="3.如何完成文献调研"></a>3.如何完成文献调研</h3><p>做文献调研就是考验你读论文技巧的时候了，调研工作有可能需要你阅读几十篇论文，同时也可能是你不熟悉的领域。什么样的论文值得一读？以下就是如何使用“三步法”帮你调研文献。</p>
<p>首先，使用学术搜索引擎例如Google Scholar或者CiteSeer，并且精心选择搜索词，找出三到五篇领域中“最近最多被引用”的论文。对于以上搜到的论文，使用三步法中的第一步，可以使自己对于相关工作有点感觉，然后阅读它们的相关工作章节。你会对于最近的相关工作有缩略图似的总结，如果你足够幸运的话，有可能在以上相关工作中找到近期发表的调研论文。如果你能找到类似的调研论文，调研工作就完成了！认真阅读那篇调研文献，庆祝自己的运气吧。</p>
<p>不然，在第二步中，找到以上几篇论文中相同的引用文献、在引用文献中重复的作者名，这些就是你所调研领域的重点论文和科研人员，下载那些重点论文暂时搁到一边。继续访问那些重要科研人员的网页，看下那些论文是在什么会议集结出版的。这能帮你找到那个领域的顶级会议，因为那些重要科研人员通常会在顶级会议发表论文。</p>
<p>第三步就是访问那些顶级会议的网站，查看一下他们最近的活动。快速扫描一眼就能找到最近的高质量相关论文，这些论文和上面提到暂时放到一边的论文，会对你文献调研工作的第一版本有所帮助。对于这些论文，使用“三步法”中的第二步，如果它们都引用了一篇重要文献，恰巧是你没有搜到的，果断下载并阅读。如果需要，重复以上工作。</p>
<h3 id="4-相关工作"><a href="#4-相关工作" class="headerlink" title="4.相关工作"></a>4.相关工作</h3><p>如果你是为了审稿而读论文，Timothy Roscoe的论文《Writing reviews for systems conferences》可以参考。如果你的计划是写一篇技术性论文，Henning Schulzrinne的综合网页和George Whitesides的过程概述可以参考。最后，Simon Peyton Jones有一个网页涵盖了所有实验技巧。</p>
<p>心理学领域的Iain H. McLean打包发布了一个可下载的“评审矩阵”，介绍了如何用“三步法”简化在实验心理学领域进行论文评审（你有可能用到），以及对于其他领域的论文如何使用“微调三步法”。</p>
<h3 id="5-致谢"><a href="#5-致谢" class="headerlink" title="5.致谢"></a>5.致谢</h3><p>本文第一版由我的学生Hossein Falaki、 Earl Oliver和 Sumair Ur Rahman起草，感谢他们。同时感谢Christophe Diot犀利的评论和目光锐利的Nicole Keshav的校稿。</p>
<p>我想把这篇文章做成在线版，在我收到评论后就做出修改更新。如果您有任何评论或者改进建议，请给我发邮件。感谢诸多通讯员多年来的鼓舞人心的反馈。</p>
<h3 id="6-引用文献"><a href="#6-引用文献" class="headerlink" title="6.引用文献"></a>6.引用文献</h3><p>[1]Literature Review Matrix,”</p>
<p><a href="http://psychologyinc.blogspot.com/">http://psychologyinc.blogspot.com/</a></p>
<p>[2] S. Peyton Jones, \Research Skills,”</p>
<p><a href="http://research.microsoft.com/enus/um/people/simonpj/papers/giving-a-talk/giving-atalk.htm">http://research.microsoft.com/enus/um/people/simonpj/papers/giving-a-talk/giving-atalk.htm</a></p>
<p>[3] T. Roscoe, \Writing Reviews for Systems Conferences,”</p>
<p><a href="http://people.inf.ethz.ch/troscoe/pubs/review-writing.pdf">http://people.inf.ethz.ch/troscoe/pubs/review-writing.pdf</a></p>
<p>[4] H. Schulzrinne, \Writing Technical Articles,”</p>
<p><a href="http://www.cs.columbia.edu/hgs/etc/writing-style.html">http://www.cs.columbia.edu/hgs/etc/writing-style.html</a></p>
<p>[5] G.M. Whitesides, \Whitesides’ Group: Writing a Paper,”</p>
<p><a href="http://www.ee.ucr.edu/rlake/Whitesides">http://www.ee.ucr.edu/rlake/Whitesides</a> writing res paper.pdf</p>
<h3 id="7-校对注"><a href="#7-校对注" class="headerlink" title="7.校对注"></a>7.校对注</h3><p>或许有读者会和我一样，对本文作者所在学院“大卫·切瑞顿计算机科学学院”的名称有点好奇。网上搜索了一下，其由来如下：</p>
<p>大卫·切瑞顿，加拿大人，是斯坦福大学教授，教书之余，他还热衷于投资初创企业，他是谷歌公司的一个投资人。在福布斯2013年3月发布的亿万富豪榜单中，大卫·切瑞顿以17亿美元身价成为加拿大最富有的20位富豪之一。</p>
<p>2005 年秋天，切瑞顿教授向滑铁卢大学捐赠了 2500 万美元，作为在计算机科学领域获得杰出成就的奖励。滑铁卢大学以他的名字重新命名了计算机科学学院。</p>
<p>原文网址：</p>
<ol>
<li>PDF版：<a href="http://ccr.sigcomm.org/online/files/p83-keshavA.pdf">http://ccr.sigcomm.org/online/files/p83-keshavA.pdf</a></li>
<li>ACM：<a href="http://dl.acm.org/citation.cfm?id=1273458">http://dl.acm.org/citation.cfm?id=1273458</a></li>
</ol>
<p>原文链接： <a href="http://ccr.sigcomm.org/online/files/p83-keshavA.pdf">S. Keshav</a>  翻译： <a href="http://blog.jobbole.com/">伯乐在线 </a>- <a href="http://blog.jobbole.com/author/qianlong/">乾龙</a><br>译文链接： <a href="http://blog.jobbole.com/47506/">http://blog.jobbole.com/47506/</a></p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>少用抗生素</title>
    <url>//posts/7771a716/</url>
    <content><![CDATA[<h1 id="生活中常用抗生素的详细总结及替代药品指南"><a href="#生活中常用抗生素的详细总结及替代药品指南" class="headerlink" title="生活中常用抗生素的详细总结及替代药品指南"></a>生活中常用抗生素的详细总结及替代药品指南</h1><p>抗生素是治疗细菌感染的药物，但<strong>滥用会导致耐药性</strong>，因此必须合理使用。以下为常见抗生素的分类、用途、注意事项及替代方案。</p>
<hr>
<h2 id="一、常用抗生素分类及替代方案"><a href="#一、常用抗生素分类及替代方案" class="headerlink" title="一、常用抗生素分类及替代方案"></a>一、常用抗生素分类及替代方案</h2><h3 id="1-青霉素类"><a href="#1-青霉素类" class="headerlink" title="1. 青霉素类"></a>1. 青霉素类</h3><p><strong>代表药</strong>：阿莫西林、青霉素V钾片<br><strong>用途</strong>：</p>
<ul>
<li>扁桃体炎、中耳炎、皮肤感染<br><strong>替代方案（轻症或预防）</strong>：<br>✔ 盐水漱口（缓解咽喉炎）<br>✔ 局部抗菌药膏（如莫匹罗星软膏，用于小伤口）<br>✔ 蜂蜜水（缓解咳嗽，抑制部分细菌）  </li>
</ul>
<hr>
<h3 id="2-头孢菌素类"><a href="#2-头孢菌素类" class="headerlink" title="2. 头孢菌素类"></a>2. 头孢菌素类</h3><p><strong>代表药</strong>：头孢氨苄（一代）、头孢克洛（二代）、头孢克肟（三代）<br><strong>用途</strong>：</p>
<ul>
<li>呼吸道感染、尿路感染、皮肤感染<br><strong>替代方案（轻症或辅助治疗）</strong>：<br>✔ 蔓越莓汁（预防尿路感染，抑制大肠杆菌）<br>✔ 益生菌（如乳酸菌，调节肠道菌群）<br>✔ 姜茶+蜂蜜（缓解呼吸道症状）  </li>
</ul>
<hr>
<h3 id="3-大环内酯类"><a href="#3-大环内酯类" class="headerlink" title="3. 大环内酯类"></a>3. 大环内酯类</h3><p><strong>代表药</strong>：阿奇霉素、克拉霉素<br><strong>用途</strong>：</p>
<ul>
<li>支原体肺炎、百日咳<br><strong>替代方案</strong>：<br>✔ 甘草含片（缓解咽喉不适）<br>✔ 蒸汽吸入（缓解鼻塞、咳嗽）<br>✔ 维生素C+锌（增强免疫力）  </li>
</ul>
<hr>
<h3 id="4-喹诺酮类"><a href="#4-喹诺酮类" class="headerlink" title="4. 喹诺酮类"></a>4. 喹诺酮类</h3><p><strong>代表药</strong>：左氧氟沙星、莫西沙星<br><strong>用途</strong>：</p>
<ul>
<li>尿路感染、肠道感染<br><strong>替代方案</strong>：<br>✔ D-甘露糖（预防尿路感染）<br>✔ 口服补液盐+益生菌（缓解腹泻）<br>✔ 大蒜提取物（天然抗菌）  </li>
</ul>
<hr>
<h3 id="5-硝基咪唑类"><a href="#5-硝基咪唑类" class="headerlink" title="5. 硝基咪唑类"></a>5. 硝基咪唑类</h3><p><strong>代表药</strong>：甲硝唑、替硝唑<br><strong>用途</strong>：</p>
<ul>
<li>牙周炎、阴道炎<br><strong>替代方案</strong>：<br>✔ 茶树精油（稀释使用）<br>✔ 酸奶（含益生菌）<br>✔ 蜂蜜+姜黄（抗炎）  </li>
</ul>
<hr>
<h3 id="6-磺胺类"><a href="#6-磺胺类" class="headerlink" title="6. 磺胺类"></a>6. 磺胺类</h3><p><strong>代表药</strong>：复方新诺明<br><strong>用途</strong>：</p>
<ul>
<li>尿路感染、肺炎<br><strong>替代方案</strong>：<br>✔ 蔓越莓提取物<br>✔ 蒲公英茶（利尿）  </li>
</ul>
<hr>
<h2 id="二、抗生素使用原则"><a href="#二、抗生素使用原则" class="headerlink" title="二、抗生素使用原则"></a>二、抗生素使用原则</h2><ol>
<li><strong>严格遵医嘱</strong>，不自行购买或停药</li>
<li><strong>病毒性感染（感冒、流感）不用抗生素</strong></li>
<li><strong>轻症优先考虑非药物疗法</strong></li>
</ol>
<hr>
<h2 id="三、可不用抗生素的情况"><a href="#三、可不用抗生素的情况" class="headerlink" title="三、可不用抗生素的情况"></a>三、可不用抗生素的情况</h2><p>✅ 普通感冒 → 多休息、维生素C<br>     ✅ 轻微腹泻 → 口服补液盐+益生菌<br>    ✅ 小伤口感染 → 碘伏消毒+抗菌药膏<br>    ✅ 轻度尿路感染 → 多喝水+蔓越莓汁  </p>
<hr>
<h2 id="四、天然替代品（辅助治疗）"><a href="#四、天然替代品（辅助治疗）" class="headerlink" title="四、天然替代品（辅助治疗）"></a>四、天然替代品（辅助治疗）</h2><div class="table-container">
<table>
<thead>
<tr>
<th>天然成分</th>
<th>作用</th>
<th>适用情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>蜂蜜</td>
<td>抗菌、抗炎</td>
<td>咽喉痛、咳嗽</td>
</tr>
<tr>
<td>大蒜</td>
<td>广谱抗菌</td>
<td>轻度感染</td>
</tr>
<tr>
<td>姜黄</td>
<td>抗炎</td>
<td>胃炎</td>
</tr>
<tr>
<td>茶树精油</td>
<td>抗菌</td>
<td>皮肤感染</td>
</tr>
<tr>
<td>益生菌</td>
<td>调节菌群</td>
<td>腹泻</td>
</tr>
</tbody>
</table>
</div>
<hr>
<h2 id="五、常见误区"><a href="#五、常见误区" class="headerlink" title="五、常见误区"></a>五<strong>、常见误区</strong></h2><p>❌ <strong>“抗生素=消炎药”</strong></p>
<ul>
<li>真正消炎药是布洛芬、激素，抗生素只杀细菌。 ❌ <strong>“高级抗生素更好”</strong></li>
<li>窄谱抗生素（如青霉素）针对性强，副作用更小。 ❌ <strong>“感冒吃头孢”</strong></li>
<li>90%感冒是病毒引起，抗生素无效。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>✅ 轻症优先非药物疗法<br>✅ 必须使用时严格按疗程服用<br>✅ 病毒性感染无需抗生素  </p>
<p>合理用药，保护健康！ 💊🚫🦠</p>
]]></content>
      <categories>
        <category>health</category>
      </categories>
  </entry>
  <entry>
    <title>施氏食狮史</title>
    <url>//posts/16c889de/</url>
    <content><![CDATA[<h1 id="施氏食狮史"><a href="#施氏食狮史" class="headerlink" title="施氏食狮史"></a>施氏食狮史</h1><p><a href="https://www.gushiwen.cn/shiwens/default.aspx?astr=赵元任">赵元任</a><a href="https://www.gushiwen.cn/shiwens/default.aspx?cstr=近现代">〔近现代〕</a></p>
<p>　　石室诗士施氏，嗜狮，誓食十狮。施氏时时适市视狮。十时，适十狮适市。是时，适施氏适市。施氏视是十狮，恃矢势，使是十狮逝世。氏拾是十狮尸，适石室。石室湿，氏使侍拭石室。石室拭，氏始试食是十狮尸。食时，始识是十狮尸，实十石狮尸。试释是事。</p>
<p>译文：</p>
<blockquote>
<p>石头屋子里有一个诗人姓施，喜欢吃狮子，发誓要吃掉十头狮子。这位先生经常去市场寻找狮子。这一天十点钟的时候正好有十头大狮子到了市场。这时候他正好也到了市场。于是，这位先生注视着这十头狮子，凭借着自己的十把石头弓箭，把这十头狮子杀死了。先生扛起狮子的尸体走回石头屋子。石头屋子很潮湿，先生让仆人擦拭石头屋子。擦好以后，先生开始尝试吃这十头狮子的尸体。当他吃的时候，才识破这十头狮尸，并非真的狮尸，而是十头用石头做的狮子的尸体。先生这才意识到这就是事情的真相。请尝试解释这件事情。</p>
</blockquote>
]]></content>
      <categories>
        <category>中国古文</category>
      </categories>
  </entry>
  <entry>
    <title>愿你走出半生，归来仍是少年</title>
    <url>//posts/cc89f5f1/</url>
    <content><![CDATA[<blockquote>
<p>初中的时候看到的一篇文章，近来又想起这篇文章特意去搜了一下，也是还能搜到，特此记录。&lt;初中17年的时候到现在都7年了啊&gt;</p>
</blockquote>
<h1 id="北京四中初二女孩作文：愿你走出半生，归来仍是少年。"><a href="#北京四中初二女孩作文：愿你走出半生，归来仍是少年。" class="headerlink" title="北京四中初二女孩作文：愿你走出半生，归来仍是少年。"></a>北京四中初二女孩作文：愿你走出半生，归来仍是少年。</h1><p>​                                                                                                     <strong>愿你</strong></p>
<hr>
<blockquote>
<p><strong>作者：张咏言</strong>（北京四中初二学生）</p>
<p> <strong>“愿你走出半生，归来仍是少年。” 见字如面——致未来的张咏言</strong></p>
</blockquote>
<hr>
<p> <strong>亲爱的自己：</strong></p>
<p> 　     我不知道为什么写信给你，更不知道你何时能收到这封信，在这里有些愿望寄托于你。</p>
<p>​          首先愿你平安无事地度过青春期，但别平安无事地度过青春。你不是他们口中的乖乖女，这点我比谁都清楚，你有时候果断、激动甚至有点“草莽精神”的意思，着实让我吓了一跳。</p>
<p>​          愿你的世界里天天都是好天气。即便忘带伞也要告诉自己：宝宝今天偏要淋雨！原来驱赶阴霾的太阳是明媚的自己。</p>
<p>​          愿你的成熟不是被迫。学着笑而不语，学着承认不相信，学着接受不尽人意。我知道，你是个急性子，但请慢慢来，不着急。</p>
<p>​           愿你拥有好运气。对一切充满感激，喜欢美好，也喜欢自己。你笑起来有一颗虎牙和一个酒窝，这点很好。</p>
<p>​           愿你有盔甲也有软肋。善良得有原则，感性得有底线。对可恶的，就该连本带利地还击。凶狠之后别失礼仪：对不起弄伤了你，可我是个女孩子我必须保护好自己。</p>
<p>​           愿你不饶点滴，不饶自己。以后想有选择权的话，从现在开始好好学习。你所做的一切都不为谁，所以一切后果别找理由，独自承担。</p>
<p>​           愿你一生努力，一生被爱。在最糟糕的那天和注定的人撞个满怀。也许你二十岁时会坠入爱河，但千万别淹死了。爱不到的人就别等了，千万别把尊严弄丢了，找个愿意陪你虚度光阴的一起老去吧。</p>
<p>​           愿你活成自己想成为的模样。不必取悦任何人也不无故讨厌某个人。你总是偷偷在意其他人的看法眼光，为此我十分苦恼。希望你明白，无所谓的东西不用放在心里，他或她的言论权当呼啸而过的耳旁风罢。</p>
<p>​           愿你付出甘之如饴，所得归于喜欢。不甘平庸，是你。有人说你好强，我怎么没发现，好吧，我也并不完全了解你。只是别累着自己，哪怕收获多么丰盈。</p>
<p>​          愿你道路漫长（老师批改：可以走过长长的路），有的是（老师批改：丰盈的）时间发生故事。若没有人陪你颠沛流离，便以梦为马，随处可（而）栖。</p>
<p>​          愿你在最无趣无力的日子仍对世界保持好奇。撑不住了就先（去）睡一觉，等等再说。还有人在爱你，你凭什么辜负他们选择放弃。（老师批改：世界很大，随时都会绽放奇迹。）</p>
<p>​           愿你有高跟鞋但穿着球鞋。愿你一辈子下来心上没有补丁，愿你的每次流泪都是喜极而泣，愿你精疲力尽时有树可倚，愿你释怀后一身轻，愿你走出半生，归来仍是少年。（此句尤显精彩！）</p>
<p>​           不觉写了这么多，希望你别让它们都变成空话。我是不是太注重“以后”了？未来是什么样的就交给未来的自己回答吧，谁知道明天会发生什么，你知道吗？</p>
<p> 祝：</p>
<p> 一生久安  岁月无扰！</p>
<p>​                                                                                                                                                                                                      曾经的你<br>​                                                                                                                                                                                           2017年3月12日</p>
]]></content>
      <tags>
        <tag>articles</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>//posts/81d5af05/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="0、基础元字符"><a href="#0、基础元字符" class="headerlink" title="0、基础元字符"></a>0、基础元字符</h2><h3 id="单字符匹配"><a href="#单字符匹配" class="headerlink" title="单字符匹配"></a>单字符匹配</h3><p><code>.</code> 匹配任意1个字符(除了\n)，. 匹配点本身</p>
<p><code>[]</code> 匹配括号中列举的字符</p>
<p><code>\d</code> 匹配数字0-9；<code>\D</code> 匹配非数字</p>
<p> <code>\s</code> 匹配空白-空格、tab键；<code>\S</code> 匹配非空白</p>
<p><code>\w</code> 匹配单词字符，a-z\A-Z\0-9_； <code>\W</code> 匹配非单词字符</p>
<h3 id="数量匹配"><a href="#数量匹配" class="headerlink" title="数量匹配"></a>数量匹配</h3><p><code>*</code>   匹配前一个规则的字符出现 0至无数次</p>
<p><code>+</code>  匹配前一个规则的字符出现 1至无数次</p>
<p><code>?</code>  匹配前一个规则的字符出现  0次或1次</p>
<p><code>{m}</code>  匹配前一个规则的字符出现  m次</p>
<p><code>{m,}</code>  匹配前一个规则的字符出现  最少m次</p>
<p><code>{m,n}</code>  匹配前一个规则的字符出现  m到n次</p>
<h3 id="边界匹配"><a href="#边界匹配" class="headerlink" title="边界匹配"></a>边界匹配</h3><p><code>^</code>  匹配字符串开头</p>
<p><code>$</code>  匹配字符串结尾</p>
<p><code>\b</code>  匹配单词的边界</p>
<p><code>\B</code>  匹配非单词边界</p>
<h3 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h3><p><code>|</code>  匹配左右任意一个表达式</p>
<p><code>()</code>  将括号中字符作为一个分组</p>
<h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul>
<li><p>数字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>n位的数字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\d{n}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>至少n位的数字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\d{n,}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>m-n位的数字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\d{m,n}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>零和非零开头的数字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(<span class="hljs-number">0</span>|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*)$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>非零开头的最多带两位小数的数字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^([<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*)+(\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>带1-2位小数的正数或负数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(\-)?\d+(\.\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>正数、负数、和小数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(\-|\+)?\d+(\.\d+)?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>有两位小数的正实数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+(\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>})?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>有1~3位小数的正实数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+(\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>})?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>非零的正整数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*$ 或 ^([<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*){<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}$ 或 ^\+?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>非零的负整数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\-[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][]<span class="hljs-number">0</span>-<span class="hljs-number">9</span><span class="hljs-string">"\*$ 或 ^-[1-9]\d\*$</span><br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>非负整数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\d+$ 或 ^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*|<span class="hljs-number">0</span>$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>非正整数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^-[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*|<span class="hljs-number">0</span>$ 或 ^((-\d+)|(<span class="hljs-number">0</span>+))$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>非负浮点数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\d+(\.\d+)?$ 或 ^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*\.\d\*|<span class="hljs-number">0</span>\.\d\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*|<span class="hljs-number">0</span>?\<span class="hljs-number">.0</span>+|<span class="hljs-number">0</span>$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>非正浮点数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^((-\d+(\.\d+)?)|(<span class="hljs-number">0</span>+(\<span class="hljs-number">.0</span>+)?))$ 或 ^(-([<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*\.\d\*|<span class="hljs-number">0</span>\.\d\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*))|<span class="hljs-number">0</span>?\<span class="hljs-number">.0</span>+|<span class="hljs-number">0</span>$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>正浮点数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*\.\d\*|<span class="hljs-number">0</span>\.\d\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*$ 或 ^(([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*)|([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)|([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*))$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>负浮点数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^-([<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*\.\d\*|<span class="hljs-number">0</span>\.\d\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*)$ 或 ^(-(([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*)|([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*\.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)|([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*)))$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>浮点数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(-?\d+)(\.\d+)?$ 或 ^-?([<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*\.\d\*|<span class="hljs-number">0</span>\.\d\*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d\*|<span class="hljs-number">0</span>?\<span class="hljs-number">.0</span>+|<span class="hljs-number">0</span>)$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h2 id="二、校验字符表达式"><a href="#二、校验字符表达式" class="headerlink" title="二、校验字符表达式"></a>二、校验字符表达式</h2><ul>
<li><p>汉字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[\u4e00-\u9fa5]{<span class="hljs-number">0</span>,}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>英文和数字：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>]+$ 或 ^[A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>,<span class="hljs-number">40</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>长度为3-20的所有字符：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^.{<span class="hljs-number">3</span>,<span class="hljs-number">20</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>由26个英文字母组成的字符串：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[A-<span class="hljs-title class_">Za</span>-z]+$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>由26个大写英文字母组成的字符串：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[A-Z]+$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>由26个小写英文字母组成的字符串：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[a-z]+$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>由数字和26个英文字母组成的字符串：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>]+$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>由数字、26个英文字母或者下划线组成的字符串：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\w+$ 或 ^\w{<span class="hljs-number">3</span>,<span class="hljs-number">20</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>中文、英文、数字包括下划线：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[\u4E00-\u9FA5A-<span class="hljs-title class_">Za</span>-z0-9_]+$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>中文、英文、数字但不包括下划线等符号：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[\u4E00-\u9FA5A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>]+$ 或 ^[\u4E00-\u9FA5A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>,<span class="hljs-number">20</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>可以输入含有^%&amp;’,;=?$\”等字符：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[^%&amp;<span class="hljs-string">',;=?$\x22]+</span><br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>禁止输入含有~的字符：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[^~]+<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h2 id="三、特殊要求的表达式"><a href="#三、特殊要求的表达式" class="headerlink" title="三、特殊要求的表达式"></a>三、特殊要求的表达式</h2><ul>
<li><p>Email地址：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\w+([-+.]\w+)\*@\w+([-.]\w+)\*\.\w+([-.]\w+)\*$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>域名：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>][-a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">0</span>,<span class="hljs-number">62</span>}(\.[a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>][-a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">0</span>,<span class="hljs-number">62</span>})+\.?<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>InternetURL：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[a-zA-z]+:<span class="hljs-comment">//[^\s]\* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]\*)?$</span><br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>手机号码：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(<span class="hljs-number">13</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">14</span>[<span class="hljs-number">01456879</span>]|<span class="hljs-number">15</span>[<span class="hljs-number">0</span>-<span class="hljs-number">35</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">16</span>[<span class="hljs-number">2567</span>]|<span class="hljs-number">17</span>[<span class="hljs-number">0</span>-<span class="hljs-number">8</span>]|<span class="hljs-number">18</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">19</span>[<span class="hljs-number">0</span>-<span class="hljs-number">35</span>-<span class="hljs-number">9</span>])\d{<span class="hljs-number">8</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(\(\d{<span class="hljs-number">3</span>,<span class="hljs-number">4</span>}-)|\d{<span class="hljs-number">3.4</span>}-)?\d{<span class="hljs-number">7</span>,<span class="hljs-number">8</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>国内电话号码(0511-4405222、021-87888822)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">\d{<span class="hljs-number">3</span>}-\d{<span class="hljs-number">8</span>}|\d{<span class="hljs-number">4</span>}-\d{<span class="hljs-number">7</span>}<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: </p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">((\d{<span class="hljs-number">11</span>})|^((\d{<span class="hljs-number">7</span>,<span class="hljs-number">8</span>})|(\d{<span class="hljs-number">4</span>}|\d{<span class="hljs-number">3</span>})-(\d{<span class="hljs-number">7</span>,<span class="hljs-number">8</span>})|(\d{<span class="hljs-number">4</span>}|\d{<span class="hljs-number">3</span>})-(\d{<span class="hljs-number">7</span>,<span class="hljs-number">8</span>})-(\d{<span class="hljs-number">4</span>}|\d{<span class="hljs-number">3</span>}|\d{<span class="hljs-number">2</span>}|\d{<span class="hljs-number">1</span>})|(\d{<span class="hljs-number">7</span>,<span class="hljs-number">8</span>})-(\d{<span class="hljs-number">4</span>}|\d{<span class="hljs-number">3</span>}|\d{<span class="hljs-number">2</span>}|\d{<span class="hljs-number">1</span>}))$)<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">(^\d{<span class="hljs-number">15</span>}$)|(^\d{<span class="hljs-number">18</span>}$)|(^\d{<span class="hljs-number">17</span>}(\d|X|x)$)<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[a-zA-Z][a-zA-<span class="hljs-variable constant_">Z0</span>-9_]{<span class="hljs-number">4</span>,<span class="hljs-number">15</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[a-zA-Z]\w{<span class="hljs-number">5</span>,<span class="hljs-number">17</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(?=.\*\d)(?=.\*[a-z])(?=.\*[A-Z])[a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">8</span>,<span class="hljs-number">10</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(?=.\*\d)(?=.\*[a-z])(?=.\*[A-Z]).{<span class="hljs-number">8</span>,<span class="hljs-number">10</span>}$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>日期格式：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^\d{<span class="hljs-number">4</span>}-\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}-\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>一年的12个月(01～09和1～12)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(<span class="hljs-number">0</span>?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">2</span>])$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>一个月的31天(01～09和1～31)：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^((<span class="hljs-number">0</span>?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])|((<span class="hljs-number">1</span>|<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>钱的输入格式：</p>
<ol>
<li><p>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
</li>
</ul>
<ol>
<li><p>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(<span class="hljs-number">0</span>|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*)$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
<ol>
<li><p>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^(<span class="hljs-number">0</span>|-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]\*)$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
<ol>
<li><p>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+(.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+)?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
<ol>
<li><p>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+(.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>})?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
<ol>
<li><p>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+(.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
<ol>
<li><p>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}(,[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">3</span>})\*(.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
<ol>
<li><p>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+|[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}(,[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">3</span>})\*)(.[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})?$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ol>
<ol>
<li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li>
</ol>
<ul>
<li><p>xml文件：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">^([a-zA-Z]+-?)+[a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]+\\.[x|X][m|M][l|L]$<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>中文字符的正则表达式：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[\u4e00-\u9fa5]<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<ul>
<li><p>双字节字符：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[^\x00-\xff] <br></code></pre></td></tr></tbody></table></figure>
<p><strong>(包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></p>
</li>
<li><p>空白行的正则表达式：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">\n\s\*\r <br></code></pre></td></tr></tbody></table></figure>
<p><strong>(可以用来删除空白行)</strong></p>
</li>
<li><p>HTML标记的正则表达式：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">&lt;(\S\*?)[^&gt;]\*&gt;.\*?|<span class="language-xml">&lt;.\*? /&gt;</span> <br></code></pre></td></tr></tbody></table></figure>
<p><strong>( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></p>
</li>
<li><p>腾讯QQ号：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>,} <br></code></pre></td></tr></tbody></table></figure>
<p><strong>(腾讯QQ号从10000开始)</strong></p>
</li>
<li><p>中国邮政编码：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d{<span class="hljs-number">5</span>}(?!\d) <br></code></pre></td></tr></tbody></table></figure>
<p><strong>(中国邮政编码为6位数字)</strong></p>
</li>
<li><p>IPv4地址：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><code class="hljs js">((<span class="hljs-number">2</span>(<span class="hljs-number">5</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]|[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d))|[<span class="hljs-number">0</span>-<span class="hljs-number">1</span>]?\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})(\.((<span class="hljs-number">2</span>(<span class="hljs-number">5</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]|[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d))|[<span class="hljs-number">0</span>-<span class="hljs-number">1</span>]?\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})){<span class="hljs-number">3</span>}<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<hr>
<h2 id="🍔正则"><a href="#🍔正则" class="headerlink" title="🍔正则"></a>🍔正则</h2><h3 id="火车车次"><a href="#火车车次" class="headerlink" title="火车车次"></a>火车车次</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[<span class="hljs-title class_">GCDZTSPKXLY1</span>-<span class="hljs-number">9</span>]\d{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="手机机身码-IMEI"><a href="#手机机身码-IMEI" class="headerlink" title="手机机身码(IMEI)"></a>手机机身码(IMEI)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\d{<span class="hljs-number">15</span>,<span class="hljs-number">17</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="必须带端口号的网址-或ip"><a href="#必须带端口号的网址-或ip" class="headerlink" title="必须带端口号的网址(或ip)"></a>必须带端口号的网址(或ip)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^((ht|f)tps?:\/\/)?[\w-]+(\.[\w-]+)+:\d{<span class="hljs-number">1</span>,<span class="hljs-number">5</span>}\/?$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="网址-URL"><a href="#网址-URL" class="headerlink" title="网址(URL)"></a>网址(URL)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(((ht|f)tps?):\/\/)?([^!@#$%^&amp;*?.\s-]([^!@#$%^&amp;*?.\s]{<span class="hljs-number">0</span>,<span class="hljs-number">63</span>}[^!@#$%^&amp;*?.\s])?\.)+[a-z]{<span class="hljs-number">2</span>,<span class="hljs-number">6</span>}\/?/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="统一社会信用代码"><a href="#统一社会信用代码" class="headerlink" title="统一社会信用代码"></a>统一社会信用代码</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[<span class="hljs-number">0</span>-9A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NPQRTUWXY</span>]{<span class="hljs-number">2</span>}\d{<span class="hljs-number">6</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NPQRTUWXY</span>]{<span class="hljs-number">10</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="统一社会信用代码-宽松匹配-15位-18位-20位数字-字母"><a href="#统一社会信用代码-宽松匹配-15位-18位-20位数字-字母" class="headerlink" title="统一社会信用代码(宽松匹配)(15位/18位/20位数字/字母)"></a>统一社会信用代码(宽松匹配)(15位/18位/20位数字/字母)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Za</span>-z]{<span class="hljs-number">15</span>})|([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Za</span>-z]{<span class="hljs-number">18</span>})|([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Za</span>-z]{<span class="hljs-number">20</span>}))$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="迅雷链接"><a href="#迅雷链接" class="headerlink" title="迅雷链接"></a>迅雷链接</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^thunderx?:\/\/[a-zA-Z\d]+=$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="ed2k链接-宽松匹配"><a href="#ed2k链接-宽松匹配" class="headerlink" title="ed2k链接(宽松匹配)"></a>ed2k链接(宽松匹配)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^<span class="hljs-attr">ed2k</span>:\/\/\|file\|.+\|\/$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="磁力链接-宽松匹配"><a href="#磁力链接-宽松匹配" class="headerlink" title="磁力链接(宽松匹配)"></a>磁力链接(宽松匹配)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^<span class="hljs-attr">magnet</span>:\?xt=<span class="hljs-attr">urn</span>:<span class="hljs-attr">btih</span>:[<span class="hljs-number">0</span>-9a-fA-F]{<span class="hljs-number">40</span>,}.*$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="子网掩码-不包含-0-0-0-0"><a href="#子网掩码-不包含-0-0-0-0" class="headerlink" title="子网掩码(不包含 0.0.0.0)"></a>子网掩码(不包含 0.0.0.0)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>)\<span class="hljs-number">.0</span>\<span class="hljs-number">.0</span>\<span class="hljs-number">.0</span>|<span class="hljs-number">255</span>\.(<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>|<span class="hljs-number">0</span>)\<span class="hljs-number">.0</span>\<span class="hljs-number">.0</span>|<span class="hljs-number">255</span>\<span class="hljs-number">.255</span>\.(<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>|<span class="hljs-number">0</span>)\<span class="hljs-number">.0</span>|<span class="hljs-number">255</span>\<span class="hljs-number">.255</span>\<span class="hljs-number">.255</span>\.(<span class="hljs-number">255</span>|<span class="hljs-number">254</span>|<span class="hljs-number">252</span>|<span class="hljs-number">248</span>|<span class="hljs-number">240</span>|<span class="hljs-number">224</span>|<span class="hljs-number">192</span>|<span class="hljs-number">128</span>|<span class="hljs-number">0</span>)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="linux”隐藏文件”路径"><a href="#linux”隐藏文件”路径" class="headerlink" title="linux”隐藏文件”路径"></a>linux”隐藏文件”路径</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\/(?:[^<span class="hljs-regexp">/]+\/)*\.[^/]*/</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="linux文件夹路径"><a href="#linux文件夹路径" class="headerlink" title="linux文件夹路径"></a>linux文件夹路径</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\/(?:[^<span class="hljs-regexp">/]+\/)*$/</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="linux文件路径"><a href="#linux文件路径" class="headerlink" title="linux文件路径"></a>linux文件路径</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\/(?:[^<span class="hljs-regexp">/]+\/)*[^/]+$/</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="window”文件夹”路径"><a href="#window”文件夹”路径" class="headerlink" title="window”文件夹”路径"></a>window”文件夹”路径</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-zA-Z]:\\(?:\w+\\?)*$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="window下”文件”路径"><a href="#window下”文件”路径" class="headerlink" title="window下”文件”路径"></a>window下”文件”路径</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-zA-Z]:\\(?:\w+\\)*\w+\.\w+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="股票代码-A股"><a href="#股票代码-A股" class="headerlink" title="股票代码(A股)"></a>股票代码(A股)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(s[hz]|S[<span class="hljs-variable constant_">HZ</span>])(<span class="hljs-number">000</span>[\d]{<span class="hljs-number">3</span>}|<span class="hljs-number">002</span>[\d]{<span class="hljs-number">3</span>}|<span class="hljs-number">300</span>[\d]{<span class="hljs-number">3</span>}|<span class="hljs-number">600</span>[\d]{<span class="hljs-number">3</span>}|<span class="hljs-number">60</span>[\d]{<span class="hljs-number">4</span>})$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数"><a href="#大于等于0-小于等于150-支持小数位出现5-如145-5-用于判断考卷分数" class="headerlink" title="大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数"></a>大于等于0, 小于等于150, 支持小数位出现5, 如145.5, 用于判断考卷分数</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^<span class="hljs-number">150</span>$|^(?:\d|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d|<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)(?:\<span class="hljs-number">.5</span>)?$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/&lt;!--[\s\S]*?--&gt;/g<br></code></pre></td></tr></tbody></table></figure>
<h3 id="md5格式-32位"><a href="#md5格式-32位" class="headerlink" title="md5格式(32位)"></a>md5格式(32位)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-fA-<span class="hljs-variable constant_">F0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">32</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="GUID-UUID"><a href="#GUID-UUID" class="headerlink" title="GUID/UUID"></a>GUID/UUID</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-f\d]{<span class="hljs-number">4</span>}(?:[a-f\d]{<span class="hljs-number">4</span>}-){<span class="hljs-number">4</span>}[a-f\d]{<span class="hljs-number">12</span>}$/i<br></code></pre></td></tr></tbody></table></figure>
<h3 id="版本号-version-格式必须为X-Y-Z"><a href="#版本号-version-格式必须为X-Y-Z" class="headerlink" title="版本号(version)格式必须为X.Y.Z"></a>版本号(version)格式必须为X.Y.Z</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\d+(?:\.\d+){<span class="hljs-number">2</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="视频-video-链接地址（视频格式可按需增删）"><a href="#视频-video-链接地址（视频格式可按需增删）" class="headerlink" title="视频(video)链接地址（视频格式可按需增删）"></a>视频(video)链接地址（视频格式可按需增删）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^https?:\/\/(.+\/)+.+(\.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4))$/i<br></code></pre></td></tr></tbody></table></figure>
<h3 id="图片-image-链接地址（图片格式可按需增删）"><a href="#图片-image-链接地址（图片格式可按需增删）" class="headerlink" title="图片(image)链接地址（图片格式可按需增删）"></a>图片(image)链接地址（图片格式可按需增删）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^https?:\/\/(.+\/)+.+(\.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i<br></code></pre></td></tr></tbody></table></figure>
<h3 id="24小时制时间（HH-mm-ss）"><a href="#24小时制时间（HH-mm-ss）" class="headerlink" title="24小时制时间（HH:mm:ss）"></a>24小时制时间（HH:mm:ss）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:[<span class="hljs-number">01</span>]\d|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">3</span>]):[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]\<span class="hljs-attr">d</span>:[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]\d$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="12小时制时间（hh-mm-ss）"><a href="#12小时制时间（hh-mm-ss）" class="headerlink" title="12小时制时间（hh:mm:ss）"></a>12小时制时间（hh:mm:ss）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">2</span>]|<span class="hljs-number">0</span>?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]):[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]\<span class="hljs-attr">d</span>:[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]\d$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="base64格式"><a href="#base64格式" class="headerlink" title="base64格式"></a>base64格式</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\s*<span class="hljs-attr">data</span>:(?:[a-z]+\/[a-z0-<span class="hljs-number">9</span>-+.]+(?:;[a-z-]+=[a-z0-<span class="hljs-number">9</span>-]+)?)?(?:;base64)?,([a-z0-<span class="hljs-number">9</span>!$&amp;<span class="hljs-string">',()*+;=\-._~:@/?%\s]*?)\s*$/i</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="数字-货币金额（支持负数、千分位分隔符）"><a href="#数字-货币金额（支持负数、千分位分隔符）" class="headerlink" title="数字/货币金额（支持负数、千分位分隔符）"></a>数字/货币金额（支持负数、千分位分隔符）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^-?\d{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}(,\d{<span class="hljs-number">3</span>})*(\.\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>})?$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="银行卡号（10到30位-覆盖对公-私账户-参考微信支付）"><a href="#银行卡号（10到30位-覆盖对公-私账户-参考微信支付）" class="headerlink" title="银行卡号（10到30位, 覆盖对公/私账户, 参考微信支付）"></a>银行卡号（10到30位, 覆盖对公/私账户, 参考<a href="https://pay.weixin.qq.com/wiki/doc/api/xiaowei.php?chapter=22_1">微信支付</a>）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d{<span class="hljs-number">9</span>,<span class="hljs-number">29</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="中文姓名"><a href="#中文姓名" class="headerlink" title="中文姓名"></a>中文姓名</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:[\u4e00-\u9fa5·]{<span class="hljs-number">2</span>,<span class="hljs-number">16</span>})$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="英文姓名"><a href="#英文姓名" class="headerlink" title="英文姓名"></a>英文姓名</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/(^[a-zA-Z][a-zA-Z\s]{<span class="hljs-number">0</span>,<span class="hljs-number">20</span>}[a-zA-Z]$)/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="车牌号-新能源"><a href="#车牌号-新能源" class="headerlink" title="车牌号(新能源)"></a>车牌号(新能源)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-Z](([<span class="hljs-variable constant_">DF</span>]((?![<span class="hljs-variable constant_">IO</span>])[a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>](?![<span class="hljs-variable constant_">IO</span>]))[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>})|([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">5</span>}[<span class="hljs-variable constant_">DF</span>]))$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="车牌号-非新能源"><a href="#车牌号-非新能源" class="headerlink" title="车牌号(非新能源)"></a>车牌号(非新能源)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-Z][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>}[A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>挂学警港澳]$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="车牌号-新能源-非新能源"><a href="#车牌号-新能源-非新能源" class="headerlink" title="车牌号(新能源+非新能源)"></a>车牌号(新能源+非新能源)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-Z][A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>,<span class="hljs-number">5</span>}[A-<span class="hljs-variable constant_">HJ</span>-<span class="hljs-variable constant_">NP</span>-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>挂学警港澳]$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="手机号-mobile-phone-中国-严谨-根据工信部2019年最新公布的手机号段"><a href="#手机号-mobile-phone-中国-严谨-根据工信部2019年最新公布的手机号段" class="headerlink" title="手机号(mobile phone)中国(严谨), 根据工信部2019年最新公布的手机号段"></a>手机号(mobile phone)中国(严谨), 根据工信部2019年最新公布的手机号段</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:(?:\+|<span class="hljs-number">00</span>)<span class="hljs-number">86</span>)?<span class="hljs-number">1</span>(?:(?:<span class="hljs-number">3</span>[\d])|(?:<span class="hljs-number">4</span>[<span class="hljs-number">5</span>-<span class="hljs-number">79</span>])|(?:<span class="hljs-number">5</span>[<span class="hljs-number">0</span>-<span class="hljs-number">35</span>-<span class="hljs-number">9</span>])|(?:<span class="hljs-number">6</span>[<span class="hljs-number">5</span>-<span class="hljs-number">7</span>])|(?:<span class="hljs-number">7</span>[<span class="hljs-number">0</span>-<span class="hljs-number">8</span>])|(?:<span class="hljs-number">8</span>[\d])|(?:<span class="hljs-number">9</span>[<span class="hljs-number">01256789</span>]))\d{<span class="hljs-number">8</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="手机号-mobile-phone-中国-宽松-只要是13-14-15-16-17-18-19开头即可"><a href="#手机号-mobile-phone-中国-宽松-只要是13-14-15-16-17-18-19开头即可" class="headerlink" title="手机号(mobile phone)中国(宽松), 只要是13,14,15,16,17,18,19开头即可"></a>手机号(mobile phone)中国(宽松), 只要是13,14,15,16,17,18,19开头即可</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:(?:\+|<span class="hljs-number">00</span>)<span class="hljs-number">86</span>)?<span class="hljs-number">1</span>[<span class="hljs-number">3</span>-<span class="hljs-number">9</span>]\d{<span class="hljs-number">9</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="手机号-mobile-phone-中国-最宽松-只要是1开头即可-如果你的手机号是用来接收短信-优先建议选择这一条"><a href="#手机号-mobile-phone-中国-最宽松-只要是1开头即可-如果你的手机号是用来接收短信-优先建议选择这一条" class="headerlink" title="手机号(mobile phone)中国(最宽松), 只要是1开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条"></a>手机号(mobile phone)中国(最宽松), 只要是1开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:(?:\+|<span class="hljs-number">00</span>)<span class="hljs-number">86</span>)?<span class="hljs-number">1</span>\d{<span class="hljs-number">10</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="日期-宽松"><a href="#日期-宽松" class="headerlink" title="日期(宽松)"></a>日期(宽松)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\d{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}(-)(<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">2</span>]|<span class="hljs-number">0</span>?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])\<span class="hljs-number">1</span>(<span class="hljs-number">0</span>?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>-<span class="hljs-number">2</span>]\d|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="日期-严谨-支持闰年判断"><a href="#日期-严谨-支持闰年判断" class="headerlink" title="日期(严谨, 支持闰年判断)"></a>日期(严谨, 支持闰年判断)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">3</span>}[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>}[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>}|[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>}[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>}|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">3</span>})-(((<span class="hljs-number">0</span>[<span class="hljs-number">13578</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">02</span>])-(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">12</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">3</span>[<span class="hljs-number">01</span>]))|((<span class="hljs-number">0</span>[<span class="hljs-number">469</span>]|<span class="hljs-number">11</span>)-(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">12</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">30</span>))|(<span class="hljs-number">02</span>-(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">8</span>]))))|((([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>})(<span class="hljs-number">0</span>[<span class="hljs-number">48</span>]|[<span class="hljs-number">2468</span>][<span class="hljs-number">048</span>]|[<span class="hljs-number">13579</span>][<span class="hljs-number">26</span>])|((<span class="hljs-number">0</span>[<span class="hljs-number">48</span>]|[<span class="hljs-number">2468</span>][<span class="hljs-number">048</span>]|[<span class="hljs-number">3579</span>][<span class="hljs-number">26</span>])<span class="hljs-number">00</span>))-<span class="hljs-number">02</span>-<span class="hljs-number">29</span>)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="中国省"><a href="#中国省" class="headerlink" title="中国省"></a>中国省</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^浙江|上海|北京|天津|重庆|黑龙江|吉林|辽宁|内蒙古|河北|新疆|甘肃|青海|陕西|宁夏|河南|山东|山西|安徽|湖北|湖南|江苏|四川|贵州|云南|广西|西藏|江西|广东|福建|台湾|海南|香港|澳门$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="可以被moment转化成功的时间-YYYYMMDD-HH-mm-ss"><a href="#可以被moment转化成功的时间-YYYYMMDD-HH-mm-ss" class="headerlink" title="可以被moment转化成功的时间 YYYYMMDD HH:mm:ss"></a>可以被moment转化成功的时间 YYYYMMDD HH:mm:ss</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\d{<span class="hljs-number">4</span>}([<span class="hljs-regexp">/:-\S])(1[0-2]|0?[1-9])\1(0?[1-9]|[1-2]\d|30|31) (?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$/</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="email-邮箱"><a href="#email-邮箱" class="headerlink" title="email(邮箱)"></a>email(邮箱)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(([^<span class="language-xml"><span class="hljs-tag">&lt;&gt;</span>()[\]\\.,;:\s@"]+(\.[^<span class="hljs-tag">&lt;&gt;</span>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="座机-tel-phone-电话-国内-如-0341-86091234"><a href="#座机-tel-phone-电话-国内-如-0341-86091234" class="headerlink" title="座机(tel phone)电话(国内),如: 0341-86091234"></a>座机(tel phone)电话(国内),如: 0341-86091234</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:(?:\d{<span class="hljs-number">3</span>}-)?\d{<span class="hljs-number">8</span>}|^(?:\d{<span class="hljs-number">4</span>}-)?\d{<span class="hljs-number">7</span>,<span class="hljs-number">8</span>})(?:-\d+)?$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="身份证号-1代-15位数字"><a href="#身份证号-1代-15位数字" class="headerlink" title="身份证号(1代,15位数字)"></a>身份证号(1代,15位数字)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d{<span class="hljs-number">7</span>}(?:<span class="hljs-number">0</span>\d|<span class="hljs-number">10</span>|<span class="hljs-number">11</span>|<span class="hljs-number">12</span>)(?:<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>-<span class="hljs-number">2</span>][\d]|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)\d{<span class="hljs-number">3</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="身份证号-2代-18位数字-最后一位是校验位-可能为数字或字符X"><a href="#身份证号-2代-18位数字-最后一位是校验位-可能为数字或字符X" class="headerlink" title="身份证号(2代,18位数字),最后一位是校验位,可能为数字或字符X"></a>身份证号(2代,18位数字),最后一位是校验位,可能为数字或字符X</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d{<span class="hljs-number">5</span>}(?:<span class="hljs-number">18</span>|<span class="hljs-number">19</span>|<span class="hljs-number">20</span>)\d{<span class="hljs-number">2</span>}(?:<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">10</span>|<span class="hljs-number">11</span>|<span class="hljs-number">12</span>)(?:<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>-<span class="hljs-number">2</span>]\d|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)\d{<span class="hljs-number">3</span>}[\dXx]$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="身份证号-支持1-2代-15位-18位数字"><a href="#身份证号-支持1-2代-15位-18位数字" class="headerlink" title="身份证号, 支持1/2代(15位/18位数字)"></a>身份证号, 支持1/2代(15位/18位数字)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\d{<span class="hljs-number">6</span>}((((((<span class="hljs-number">19</span>|<span class="hljs-number">20</span>)\d{<span class="hljs-number">2</span>})(<span class="hljs-number">0</span>[<span class="hljs-number">13</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">012</span>])(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">12</span>]\d|<span class="hljs-number">30</span>))|(((<span class="hljs-number">19</span>|<span class="hljs-number">20</span>)\d{<span class="hljs-number">2</span>})(<span class="hljs-number">0</span>[<span class="hljs-number">13578</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">02</span>])<span class="hljs-number">31</span>)|((<span class="hljs-number">19</span>|<span class="hljs-number">20</span>)\d{<span class="hljs-number">2</span>})<span class="hljs-number">02</span>(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">1</span>\d|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">8</span>])|((((<span class="hljs-number">19</span>|<span class="hljs-number">20</span>)([<span class="hljs-number">13579</span>][<span class="hljs-number">26</span>]|[<span class="hljs-number">2468</span>][<span class="hljs-number">048</span>]|<span class="hljs-number">0</span>[<span class="hljs-number">48</span>]))|(<span class="hljs-number">2000</span>))<span class="hljs-number">0229</span>))\d{<span class="hljs-number">3</span>})|((((\d{<span class="hljs-number">2</span>})(<span class="hljs-number">0</span>[<span class="hljs-number">13</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">012</span>])(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">12</span>]\d|<span class="hljs-number">30</span>))|((\d{<span class="hljs-number">2</span>})(<span class="hljs-number">0</span>[<span class="hljs-number">13578</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">02</span>])<span class="hljs-number">31</span>)|((\d{<span class="hljs-number">2</span>})<span class="hljs-number">02</span>(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">1</span>\d|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">8</span>]))|(([<span class="hljs-number">13579</span>][<span class="hljs-number">26</span>]|[<span class="hljs-number">2468</span>][<span class="hljs-number">048</span>]|<span class="hljs-number">0</span>[<span class="hljs-number">048</span>])<span class="hljs-number">0229</span>))\d{<span class="hljs-number">2</span>}))(\d|X|x)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="护照（包含香港、澳门）"><a href="#护照（包含香港、澳门）" class="headerlink" title="护照（包含香港、澳门）"></a>护照（包含香港、澳门）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/(^[<span class="hljs-title class_">EeKkGgDdSsPpHh</span>]\d{<span class="hljs-number">8</span>}$)|(^(([<span class="hljs-title class_">Ee</span>][a-fA-F])|([<span class="hljs-title class_">DdSsPp</span>][<span class="hljs-title class_">Ee</span>])|([<span class="hljs-title class_">Kk</span>][<span class="hljs-title class_">Jj</span>])|([<span class="hljs-title class_">Mm</span>][<span class="hljs-title class_">Aa</span>])|(<span class="hljs-number">1</span>[<span class="hljs-number">45</span>]))\d{<span class="hljs-number">7</span>}$)/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合"><a href="#帐号是否合法-字母开头，允许5-16字节，允许字母数字下划线组合" class="headerlink" title="帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合"></a>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-zA-Z]\w{<span class="hljs-number">4</span>,<span class="hljs-number">15</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="中文-汉字"><a href="#中文-汉字" class="headerlink" title="中文/汉字"></a>中文/汉字</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="小数-支持科学计数"><a href="#小数-支持科学计数" class="headerlink" title="小数(支持科学计数)"></a>小数(支持科学计数)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[+-]?(\d+([.]\d*)?([eE][+-]?\d+)?|[.]\d+([eE][+-]?\d+)?)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="只包含数字"><a href="#只包含数字" class="headerlink" title="只包含数字"></a>只包含数字</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\d+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="html标签-宽松匹配"><a href="#html标签-宽松匹配" class="headerlink" title="html标签(宽松匹配)"></a>html标签(宽松匹配)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/&lt;(\w+)[^&gt;]*&gt;(.*?<span class="language-xml">&lt;\/\1&gt;</span>)?/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="匹配中文汉字和中文标点"><a href="#匹配中文汉字和中文标点" class="headerlink" title="匹配中文汉字和中文标点"></a>匹配中文汉字和中文标点</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/[\u4e00-\u9fa5|\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="qq号格式正确"><a href="#qq号格式正确" class="headerlink" title="qq号格式正确"></a>qq号格式正确</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>,<span class="hljs-number">10</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="数字和字母组成"><a href="#数字和字母组成" class="headerlink" title="数字和字母组成"></a>数字和字母组成</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>]+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="英文字母"><a href="#英文字母" class="headerlink" title="英文字母"></a>英文字母</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-zA-Z]+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="小写英文字母组成"><a href="#小写英文字母组成" class="headerlink" title="小写英文字母组成"></a>小写英文字母组成</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-z]+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="大写英文字母"><a href="#大写英文字母" class="headerlink" title="大写英文字母"></a>大写英文字母</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[A-Z]+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符"><a href="#密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符" class="headerlink" title="密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符"></a>密码强度校验，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\S*(?=\S{<span class="hljs-number">6</span>,})(?=\S*\d)(?=\S*[A-Z])(?=\S*[a-z])(?=\S*[!@#$%^&amp;*? ])\S*$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="用户名校验，4到16位（字母，数字，下划线，减号）"><a href="#用户名校验，4到16位（字母，数字，下划线，减号）" class="headerlink" title="用户名校验，4到16位（字母，数字，下划线，减号）"></a>用户名校验，4到16位（字母，数字，下划线，减号）</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[\w-]{<span class="hljs-number">4</span>,<span class="hljs-number">16</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="ip-v4-端口"><a href="#ip-v4-端口" class="headerlink" title="ip-v4[:端口]"></a>ip-v4[:端口]</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^((\d|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d|<span class="hljs-number">1</span>\d\d|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d|<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])\.){<span class="hljs-number">3</span>}(\d|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d|<span class="hljs-number">1</span>\d\d|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d|<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])(?::(?:[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}|[<span class="hljs-number">1</span>-<span class="hljs-number">5</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>}|<span class="hljs-number">6</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">3</span>}|<span class="hljs-number">65</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>}|<span class="hljs-number">655</span>[<span class="hljs-number">0</span>-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">6553</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]))?$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="ip-v6-端口"><a href="#ip-v6-端口" class="headerlink" title="ip-v6[:端口]"></a>ip-v6[:端口]</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/(^(?:(?:(?:[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">7</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">6</span>}:[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">5</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:)?[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">4</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">2</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">3</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">3</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">2</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">4</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">6</span>}((\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b)\.){<span class="hljs-number">3</span>}(\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b))|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">5</span>}:((\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b)\.){<span class="hljs-number">3</span>}(\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b))|(::([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">5</span>}((\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b)\.){<span class="hljs-number">3</span>}(\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b))|([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}::([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">5</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(::([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">6</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">1</span>,<span class="hljs-number">7</span>}:))$)|(^\[(?:(?:(?:[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">7</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">6</span>}:[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">5</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:)?[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">4</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">2</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">3</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">3</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">2</span>}:([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">4</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">6</span>}((\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b)\.){<span class="hljs-number">3</span>}(\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b))|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">5</span>}:((\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b)\.){<span class="hljs-number">3</span>}(\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b))|(::([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">5</span>}((\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b)\.){<span class="hljs-number">3</span>}(\<span class="hljs-title function_">b</span>((<span class="hljs-number">25</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>])|(<span class="hljs-number">1</span>\d{<span class="hljs-number">2</span>})|(<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>]\d)|(\d{<span class="hljs-number">1</span>,<span class="hljs-number">2</span>}))\b))|([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}::([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">5</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(::([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">0</span>,<span class="hljs-number">6</span>}[<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>})|(([<span class="hljs-number">0</span>-9A-<span class="hljs-title class_">Fa</span>-f]{<span class="hljs-number">1</span>,<span class="hljs-number">4</span>}:){<span class="hljs-number">1</span>,<span class="hljs-number">7</span>}:))\](?::(?:[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">1</span>,<span class="hljs-number">3</span>}|[<span class="hljs-number">1</span>-<span class="hljs-number">5</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>}|<span class="hljs-number">6</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">3</span>}|<span class="hljs-number">65</span>[<span class="hljs-number">0</span>-<span class="hljs-number">4</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>}|<span class="hljs-number">655</span>[<span class="hljs-number">0</span>-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">6553</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]))?$)/i<br></code></pre></td></tr></tbody></table></figure>
<h3 id="16进制颜色"><a href="#16进制颜色" class="headerlink" title="16进制颜色"></a>16进制颜色</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^#?([a-fA-<span class="hljs-variable constant_">F0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">6</span>}|[a-fA-<span class="hljs-variable constant_">F0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">3</span>}|[a-fA-<span class="hljs-variable constant_">F0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">8</span>}|[a-fA-<span class="hljs-variable constant_">F0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">4</span>})$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="微信号-wx-，6至20位，以字母开头，字母，数字，减号，下划线"><a href="#微信号-wx-，6至20位，以字母开头，字母，数字，减号，下划线" class="headerlink" title="微信号(wx)，6至20位，以字母开头，字母，数字，减号，下划线"></a>微信号(wx)，6至20位，以字母开头，字母，数字，减号，下划线</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-zA-Z][-_a-zA-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">5</span>,<span class="hljs-number">19</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="邮政编码-中国"><a href="#邮政编码-中国" class="headerlink" title="邮政编码(中国)"></a>邮政编码(中国)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">7</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">356</span>]|<span class="hljs-number">2</span>[<span class="hljs-number">0</span>-<span class="hljs-number">7</span>]|<span class="hljs-number">3</span>[<span class="hljs-number">0</span>-<span class="hljs-number">6</span>]|<span class="hljs-number">4</span>[<span class="hljs-number">0</span>-<span class="hljs-number">7</span>]|<span class="hljs-number">5</span>[<span class="hljs-number">1</span>-<span class="hljs-number">7</span>]|<span class="hljs-number">6</span>[<span class="hljs-number">1</span>-<span class="hljs-number">7</span>]|<span class="hljs-number">7</span>[<span class="hljs-number">0</span>-<span class="hljs-number">5</span>]|<span class="hljs-number">8</span>[<span class="hljs-number">013</span>-<span class="hljs-number">6</span>])\d{<span class="hljs-number">4</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="中文和数字"><a href="#中文和数字" class="headerlink" title="中文和数字"></a>中文和数字</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^((?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])|(\d))+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="不能包含字母"><a href="#不能包含字母" class="headerlink" title="不能包含字母"></a>不能包含字母</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[^A-<span class="hljs-title class_">Za</span>-z]*$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="java包名"><a href="#java包名" class="headerlink" title="java包名"></a>java包名</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^([a-zA-<span class="hljs-variable constant_">Z_</span>]\w*)+([.][a-zA-<span class="hljs-variable constant_">Z_</span>]\w*)+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="mac地址"><a href="#mac地址" class="headerlink" title="mac地址"></a>mac地址</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(([a-f0-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,a,c,e]:([a-f0-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>}:){<span class="hljs-number">4</span>})|([a-f0-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,a,c,e]-([a-f0-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>}-){<span class="hljs-number">4</span>}))[a-f0-<span class="hljs-number">9</span>]{<span class="hljs-number">2</span>}$/i<br></code></pre></td></tr></tbody></table></figure>
<h3 id="匹配连续重复的字符"><a href="#匹配连续重复的字符" class="headerlink" title="匹配连续重复的字符"></a>匹配连续重复的字符</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/(.)\<span class="hljs-number">1</span>+/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="数字和英文字母组成，并且同时含有数字和英文字母"><a href="#数字和英文字母组成，并且同时含有数字和英文字母" class="headerlink" title="数字和英文字母组成，并且同时含有数字和英文字母"></a>数字和英文字母组成，并且同时含有数字和英文字母</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?=.*[a-zA-Z])(?=.*\d).+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="香港身份证"><a href="#香港身份证" class="headerlink" title="香港身份证"></a>香港身份证</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-zA-Z]\d{<span class="hljs-number">6</span>}\([\dA]\)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="澳门身份证"><a href="#澳门身份证" class="headerlink" title="澳门身份证"></a>澳门身份证</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[<span class="hljs-number">1</span>|<span class="hljs-number">5</span>|<span class="hljs-number">7</span>]\d{<span class="hljs-number">6</span>}\(\d\)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="台湾身份证"><a href="#台湾身份证" class="headerlink" title="台湾身份证"></a>台湾身份证</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[a-zA-Z][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]{<span class="hljs-number">9</span>}$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="大写字母，小写字母，数字，特殊符号-amp-中任意3项密码"><a href="#大写字母，小写字母，数字，特殊符号-amp-中任意3项密码" class="headerlink" title="大写字母，小写字母，数字，特殊符号 @#$%^&amp;*~()-+=` 中任意3项密码"></a>大写字母，小写字母，数字，特殊符号 <code>@#$%^&amp;*</code>~()-+=` 中任意3项密码</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?![a-zA-Z]+$)(?![A-<span class="hljs-variable constant_">Z0</span>-<span class="hljs-number">9</span>]+$)(?![A-Z\<span class="hljs-variable constant_">W_</span>!@#$%^&amp;*<span class="hljs-string">`~()-+=]+$)(?![a-z0-9]+$)(?![a-z\W_!@#$%^&amp;*`</span>~()-+=]+$)(?![<span class="hljs-number">0</span>-<span class="hljs-number">9</span>\<span class="hljs-variable constant_">W_</span>!@#$%^&amp;*<span class="hljs-string">`~()-+=]+$)[a-zA-Z0-9\W_!@#$%^&amp;*`</span>~()-+=]/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="ASCII码表中的全部的特殊字符"><a href="#ASCII码表中的全部的特殊字符" class="headerlink" title="ASCII码表中的全部的特殊字符"></a>ASCII码表中的全部的特殊字符</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/[\x21-\x2F\x3A-\x40\x5B-\x60\x7B-\x7E]+/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="正整数，不包含0"><a href="#正整数，不包含0" class="headerlink" title="正整数，不包含0"></a>正整数，不包含0</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^\+?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="负整数，不包含0"><a href="#负整数，不包含0" class="headerlink" title="负整数，不包含0"></a>负整数，不包含0</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^-[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(?:<span class="hljs-number">0</span>|(?:-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*))$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*\.\d+|-?<span class="hljs-number">0</span>\.\d*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*|<span class="hljs-number">0</span>\<span class="hljs-number">.0</span>+)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="浮点数-严格"><a href="#浮点数-严格" class="headerlink" title="浮点数(严格)"></a>浮点数(严格)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^(-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d*\.\d+|-?<span class="hljs-number">0</span>\.\d*[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="email-支持中文邮箱"><a href="#email-支持中文邮箱" class="headerlink" title="email(支持中文邮箱)"></a>email(支持中文邮箱)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[A-<span class="hljs-title class_">Za</span>-z0-<span class="hljs-number">9</span>\u4e00-\u9fa5]+@[a-zA-<span class="hljs-variable constant_">Z0</span>-9_-]+(\.[a-zA-<span class="hljs-variable constant_">Z0</span>-9_-]+)+$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="域名-非网址-不包含协议"><a href="#域名-非网址-不包含协议" class="headerlink" title="域名(非网址, 不包含协议)"></a>域名(非网址, 不包含协议)</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^([<span class="hljs-number">0</span>-9a-zA-Z-]{<span class="hljs-number">1</span>,}\.)+([a-zA-Z]{<span class="hljs-number">2</span>,})$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="军官-士兵证"><a href="#军官-士兵证" class="headerlink" title="军官/士兵证"></a>军官/士兵证</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/^[\u4E00-\u9FA5](字第)([<span class="hljs-number">0</span>-9a-zA-Z]{<span class="hljs-number">4</span>,<span class="hljs-number">8</span>})(号?)$/<br></code></pre></td></tr></tbody></table></figure>
<h3 id="户口薄"><a href="#户口薄" class="headerlink" title="户口薄"></a>户口薄</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><code class="hljs javascript">/(^\d{<span class="hljs-number">15</span>}$)|(^\d{<span class="hljs-number">18</span>}$)|(^\d{<span class="hljs-number">17</span>}(\d|X|x)$)/<br></code></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>春节加餐1 公主，快放开那只巨龙！</title>
    <url>//posts/f6350642/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="春节加餐1-公主，快放开那只巨龙！"><a href="#春节加餐1-公主，快放开那只巨龙！" class="headerlink" title="春节加餐1 公主，快放开那只巨龙！"></a>春节加餐1 公主，快放开那只巨龙！</h1><p>今天是大年初一，首先，要祝你新春快乐！</p>
<p>如果你有人陪伴，我祝你在新的一年，感情升温，沐浴爱河，爱情的学分与日俱增；如果你还在寻找，那么也祝你在新的一年里，遇到良人，收获一段专属的、甜甜的恋爱！</p>
<p>这一讲，我们把恋爱的“知识点”先放放，在这个特别的日子里，我给你说个有趣的故事。</p>
<p>过了年三十，公主就十八岁了，但是她非常不开心。</p>
<p>隔壁黄金国的公主都被巨龙抓走好几次了，去救她的王子都能排到二里地之外了。自己却连巨龙长啥样都没见过，更别提王子了。搞得每次公主聚会的时候，自己都被嘲笑。</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412091906414.jpeg" alt="img"></p>
<p>因此，在这次年夜饭上，她鼓足了勇气大声说：</p>
<p>“尊敬的坦格利安之子，鸡腿与拉面之国的君主，勇敢、刚毅、仁慈、智慧的北境守护者，亲爱的父亲大人，能否满足您女儿被巨龙绑架的卑微愿望。”</p>
<p>她父亲愣了一下，然后哈哈大笑，“当然、当然，我美丽的女儿，我想你今天晚上要把自己打扮得更漂亮一点。这样，明天巨龙抓走你以后，全世界的王子都会为你发疯的。”</p>
<p>宴会结束，国王连忙召来了国师，问他“怎么样，你和周边那几只龙谈的如何？”</p>
<p>“尊敬的坦格利安之子，鸡腿与拉面之国的君主，勇敢、刚毅、仁慈、智慧的北境守护者，我的主人，我和他们都谈过，但是我们确实拿不出那么多黄金或钻石。”</p>
<p>“那该如何是好，我已经答应了公主，要巨龙明天来抓她。”</p>
<p>“大年初一抓公主是各个王国的传统，抢在这种热门档期，我们更请不起。不过……”</p>
<p>“不过怎么样？”</p>
<p>“如果请那只龙的话，或许还有希望。”</p>
<p>“哎”，国王长叹了一口气，“也只好这样了。”</p>
<p>第二天，公主穿上了自己最华丽的长裙，盛装打扮了一番后，她就开始在窗口焦急地看着远方的天空。她问身旁的侍女，“听说巨龙出现时，会有电闪雷鸣，喷出的火焰可以融化一切，你说我会被哪只巨龙抓走？是生命的缚誓者阿莱克斯塔萨，黑龙公主奥妮克希亚还是万物的终结者黑龙之王纳萨里奥？”</p>
<p>就在这时，响起了敲门声。侍女打开门，走进来一只身高一米多点的巨……那只龙。</p>
<p>那只龙打了个哈欠说，“公主准备好没有？差不多我们就走吧。话说大年初一上班太辛苦了，你们这些公主，为什么总喜欢选今天被抓？”</p>
<p>公主有点懵，难道巨龙不是从天而降，凶神恶煞地抓走我吗？为什么你说的好像我们要去郊外野游一样？那只龙皱了皱眉头，“公主殿下，你这城堡是有顶的，那么大的花岗岩石头，我怎么从天而降？不过，凶神恶煞倒是好办。”巨龙揉了揉脸，做出一副凶狠的样子，“嘿，小美人，乖乖跟本大爷走吧，你就是喊破嗓子，也不会有人来救你的！”</p>
<p>“陛下，陛下，大事不好，公主被巨龙抓走啦！”</p>
<p>国王一听，猛地一拍大腿，“它终于… 啊不是，它居然胆敢劫持公主，快和我一起去阻止它。”</p>
<p>整个城堡的大臣、骑士、侍女们都走上了街头，一起见证自己国家的公主第一次被巨龙抓走的历史性时刻。他们纷纷举起绣着家族徽章的旗帜，伴着激昂战鼓的旋律齐声高呼着：</p>
<p>“恶龙，快放下我们鸡腿国公主！”</p>
<p>更有大户人家，拿出了不少炮仗向空中扔去，炸出一股浓浓的硝烟味道。国王站在城堡最高处，看着这一切热泪盈眶，“锣鼓喧天、鞭炮齐鸣、红旗招展、人山人海，咱们王国也算是等到这一天了。”</p>
<p>公主一边大喊着“快来救救我”，一边小声说，“巨龙巨龙，劫持公主的时候不是一般都要喷火的吗？”巨龙的前爪很短，所以只能把脑袋歪到一边，然后用前爪挠了挠头，“喷火很消耗法力的，算了，我是个有职业精神的龙。”</p>
<p>它猛地朝地面冲了下去，掠过了一条街道，高度低到公主甚至和几个看热闹的市民击了掌。巨龙瞄准了路边一棵低矮的灌木，biu~biu~biu 连喷三个拳头大的火球，将其焚为灰烬。</p>
<p>巨龙完成了喷火的任务，带着公主扬长而去，临走前对着国王喊，“快点拿赎金来换你的女儿。”</p>
<p>终于来到了巨龙的巢穴，公主并没有看到传说中堆积如山的金币，而是几个不大的洞穴，地上铺着柔软的地毯，还有一个铺上了天鹅绒被子的大床。</p>
<p>“巨龙先生，我是第一次被绑架，没什么经验，请问我在这里应该做些什么？其他国家的公主给我讲述她们被抓的经历的时候，她们都没有提到这一段。”</p>
<p>“嗯，你随意吧。我也是第一次抓公主回来，没什么经验。以前别的龙总嘲笑我连公主是啥样都没有见过，好在这次你们家国王答应提供二十年的鸡腿让我来抓你。”</p>
<p>“二十年的鸡腿！我的天啊！你不会吃腻吗？我现在想到鸡腿都反胃。”</p>
<p>“怎么可能？鸡腿是这个世界上最好吃的东西。”</p>
<p>公主作为鸡腿国国王的掌上明珠，从小到大鸡腿吃得太多。她以为自己再也不会主动去吃鸡腿了。</p>
<p>但是，她错了。</p>
<p>巨龙喷出的火焰居然超过了王国所有灶头的火力，喷出的冰雾还可以给食材急速降温，喷出的毒液可以萃取出绝无仅有的香料。它每天变着法做椒麻鸡、口水鸡、手撕鸡、葱油鸡以及只有他才能做出来的冰火毒龙照烧鸡，让公主吃的赞不绝口。</p>
<p>“你真的应该考虑一下做我们鸡腿国的镇国神兽！”</p>
<p>做人质的日子似乎还不错，唯一让公主忧心的就是，来救她的王子到底是什么样。</p>
<p>按照惯例，王子救了她，她就要和王子谈恋爱。</p>
<p>“巨龙先生，你说万一来的王子长得很丑怎么办？要是他睡觉打呼噜呢？他不爱洗澡呢？他不喜欢吃鸡腿怎么办？”</p>
<p>“公主陛下，童话都是这么编的，谁来救你都看缘分，现在烦也没用呀。总之，等王子出现，你和他幸福地生活在一起，我的任务就算完成啦！”</p>
<p>终于，公主担心的事情发生了。</p>
<p>隔壁国王的傻儿子带了一大票人跑到巨龙巢穴门口，大呼小叫让巨龙把公主交出来。巨龙按流程上去三拳两脚被王子打倒在地，王子还加了个钟，踩在巨龙身上，让随行的画师作画纪念。</p>
<p>公主心里一百个不愿意，眼泪在眼眶里打转，被王子一直拉着往外走，“美、美、美女，抓紧时间，打完这个小、小矮龙，咱们回去好好处。”</p>
<p>“等等！”</p>
<p>在场所有人的目光都聚焦到声音的来源处——趴在地上装死半天的巨龙那里。</p>
<p>“你说谁是小矮龙？谁小矮龙？你才矮，你们全家都矮！这生意没法做了，钱拿走，人留下。”</p>
<p>巨龙一把拽回了公主，面对蜂拥而上的侍卫，完美地展现了巨龙的尊严。在打折了十几把长枪大剑，喷出了熊熊烈焰之后，王子和他的随从们屁滚尿流地逃跑了。</p>
<p>巨龙想拍拍肩膀上的灰耍个帅，可惜前爪太短够不着只好作罢。</p>
<p>“公主陛下，对不起了，搅黄了你的王子对你的营救。”</p>
<p>公主紧紧地拥抱了巨龙，“巨龙先生谢谢你，你真是太棒了！”</p>
<p>于是，一人一龙达成协定。如果来的王子公主喜欢，公主就大喊“王子！王子！快来救救我吧！”如果来的王子公主不喜欢，就大喊“王子！王子！这条恶龙太强大了，千万不要为了我受伤！”巨龙根据公主的口号，决定到底是放水装死，还是把来人痛扁一顿。</p>
<p>可几个月过去了，来的王子一波又一波，公主从来没喊王子过来救她，总是让人不要受伤。</p>
<p>巨龙有点懵，“公主陛下，今天来的那个王子看着不错啊。”</p>
<p>“咦，他比麻杆还细，剑都举不起来，一看就很挑食。”</p>
<p>“那昨天那个王子呢，看上去很强壮啊”</p>
<p>“他总是抠鼻孔，好恶心。”</p>
<p>“那前天来的那个……”</p>
<p>“停，不想跟你说话了，笨蛋。”</p>
<p>“哦，哎，你还没说今天鸡腿想吃什么口味的呢。”</p>
<p>日子一天天这样过去，转眼又是一个大年初一。一个骑着白马的王子出现了，他高大威武、英俊潇洒、仪表堂堂、谦逊有礼，背后还带着七彩光环，这是男主角才有的待遇。</p>
<p>巨龙觉得这个王子肯定没得差了，扭头看公主。</p>
<p>结果公主还是大喊，“王子！王子！这条恶龙太强大了，千万不要为了我受伤呀”</p>
<p>王子微微一笑，“美丽的公主，感谢你的善良，但请不要为我担忧。”然后他对巨龙说，“听说你打跑了上百个王子，但今天还是请你务必不要为难我。”</p>
<p>他拍了拍腰间的宝剑，“因为，此剑出鞘，必要见血方还。”</p>
<p>巨龙看见王子强大的气场，感觉有些害怕。可根据之前与公主的约定，还是硬着头皮冲了上去。</p>
<p>可惜，王子一闪身就避开了巨龙的火球，一挥手就拨散了巨龙的霜息，剑不出鞘，临空虚劈就斩开了巨龙的毒液，把巨龙劈倒在地。</p>
<p>他略略躬身，对巨龙说，“作为巨龙，您已经做得很好了，请不要再进行无谓的挣扎。”然后他向公主行了一个骑士礼，“公主陛下，我们走吧，您自由了。我的国家有美丽的风景和美味的食物，不知我是否有幸能邀请您前去一游？”</p>
<p>公主却没有把手搭上去，而是摇了摇头，“不去”。</p>
<p>“嘿，这还有个喘气的呢，你当我不存在啊。”巨龙从地上爬起来，又一次冲向了王子。他知道魔法奈何不了王子，改成了近身肉搏。虽然一次次被打倒，但仗着龙鳞的坚硬，他并没受太重的伤，反而瞅准了机会，咬中了王子的小腿，一发力将其护腿的铠甲咬碎了。</p>
<p>王子发怒了，“孽畜，天堂有路你不走，地狱无门你闯进来！”，他终于从剑鞘中抽出了宝剑，剑光一闪，巨龙胸前裂开了一条口子，鲜血四溅。</p>
<p>巨龙感到了胸口的剧痛，体力正在急速地流失。面对王子劈下的剑，它做不出任何闪避的动作。</p>
<p>终于要结束了吗？这难道就是宿命？公主和王子幸福地生活在一起，恶龙被王子斩下了头颅。可王子的剑越落越慢，直到停住不动。公主不知何时已经半跪在了巨龙身前，双手虚拖，架住了这一剑。</p>
<p>“老娘说了不去，你听不懂人话吗？”</p>
<p>公主猛地抬起了头，一时之间风云变色，电闪雷鸣。她左手一挥，剑断；右手一挥，甲裂；正中一脚，将王子踢飞了十几米远。</p>
<p>“坦格利安之女，鸡腿与拉面之国的公主，北境守护者，不焚者丹妮莉丝，命令你立刻离开这里，永远不许回来。”</p>
<p>公主一回头，云销雨霁，彩彻区明。她手上凝起一片白光，洒在巨龙胸口，顿时止住了伤势。她扶起巨龙半躺在自己怀里，问它“没事了吧，还疼不疼呀？”</p>
<p>巨龙疑惑，“童话里公主都是和王子幸福地生活在一起，现在王子被你打跑了可怎么办啊？”</p>
<p>公主白了他一眼，“笨蛋，老娘想跟谁幸福地生活在一起就和谁一起，童话管得着么？”</p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202412091906403.jpeg" alt="img"></p>
<p>仅以此文和各位小伙伴拜个年！</p>
<p>愿各位还在单身的朋友，过年回家能抓到属于自己的公主和巨龙。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>春节加餐3 恋爱课直播集锦：恋爱这件小事儿</title>
    <url>//posts/359433cd/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="春节加餐3-恋爱课直播集锦：恋爱这件小事儿"><a href="#春节加餐3-恋爱课直播集锦：恋爱这件小事儿" class="headerlink" title="春节加餐3 恋爱课直播集锦：恋爱这件小事儿"></a>春节加餐3 恋爱课直播集锦：恋爱这件小事儿</h1><p>今天是我们春节特别加餐的最后一讲了，这预示了什么？</p>
<p>预示着我们马上就要离开假期的怀抱，继续投身于社会浪潮中，做个快乐“打工人”了（快乐不快乐不一定，但是打工是一定的）。打工之余，也别忘了把恋爱这件事提上日程。</p>
<p>恋爱课开课以来，我一共开了三场直播。很多小伙伴跟我反映，自己错过了某一场直播，觉得很可惜。于是，我从这三场直播中，挑选了其中最精华的内容，今天给你做一次汇总分享。</p>
<p>真理是越辩越明的，恋爱这门学问也是需要不断揣摩和思考的，希望今天能给你新的灵感。</p>
<h2 id="相亲第一次见面注意什么？"><a href="#相亲第一次见面注意什么？" class="headerlink" title="相亲第一次见面注意什么？"></a>相亲第一次见面注意什么？</h2><p><strong>Q：</strong></p>
<p>老师，家里介绍的第一次见面的男生，应该怎么准备更好，见面应该聊什么？</p>
<p><strong>A：</strong></p>
<p>相亲和自由恋爱是不一样的。</p>
<p>第一次见面的时候，你要注意的是，你要学会“装”一下。毕竟，第一次见面，你要给对方一个相对较好的印象。比如说，在打扮方面，你不能太随意，要稍微正式一点。</p>
<p>在环境的选择上，你可以选择相对较为熟悉的环境，这样方便你应对会出现的问题。还有见面的时候聊什么呢？你要聊自己和对方的情况。其实，这就是一个快速确认的过程。</p>
<p>确认什么呢？比如说，对方的长相，对方的谈吐，这都是你能快速了解到的。接下来，可以聊聊家庭情况、工作情况呀。你要把自己的基础信息提供给对方，这是相亲礼仪之一。</p>
<p>如果你有很硬的实力，像有一套房、一辆车或一个车位，要学会展现，相亲是一个很快的筛选过程。情况基本确认后，才能进入偏个人的层面，比如说兴趣爱好，有没有共同语言之类的。</p>
<p>如果这些信息，你们都交换完了，你就可以找一些可以自由发展的，或者是你擅长的兴趣爱好的一些环节，跟对方分享一下，试着聊聊看。我们说过，亲密关系的第一层级就是兴趣爱好。</p>
<p>或者是对方喜欢什么，看看能不能展开聊聊，亲密关系的第一层级能不能站得住脚。结束后，要记得及时反馈给对方或者是媒人，是觉得不错继续试试，还是这个不太行，停止继续发展。</p>
<p>这就是相亲的时候，第一次见面需要完成的任务。更具体的，我们会在第 09 讲展开。</p>
<h2 id="双方年龄差十岁怎么办？"><a href="#双方年龄差十岁怎么办？" class="headerlink" title="双方年龄差十岁怎么办？"></a>双方年龄差十岁怎么办？</h2><p><strong>Q：</strong></p>
<p>老师，年龄因素会有影响吗？影响有多大？比如说，相差十岁的那种。</p>
<p><strong>A：</strong></p>
<p>年龄呢，这个因素是一定会有影响的。但是不光年龄，你说，身高影不影响，年收入有差距，家庭背景不一样，有没有影响？当然有影响。当你问这个问题的时候，你自己心里都知道答案。</p>
<p>每个人包括你自己，在婚恋市场上，都想找到一个跟自己价值匹配的人。</p>
<p>但是，人又都是多元化的，每个人都有一个自己的价值矩阵。有的人这里突出一点，有的人那里突出，形状都是不一样的。什么样的矩阵不重要，重要的是你的价值需求是什么。</p>
<p>某个人的价值矩阵可能就是你的最优解。也许，年龄差十岁会影响到你们的感情，但偏偏对方另外一点特别吸引你，特别契合你的需求，可以补平其他地方的差距，年龄就不会是一个决定因素了。但是，如果在你的价值需求里，年龄这个点特别重要，那么你就不适合找一个差十岁的。</p>
<p>一把钥匙开一把锁，我们每个人都想找个更适合自己的人。所以，重点看你的需求是什么。</p>
<h2 id="表白会变成一种错误吗？"><a href="#表白会变成一种错误吗？" class="headerlink" title="表白会变成一种错误吗？"></a>表白会变成一种错误吗？</h2><p><strong>Q：</strong></p>
<p>老师，我之前跟一个男生表白，他同意了。但是没过几天，他就说，我们还是做朋友吧！这种情况的话，我和他还有机会在一起吗？</p>
<p><strong>A：</strong></p>
<p>这种属于表白坏事的典型例子。</p>
<p>首先说明，他对你是有一定好感的，但是这种好感的程度还不够。你表白，虽然他同意了，但很有可能是迫于压力或者是当时的氛围渲染等等，跟你在一起的。</p>
<p>过了几天，又想做回朋友，是因为他其实是没有做好准备的。如果你问我，还有机会吗？</p>
<p>其实，还是有机会的。不过，没表白之前，机会可能很大，表白之后，就降低了你的可能性。但机会是一定会存在的，既然他能答应你，就说明他觉得你这个人还不错。</p>
<p>他说还是做朋友，并不是说你这个人不行，言外之意是觉得你们的关系还没到恋人的那一步。你可以以朋友的身份，继续深入这段关系，再去看看。</p>
<h2 id="怎么控制自己的目的性？"><a href="#怎么控制自己的目的性？" class="headerlink" title="怎么控制自己的目的性？"></a>怎么控制自己的目的性？</h2><p><strong>Q：</strong></p>
<p>老师，我想问，怎么才能做到既喜欢对方，又对对方没有什么目的性呢？感觉喜欢上对方后，我很难控制不住我的目的性。</p>
<p><strong>A：</strong></p>
<p>这个问题问得很在点子上，但解决这个问题也很简单。</p>
<p>你对对方有好感，你想想你的目的是什么。我喜欢一个人，不是说我想让 Ta 帮我解决一个情感需求，或者是解决一个什么实际问题。喜欢一个人，可能只是单纯想跟 Ta 在一起。</p>
<p>是那种单纯地想去吃一顿饭，单纯地想一起喝一杯咖啡，或者是一起聊个天的心情。你对这个人没有什么其他的需求，并不要求对方陪你干这干那，也不强求对方一定成为你的伴侣。</p>
<p>你不能有上面这种目的性，你要让自己只是单纯地想完成心中的想法和愿望。想让对方陪自己吃饭，这不叫目的性，目的性是你想让对方做你的对象，让对方拒绝别人，确定和你的关系。</p>
<p>总的来说，我们要真诚起来，真诚地去对别人。真诚就永远不会有目的性。</p>
<h2 id="爱情真的有理所当然吗？"><a href="#爱情真的有理所当然吗？" class="headerlink" title="爱情真的有理所当然吗？"></a>爱情真的有理所当然吗？</h2><p><strong>Q：</strong></p>
<p>老师，怎样才能心安理得地接受另一半对自己的好呢？</p>
<p><strong>A：</strong></p>
<p>这个问题很经典。</p>
<p>在一段情感关系中，如果一个人不停地对自己好，但是 Ta 又不求任何回报，你是会有很大心理压力的。包括你对别人也是一样，你对别人很好，别人一定程度上也会有心理压力。</p>
<p>就好比我们总帮助一个朋友，帮助得越多，还不求回报，朋友的恶感其实会越大。一旦有一天，某一次，我们帮助不了他，他会对你有加倍的恶感。这个是没有办法避免的。</p>
<p>我们想接受这种关系，比如说挥之既来，呼之即去的那种，叫对方做什么都做，但是对我们一点要求都没有，是没办法心安理得接受的。能够心安理得接受的，可能都是渣男 / 渣女。</p>
<p>你不渣，所以你问了这个问题，因为你没法心安理得地接受。</p>
<p>那怎么去调节这种关系呢？很简单，两个人需要共同地去付出。你可以去想想，你在这段感情里，能付出什么，或者是能做到什么，一定有你可以去做的事情的。</p>
<p>你的另一半可能只是不善于表达自己的诉求，不代表 Ta 没有这种诉求。恰恰相反，Ta 内心可能有很大的诉求，只是不敢讲，Ta 怕讲了以后，会影响到这段感情，才闷在心里。</p>
<p>其实，越是这种没有诉求的人，Ta 其实越害怕提出诉求。Ta 怕提出一点点诉求，就把你吓跑，失去这段关系。所以，你要对这种人特别地好才行，找到诉求，满足 Ta。</p>
<h2 id="男生第一次见面要不要拉手？"><a href="#男生第一次见面要不要拉手？" class="headerlink" title="男生第一次见面要不要拉手？"></a>男生第一次见面要不要拉手？</h2><p><strong>Q：</strong></p>
<p>老师，作为男生，第一次见面约会，手拉手合适吗？</p>
<p><strong>A：</strong></p>
<p>第一次见面，如果之前没有什么感情基础，尤其是相亲，其实是不太合适的。会给女生一种不太礼貌，有点打扰的感觉。当然，有一种情况除外，那就是女主有所主动。</p>
<p>如果女生跟你主动拉手，或者是提出拉手，你是可以主动一点的。这里面是有个讲究的。</p>
<p>但是，作为男生，第一次接触控制在一定距离之内，绝对是会给女生留好感的。</p>
<h2 id="忘记了生日是不是不爱我？"><a href="#忘记了生日是不是不爱我？" class="headerlink" title="忘记了生日是不是不爱我？"></a>忘记了生日是不是不爱我？</h2><p><strong>Q：</strong></p>
<p>老师，我是男生，我生日的时候，女生忘记了。后来她知道了，跟我道歉了。不过，她只给我唱了生日歌，我应该如何理解？</p>
<p><strong>A：</strong></p>
<p>这个问题很扎心。我们该如何理解呢？</p>
<p>首先，如果她是你的女朋友，你可能觉得女生不是都能记住男朋友生日吗？或者是你们认识多年了，她是你喜欢的女孩子，我建议你去做一个良性的表达，她可能有什么不得已的理由。</p>
<p>可是，如果你们刚刚认识或者认识不久，她忘记你的生日，你可以先向她表示理解，但是事情不能就这样过去，你可以心平气和地跟她表达你的在乎、你的难过，但不要是不满。</p>
<p>比如说，你可以这样说：“全世界有多少人记住我的生日，我是不在乎的。但是因为我很在乎你，所以你没记住，我很难过。”然后可以装作“惩罚”或者让她“承诺”。</p>
<p>像是明年一起过生日，一起出去吃顿饭，或者你给我补个小礼物。</p>
<p>其实，我们都不是在乎这个礼物什么的，在乎的是心意，要把这点表达到。</p>
<h2 id="国家会分配对象吗？"><a href="#国家会分配对象吗？" class="headerlink" title="国家会分配对象吗？"></a>国家会分配对象吗？</h2><p><strong>Q：</strong></p>
<p>老师，未来国家会分配对象吗？</p>
<p><strong>A：</strong></p>
<p>一定不会的。</p>
<p>即便分配了，你也会不满意。换句话说，国家敢分配，你敢要吗？所以说，我们不要指望国家分配，找对象这件事，我们还是要靠自己！自己动手，丰衣足食！</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>突如其来的爱情</title>
    <url>//posts/188b2dd/</url>
    <content><![CDATA[<hr>
<p>东京爱情故事主题曲ラブ・ストーリーは突然に（日语+罗马音+中文）</p>
<p>　　ラブストーりーは突然に 突如其来的爱情</p>
<p>　　何から伝えればいいのか 不知该从何说起</p>
<p>　　na ni ka ra tsu ta e re ba i i no ka</p>
<p>　　分からないまま时は流れて 时间在悄无声息地流逝</p>
<p>　　wa ka ra na i ma ma to ki wa na ga re te</p>
<p>　　浮かんでは消えてゆく</p>
<p>　　u ka n de wa,ki e te yu ku</p>
<p>　　ありふれた言叶だけ 涌上心头的满腹言语消失得无影无踪</p>
<p>　　a ri fu re ta,ko to ba da ke</p>
<p>　　君があんまりすてきだから 你的美丽动人</p>
<p>　　ki mi ga a n ma ri,su te ki da ka la</p>
<p>　　ただすなおにすきと言えないで 让我无法直白爱上你</p>
<p>　　ta da su na o ni su ki to i e na i de</p>
<p>　　多分もうすぐ雨も止んで二人たそがれ 雨快止了在这个只属于我两的黄昏</p>
<p>　　ta bu m mo u su gu,a me mo,ya n de fu ta ri ta su ga re</p>
<p>　　あの日あの时あの场所で 在那天 在那时 在那地方</p>
<p>　　a no hi a no to ki a no ba sho de</p>
<p>　　君に会えなかったら 如果不曾与你邂逅</p>
<p>　　ki mi ni a e na ka tta la</p>
<p>　　仆等はいつまでも见知らぬ二人のまま 我们将永远是陌生人</p>
<p>　　bo ku u la wa,i tsu ma de mo,mi shi la nu fu ta ri no,ma ma</p>
<p>　　谁かが甘く诱う言叶に</p>
<p>　　da re ka ga a ma ku sa so u ko to ba ni</p>
<p>　　もう心揺れたいしないで 别再为他人的甜言蜜语而动心</p>
<p>　　mo u ko ko ro yu re ta i shi na i de</p>
<p>　　切ないけどそんなふうに 虽然会有苦闷但我还是</p>
<p>　　se tsu na i ke do,so n na fu u ni</p>
<p>　　心は缚れない 约束不了自己的心</p>
<p>　　ko ko ro wa,shi ba re na i</p>
<p>　　明日になれば君をきっと 一天比一天更喜欢你</p>
<p>　　a shi ta ni na re ba,ki mi o ki tto</p>
<p>　　今よりもっと好きになる 比现在更爱你</p>
<p>　　i ma yo ri mo tto su ki ni na ru</p>
<p>　　そのすべてが仆のなかで时を</p>
<p>　　so no su be te ga,bo ku no na ka de to ki o</p>
<p>　　超えてゆく 我所有的一切越过时空的阻隔来到你身边</p>
<p>　　ko e te yu ku</p>
<p>　　君のために翼になる</p>
<p>　　ki mi no ta me ni tsu ba sa ni na ru</p>
<p>　　君を守りつづける 我要变成翅膀紧紧地守护你</p>
<p>　　ki mi o ma mo ri tsu tsu ke ru</p>
<p>　　やわらかく君をつつむ</p>
<p>　　ya wa la ka ku,ki mi o tsu tsu mu</p>
<p>　　あの风になる 我要变成风温柔地拥抱你</p>
<p>　　a no ka ze ni na ru</p>
<p>　　あの日あの时あの场所で 在那天 在那时 在那地方</p>
<p>　　a no hi a no to ki a no ba sho de</p>
<p>　　君に会えなかったら 如果不曾与你邂逅</p>
<p>　　ki mi ni a e na ka tta la</p>
<p>　　仆等はいつまでも</p>
<p>　　bo ku u la wa,i tsu ma de mo</p>
<p>　　见知らぬ二人のまま 我们将永远是陌生人</p>
<p>　　mi shi la nu fu ta ri no ma ma</p>
<p>　　今君の心が动いた</p>
<p>　　i ma,ki mi no ko ko ro ga,o i ta</p>
<p>　　言叶止めて肩を寄せて 现在你已动了心不要言语依偎着我</p>
<p>　　ko to ba,o me de,ka ta o,yo se te</p>
<p>　　仆は忘れないこの日を 在那难忘的日子</p>
<p>　　bo ku wa,wa su re na i,ko no hi o</p>
<p>　　君を谁にも渡さない 我不会把你让给任何人</p>
<p>　　ki mi o,da re ni mo,wa ta sa na i</p>
<p>　　君のために翼になる</p>
<p>　　ki mi no ta me ni,tsu ba sa ni na ru</p>
<p>　　君を守りつづける 我要变成翅膀紧紧地守护你</p>
<p>　　ki mi o ma mo ri,tsu tsu ke ru</p>
<p>　　やわらかく君をつつむ</p>
<p>　　ya wa la ka ku,ki mi o tsu tsu mu</p>
<p>　　あの风になる 我要变成风温柔地拥抱你</p>
<p>　　a no ka ze ni na ru</p>
<p>　　あの日あの时あの场所で 在那天 在那时 在那地方</p>
<p>　　a no hi a no to ki a no ba sho de</p>
<p>　　君に会えなかったら 如果不曾与你邂逅</p>
<p>　　ki mi ni a e na ka tta la</p>
<p>　　仆等はいつまでも</p>
<p>　　bo ku u la wa,i tsu ma de mo</p>
<p>　　见知らぬ二人のまま 我们将永远是陌生人</p>
<p>　　mi shi la nu fu ta ri no ma ma</p>
<p>　　谁かが甘く诱う言叶に</p>
<p>　　da re ka ga a ma ku sa so u ko to</p>
<p>　　心揺れたりしないで 别再为他人的甜言蜜语而动心</p>
<p>　　ba ni ko ko ro yu re ta ri shi na i de</p>
<p>　　君をつつむあの风になる 我要变成围绕你的风</p>
<p>　　ki mi o tsu tsu mu,a no ka ze ni na ru</p>
<p>　　あの日あの时あの场所で 在那天 在那时 在那地方</p>
<p>　　a no hi a no to ki a no ba sho de</p>
<p>　　君に会えなかったら 如果不曾与你邂逅</p>
<p>　　ki mi ni a e na ka tta la</p>
<p>　　仆等はいつまでも</p>
<p>　　bo ku u la wa,i tsu ma de mo</p>
<p>　　见知らぬ二人のまま 我们将永远是陌生人</p>
<p>　　mi shi la nu fu ta ri no,ma ma</p>
<hr>
<p>na ni ka ra tsu ta e re ba i i no ka<br>な に か ら つ た えれ ば いいの か<br>wa ka ra na i ma ma to ki ha na ga re te<br>わ か ら な いま ま と き は な が れ て<br>u ka n de ha,ki e te ju ku<br>うか んで い き えて ゆ く<br>a ri fu re ta,ko to ba da ke<br>あり ふ れ た こ と ば だ け<br>ki ma ga a m ma ri,su te ki da ka la<br>き み が あんま り す て き だ か ら<br>ta da su na o ni su ki to i e na i de<br>た だ す な おに す き と いえな いで<br>ta bu m mo u su gu,a me mo,ja n de fu ta ri<br>た ぶ んも うす ぐ あめ も や んで ふ た り<br>ta su ga re<br>た す が れ</p>
<p>a no hi a no to ki a no ba shi jo de<br>あの ひ あの と き あの ば し よ で<br>ki mi ni a e na ka tsu ta la<br>き み に あえな か つ た ら<br>bo ku u la ha,i tsu ma de mo<br>ぼ く うら は い つ ま で も<br>mi shi la nu fu,ta ni no,ma ma<br>み し ら ぬ ふ た に の ま ま</p>
<p>da re ka ga a ma ku sa so u ko to ba ni<br>だ れ か が あま く さ そ うこ と ば に<br>mo u ko ko ro ju re ta i shi na i de<br>も うこ こ ろ ゆ れ た い し な いで<br>se tsu na i ke do,so n na fu u ni<br>せ つ な いけ ど そ んな ふ うに<br>ko ko ro ha,shi ba re na i<br>こ こ ろ は し ば れ な い<br>a shi ta ni nu re ba,ki mi o ki tsu to<br>あ し た に な れ ば き みを き つ と<br>i ma jo ri mo tsu to su ki ni na ju<br>いま よ り も つ と す き に な る<br>so no su be te ga,bo ku no na ka de to ki o<br>そ の す べ て が ぼ く の な か で と きを<br>ko e te ju ku<br>こ えて ゆ く</p>
<p>ki mi no ka ze ni,tsu ba sa ni na ju<br>き み の か ぜ に つ ば さ に な る<br>ki mi o ma mo ri,tsu tsu ke ru<br>き みを ま も り つ つ け る<br>ja wa la ka ku,ki mi o tsu tsu mu<br>や わ ら か く き みを つ つ む<br>a no ka ze ni na ru<br>あの か ぜ に な る</p>
<p>a no hi a no to ki a no ba shi jo de<br>あの ひ あの と き あの ば し よ で<br>ki mi ni a e na ka tsu ta la<br>き み に あえな か つ た ら<br>bo ku u la ha,i tsu ma de mo<br>ぼ く うら は い つ ま で も<br>mi shi la nu fu,ta ni no,ma ma<br>み し ら ぬ ふ た に の ま ま</p>
<p>i ma,ki mi no ko ko ro ga,o i ta<br>いま き み の こ こ ろ が おいた<br>ko to ba,o me de,ka ta o,jo se te<br>こ と ば おめ で か た およ せ て<br>bo ku ha,wa su re na i,ko no hi o<br>ぼ く は わ す れ な いこ の ひを<br>ki mi o,da re ni mo,wa ta sa na i<br>き みを だ れ に も わ た さ な い</p>
<p>ki mi no ka ze ni,tsu ba sa ni na ju<br>き み の か ぜ に つ ば さ に な る<br>ki mi o ma mo ri,tsu tsu ke ru<br>き みを ま も り つ つ け る<br>ja wa la ka ku,ki mi o tsu tsu mu<br>や わ ら か く き みを つ つ む<br>a no ka ze ni na ru<br>あの か ぜ に な る</p>
<p>a no hi a no to ki a no ba shi jo de<br>あの ひ あの と き あの ば し よ で<br>ki mi ni a e na ka tsu ta la<br>き み に あえな か つ た ら<br>bo ku u la ha,i tsu ma de mo<br>ぼ く うら は い つ ま で も<br>mi shi la nu fu,ta ni no,ma ma<br>み し ら ぬ ふ た に の ま ま</p>
<p>da re ka ga a ma,ku sa so u ko to<br>だ れ か が あま く さ そ うこ と<br>ba ni ko ko ro ju,re ta ri shi na i de<br>ば に こ こ ろ ゆ れ た り し な いで<br>ki mi o tsu tsu mu,a no ka ze ni na ru<br>き みを つ つ む あの か ぜ に な る</p>
<p>a no hi a no to ki a no ba shi jo de<br>あの ひ あの と き あの ば し よ で<br>ki mi ni a e na ka tsu ta la<br>き み に あえな か つ た ら<br>bo ku u la ha,i tsu ma de mo<br>ぼ く うら は い つ ま で も<br>mi shi la nu fu,ta ni no,ma ma<br>み し ら ぬ ふ た に の ま ま</p>
<hr>
<p>《突如其来的爱情故事》中文版歌词</p>
<p>不知该从何说起<br>时间在悄无声息地流逝<br>心中有千言万语 却欲言又止<br>你的美丽动人<br>让我无法向你表白爱意<br>雨快停了 在这个只属于你我的黄昏<br>在那天 在那时 在那地方<br>如果不曾与你邂逅<br>我们将永远是陌路人</p>
<p>别再为他人的甜言蜜语而动心<br>也别难过 就算那样<br>也别放在心上<br>明天我会比现在<br>更加爱你<br>所有往事都铭记于心，超越时空<br>我愿长出翅膀 紧紧地守护着你<br>我要变成和风 温柔地拥抱着你<br>在那天 在那时 在那地方<br>如果不曾与你相遇<br>我们将永远是陌路人</p>
<p>现在你已动了心 不要言语 依偎着我<br>我不会忘记这天 不会把你让给任何人<br>在那天 在那时 在那地方<br>如果不曾与你相遇<br>我们将永远是陌路人</p>
<p>别再为他人的甜言蜜语而动心<br>我要变成和风裹护着你<br>在那天 在那时 在那地方<br>如果不曾与你相遇<br>我们将永远是陌路人：）~~</p>
<hr>
<p>なにから伝つたえればいいのか 分わからないまま時ときは流ながれて</p>
<p>na ni ka ra tsu ta e re ba i i no ka 　wa ka ra na i ma ma to ki ha na ga re te</p>
<p>随着时间不断的流逝，却不知该从何说起</p>
<p>浮うかんでは 消きえてゆく ありふれた言葉ことばだけ</p>
<p>u ka n de ha　ki e te yu ku　a ri fu re ta　ko to ba da ke</p>
<p>浮现在脑海里的言语，却消失的无影无踪</p>
<p>君きみがあんまりすてきだから ただすなおに 好すきと言いえないで</p>
<p>ki mi ga a n ma ri　su te ki da ka ra　ta da su na o ni su ki to i e na i de</p>
<p>因为你是那么地迷人，令我无法坦陈心意</p>
<p>多分たぶんもうすぐ 雨あめも止やんで 二人ふたり たそがれ</p>
<p>ta bu n mo u su gu　a me mo　ya n de fu ta rita so ga re</p>
<p>眼看这场雨就要停了，在只有我俩的黄昏</p>
<p>あの日ひ あの時とき あの場所ばしょで 君きみに会あえなかったら</p>
<p>a no hi a no to ki a no ba syo deki mi ni a e na ka tta ra</p>
<p>那一天那一刻在那里，如果不曾与你相遇</p>
<p>僕等ぼくらは いつまでも 見知みしらぬ二人ふたりのまま</p>
<p>bo ku ra ha i tsu ma de mo mi shi ra nu fu ta ri noma ma</p>
<p>我们将会是形同陌路，成为毫不相干的人</p>
<p>誰だれかが甘あまく誘さそう言葉ことばに もう心揺こころゆれたりしないで</p>
<p>da re ka ga a ma ku sa so u ko to ba ni mo u ko ko ro yu re ta ri shi na i de</p>
<p>任谁说什么甜言蜜语，我也不会为之动心</p>
<p>切せつないけど そんなふうに 心こころは縛しばれない</p>
<p>se tsu na i ke do so n na fu u ni ko ko ro ha shi ba re na i</p>
<p>我已经无法自欺欺人，尽管为此深感苦闷</p>
<p>明日あしたになれば君きみをきっと 今いまよりもっと好すきになる</p>
<p>a shi ta ni na re baki mi o ki tto i ma yo ri mo tto su ki ni na ru</p>
<p>对你的感情日甚一日，每天都更加喜欢你</p>
<p>そのすべてが僕ぼくのなかで 時ときを超こえてゆく</p>
<p>so no su be te gabo ku no na ka de to ki o ko e te yu ku</p>
<p>想要穿越过重重时空，倾尽所有与你相随</p>
<p>君きみのためにつばさになる 君きみを守まもりつづける</p>
<p>ki mi no ta me nitsu ba sa ni na ru ki mi o ma mo ritsu du ke ru</p>
<p>多想为了你生出双翼，紧紧将你守在怀里</p>
<p>やわらかく 君きみをつつむ あの風かぜになる</p>
<p>ya wa ra ka ku ki mi o tsu tsu mu a no ka ze ni na ru</p>
<p>或者化作那缕缕清风，时时刻刻抚慰着你</p>
<p>あの日ひ あの時とき あの場所ばしょで 君きみに会あえなかったら</p>
<p>a no hi a no to ki a no ba syo de ki mi ni a e na ka tta ra</p>
<p>那一天那一刻在那里，如果不曾与你相遇</p>
<p>僕等ぼくらは いつまでも 見知みしらぬ二人ふたりのまま</p>
<p>bo ku ra ha i tsu ma de mo mi shi ra nu fu ta ri no ma ma</p>
<p>我们将会是形同陌路，成为毫不相干的人</p>
<p>今いま君きみの心こころが動うごいた言葉止ことばとめて肩かたを寄よせて</p>
<p>i ma ki mi no ko ko ro ga ugo i ta ko to ba to me te ka ta oyo se te</p>
<p>现在你已经为我心动，无需多言请依靠我</p>
<p>僕ぼくは忘わすれないこの日ひを 君きみを誰だれにも渡わたさない</p>
<p>bo ku ha wa su re na iko no hi o ki mi o da re ni mowa ta sa na i</p>
<p>在这无法忘却的日子，绝不将你交给别人</p>
<p>君きみのためにつばさになる 君きみを守まもりつづける</p>
<p>ki mi no ta me nitsu ba sa ni na ru ki mi o ma mo ri tsu du ke ru</p>
<p>多想为了你生出双翼，紧紧将你守在怀里</p>
<p>やわらかく 君きみをつつむ あの風かぜになる</p>
<p>ya wa ra ka kuki mi o tsu tsu mu a no ka ze ni na ru</p>
<p>或者化作那缕缕清风，时时刻刻抚慰着你</p>
<p>あの日ひ あの時とき あの場所ばしょで 君きみに会あえなかったら</p>
<p>a no hi a no to ki a no ba syo de ki mi ni a e na ka tta ra</p>
<p>那一天那一刻在那里，如果不曾与你相遇</p>
<p>僕等ぼくらは いつまでも 見知みしらぬ二人ふたりのまま</p>
<p>bo ku ra ha i tsu ma de mo mi shi ra nu fu ta ri no ma ma</p>
<p>我们将会是形同陌路，成为毫不相干的人</p>
<p>誰だれかが甘あまく誘さそう言葉ことばに 心揺こころゆれたりしないで</p>
<p>da re ka ga a ma ku sa so u ko to ba ni mo u ko ko ro yu re ta ri shi na i de</p>
<p>任谁说什么甜言蜜语，我也不会为之动心</p>
<p>君きみをつつむあの風かぜになる</p>
<p>ki mi o tsu tsu mu a no ka ze ni na ru</p>
<p>我只想化作缕缕清风，时时刻刻抚慰着你</p>
<p>あの日ひ あの時とき あの場所ばしょで 君きみに会あえなかったら</p>
<p>a no hi a no to ki a no ba syo de ki mi ni a e na ka tta ra</p>
<p>那一天那一刻在那里，如果不曾与你相遇</p>
<p>僕等ぼくらは いつまでも 見知みしらぬ二人ふたりのまま</p>
<p>bo ku ra ha i tsu ma de mo mi shi ra nu fu ta ri no ma ma</p>
<p>我们将会是形同陌路，成为毫不相干的人</p>
]]></content>
      <tags>
        <tag>lyric</tag>
      </tags>
  </entry>
  <entry>
    <title>春节加餐2 恋爱课答疑集锦：人潮之中彼此相视而窃喜</title>
    <url>//posts/bc2ac6c3/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="春节加餐2-恋爱课答疑集锦：人潮之中彼此相视而窃喜"><a href="#春节加餐2-恋爱课答疑集锦：人潮之中彼此相视而窃喜" class="headerlink" title="春节加餐2 恋爱课答疑集锦：人潮之中彼此相视而窃喜"></a>春节加餐2 恋爱课答疑集锦：人潮之中彼此相视而窃喜</h1><p>今天是大年初四，假期已经过半了。不知道这一次回家过年的你，有没有被催恋爱、结婚？有没有为自己新的一年，想好一个恋爱目标？有没有什么恋爱计划？</p>
<p>恋爱课专栏已经上线更新一段时间了，每一天都能看到很多小伙伴在留言区留言。</p>
<p>有的人记录着自己对爱情的理解，写下自己的感悟；也有的同学留下自己在感情中的疑惑，迫切地想寻找到问题的答案；还有的同学给其他留言的小伙伴指点迷津，出谋划策。</p>
<p>总的来说，恋爱课的留言区很“热闹”，很“丰富”，也很“接地气”，也让我感触颇深。</p>
<p>虽然专栏每一讲的内容有限，但是我们专栏的留言内容成为了专栏最好的补充。于是，我将留言板中的答疑和精彩留言进行了一个汇总，帮助你更好地理解恋爱这门学问。</p>
<p>截至大年初一，基本做到了精选留言的一一回复，非常感谢小伙伴们的评论。</p>
<p>有许多非常精彩的洞见，这使看回复成为了一件非常开心的事情。我简单把回复分成四类分享一下，一是深有感触摘抄类；二是言简意赅金句类；三是皮一下很开心类；四是现实问题答疑类。</p>
<h2 id="一、深有感触摘抄类"><a href="#一、深有感触摘抄类" class="headerlink" title="一、深有感触摘抄类"></a>一、深有感触摘抄类</h2><p><strong>秋水东行</strong></p>
<p>看了几遍了，深有感触：要有恋爱目标，恋爱目标服从人生目标，服从目标要以我为主。</p>
<p>“贵以身为天下，若可寄天下，爱以身为天下，若可托天下”。不珍重自己，那有个好状态、好身体去办事儿；不珍重自己的人，谈何能够爱护珍重别人；不珍重自己，其他人其实也很难再珍重你的。所以，很多事儿，不仅仅是爱情，都得好好琢磨琢磨“贵以身”和“爱以身”了。就凭这句引用的话，这门课买值了。</p>
<p><strong>回复：</strong></p>
<p>谢谢支持，看到您能点出这句话，真是非常开心，有种不白写的感觉，您是识货的行家！</p>
<p><strong>进化菌：</strong></p>
<p>有启发！</p>
<p>不仅是相处久的恋人需要新鲜感，相处久的朋友、亲人也是需要的。</p>
<p>而且，感觉自己老实本分的天性更多，如果偶尔做些不确定、打破日常的小事情，应该会是比较有趣的吧？</p>
<p><strong>辰昊楠 -(Yami 的土豆宽粉)</strong></p>
<p>两个人在一起久了，原本一味的甜蜜难免也有些乏味，这个时候可以刻意营造新鲜感、刻意制造惊喜，比如改变以往常用的称呼。试着换换更有挑战的昵称来称呼彼此、带对方体验一些不可预知的生活方式等。</p>
<p><strong>郭梓良</strong></p>
<p>有朋友遇到了第二种渣，偏执控渣。很好地应验了老师说的，表现出他希望的样子时，彬彬有礼，极致温柔；但一旦你违背了他的意愿，他就会向你疯狂输出负面情绪，直到最后被点醒才发现被 PUA 了。而且偏执控渣和全面依赖渣，确实是一体两面，因为女方的全面依赖，导致他们最后分手的时候，闹的非常难堪。二人多次分手，女方都以各种极端行为要求复合。一般人是真的顶不住</p>
<p><strong>夏</strong></p>
<p>非常认同且触动我的点：</p>
<p>我们不仅要学习如何去爱，还要学习如何享受被爱。以前，太重视如何去爱，忽略了如何享受被爱。在爱情中，爱与被爱是互动的，爱与被爱都是值得学习的能力。</p>
<p>爱与被爱，是一种可以习得的能力。知识和方法可以复制，能力可以通过训练得到，但是不可能速成。</p>
<p>恋爱，是技巧，那我们的目的是什么？用技术掩盖缺点？“恋爱技能就像太极剑，是让你掩盖破绽、化解矛盾，和自己，也和对方的缺陷达成和解的一种能力。” 我想，可能是用技巧化解恋爱中的矛盾吧。</p>
<p>恋爱就是自我成长。与 ta 相处的过程中，其实就是一场自我认识、自我和解的旅程。</p>
<p><strong>回复：</strong></p>
<p>谢谢认同，能够引起共鸣是创作者最大的荣耀和心愿，谢谢。</p>
<p><strong>孤鸿傲雪 Geek_79dd4b</strong></p>
<p>“土味情话流”适用于那些已经进入恋爱关系的人的，都是老夫老妻拿来增添点生活乐趣的。</p>
<p>关系亲密程度，决定了有些话可以说，有些话不能说。随着关系越来越亲密，交谈局面的打开，可以讨论的话题（即打破的话题禁区）也越来越多。</p>
<p>而且关系的发展是循序渐进的，换句话说是连续的，不可能出现跳跃式发展，一上来就搞土味情话，不合适，还没有确定关系，就搞得好像很亲密，有不少妹子会觉得，这个人有病吧，然后就没有然后了。</p>
<p>有的男生不能对两个人关系有很好的把握，交往了一段时间，但是交情实际上还是比较浅的，或者说不是足够牢固到可以确定关系，这个时候突然搞土味情话也不是太合适。怎么说呢，一方面吸引力还不是足够的强，另一方面会让对方觉得猴急，不成熟，反而被筛选掉了。这种情况其实是比较可惜的，说句难听的就是到嘴的鸭子飞了。</p>
<p>用老师在文中的话讲，就是这些东西“是胜利的凯歌，不是冲锋的号角！”，这句话非常经典。</p>
<p>当然了，我不想给所谓的恋爱设置很多条条框框，这种话不能说那些话不能讲，如果恋爱的道路上一眼望过去，到处都是限制、障碍，人一下子就是失去动力，毕竟没有乐趣了，两个人都整天愁眉苦脸的，谈恋爱还有什么意义。</p>
<p>也就是说，土味情话，不是绝对不能说，不是能不能说的问题，而是什么时候说（时机、场合）、怎么说的（说的方式、态度，两个人的状态以及当时外部环境的契合程度等）的问题。另外对这些所谓指标的判断，也是相当程度上非常主观的，而能否做出准确判断，又与两个人的磨合（默契）程度有关。</p>
<p>从效果的角度来说，预估一下，所谓的土味情话说出来之后，对你们的关系是起到推动作用，你们关系会更进一步的发展，会变得更加的亲密，那么大胆说出来！</p>
<p>如果说之前，你自己心里都没底，不知道会有什么后果，说明你们的关系还是比较疏远的，或者很明显说了之后后果自负那种，很显然还是别说了，说了之后双方都会觉得不适。</p>
<p>总结一下就是，土味情话可以是说，但也不是乱说的，尤其要注意时机。时机不成熟，有些话就是不能说。一上来就说，不符合恋爱规律，注定要翻车！</p>
<p><strong>小呀么小二郎</strong></p>
<p>恋爱关系的核心在于信息交互。无比同意。</p>
<p>我觉得，在满足信息交互的前提下，明确表达出自己喜欢对方也是很有必要的。（不过这个可能是我自己的一种偏执或者说仪式感吧）</p>
<p><strong>回复：</strong></p>
<p>这不是偏执，你说的非常对，明确表达自己喜欢对方是非常必要的。只不过明确的表达未必就是表白，信息的载体非常多，行动上、情绪上、语言上我们有很多方法明确地表达这个信息。</p>
<p><strong>亚东</strong></p>
<p>暧昧期最重要的就是一方面有节制地表达爱意（那种迷糊地表达，主要通过细节跟行动，切忌过头），另外一方面就是展示真实的自己。这样等时机合适就自然而然在一起了。</p>
<p><strong>回复：</strong></p>
<p>总结的非常对，就是最后一个字，时机合适不是等来的，其实也是双方共同创造的。</p>
<h2 id="二、言简意赅金句类："><a href="#二、言简意赅金句类：" class="headerlink" title="二、言简意赅金句类："></a>二、言简意赅金句类：</h2><p><strong>辰昊楠 -(Yami 的土豆宽粉)：</strong></p>
<p>可能两个人有时候最好的状态就是彼此心照不宣。那种期许愿景的心情是毕生难忘的。</p>
<p><strong>回复：</strong></p>
<p>是的，心有戚戚但不发一言，人潮之中彼此相视而窃喜。</p>
<p><strong>小呀么小二郎</strong></p>
<p>“对于普通人来说，及时止损永远比盈利更重要。”</p>
<p><strong>回复：</strong></p>
<p>大家都要树立底线思维，只要坐在牌桌上，就有机会。</p>
<p><strong>Fiona</strong></p>
<p>谈恋爱也是要调动智商，考验个人能力的呀！可惜大多数人都太不重视了，得过且过</p>
<p><strong>Lesserror</strong></p>
<p>欲擒故纵，各位。舔来的爱情是脆弱不堪的。我们要用自己的价值去给她造成难以泯灭的吸引。</p>
<p><strong>回复：</strong></p>
<p>同意你的观点，要展示自己的价值，也愿你能温柔以待。</p>
<h2 id="三、皮一下很开心类："><a href="#三、皮一下很开心类：" class="headerlink" title="三、皮一下很开心类："></a>三、皮一下很开心类：</h2><p><strong>Sweeney</strong></p>
<p>嗯，先把陪我看曼联比赛这条用上😂</p>
<p><strong>回复：</strong></p>
<p>嗯，按时间算，您发这条评论的时候曼联马上要踢西汉姆了，半夜三点陪看球那绝对是真爱！</p>
<p><strong>捞鱼的搬砖奇</strong></p>
<p>我防我自己（狗头）</p>
<p><strong>回复：</strong></p>
<p>外邪易诛 心魔难伏。</p>
<p><strong>Pluto</strong></p>
<p>有时候，单身，可能不是你不够好，而是你太好。</p>
<p>挺好的，还能这样骗骗自己。</p>
<p><strong>回复：</strong></p>
<p>刘亦菲还单身呢！</p>
<p><strong>嗣树：</strong></p>
<p>飞龙骑脸，找老仙奶一口不是更香。</p>
<p><strong>回复：</strong></p>
<p>毒奶老仙，法力无边。</p>
<p><strong>keke</strong></p>
<p>我一直试图从神经生物学和意识的角度去破解恋爱的本质，以至于现在感觉恋爱就是在某些基因的控制下通过分泌某些激素来带动身体的部分器官和组织发生某些生物学反应的一种状态，那么如何能够让这种状态发挥到极致呢？我想可以基于大数据和云计算，通过视觉识别去快速定位到能跟自己基因产生某种量子自旋和跃迁效应的基因所承载的某个人或某些人，之后再去通过因果之梯去找出那个“命中注定”的 only one，这样就很容易匹配到恋爱对象了，然后把这种最优解植入到基因中去，并去区块链库中进行登记，这样就实现了基因层面的恋爱关系绑定，不可篡改、永不分开，当然这一切都发生在基因层面上，人类的意识是无法感知到的。</p>
<p><strong>回复：</strong></p>
<p>嘿嘿，您的想法非常有趣，有本书叫自私的基因，也是希望通过生物学的角度来解析人的社会化行为。不过我建议您要对爱情保有信心，从生物学来讲，这种决定论也是一种群体概率而非个体选择；从社会学来讲，人的一切行为既有先天基因的决定，也有后天教育的养成；从哲学上来讲，人有主观能动性，机械决定论可能还是值得商榷。</p>
<p><strong>aiden</strong></p>
<p>我就想知道，21 天玩转 Python 这门课在哪？女朋友先放一边，Python 学习很重要。</p>
<h2 id="四、现实问题答疑类："><a href="#四、现实问题答疑类：" class="headerlink" title="四、现实问题答疑类："></a>四、现实问题答疑类：</h2><p><strong>Q：</strong></p>
<p>李老师，我和男朋友因为要买房结婚（感情也到位了），他父母出首付，后期一起还贷款。我在想如何与他的父母沟通，说这个房子算是婚房，属于夫妻共同财产，如果分手就对半分，想请教老师与他父母如何沟通比较合适呢？希望得到指点~</p>
<p><strong>A：</strong></p>
<p>第一，分手对半分是指结婚之前感情万一破裂的情况吗？这种情况一般来讲在他们出首付的情况下不太可能答应的。</p>
<p>第二，如果是指结婚之后，那么按照现行婚姻法的要求，夫妻双方共同还贷，还贷和房产增值部分是属于夫妻双方共同财产。</p>
<p>第三，如果你觉得第二条还不够，还需要首付部分的话，最好是婚后要求房产更名为双方共同拥有。</p>
<p>第四，以上三种情况，无论哪种都不要与他父母沟通，你记住一条，你男朋友才是核心。任何时候你男朋友要你搞定他爸妈，那说明你男朋友对这件事的态度也是 no。</p>
<p><strong>Q:</strong></p>
<p>老师，我现在有个情况是这样的，我跟女孩已经 4 个月了，相亲认识的，开始时候会想有好感聊得也很多，1 个多月后，算是心照不宣的确立关系，但是俩个人异地，女方之前有明确的表现说来我的工作所在地工作，双方父母都比较着急，已经操持订婚的事情了，中间还有没人我的父母想让她去我的所在地工作，圣诞节见面之后女方对我的态度急转直下，可能是双方父母去聊彩礼的事没有谈拢，我是觉得还没有到必须要到这一步，然后女生说之前自己恋爱脑了，现在想慢慢发展，我跟她现在每天也就聊个 10 来句，不怎么回复我了，也不关心我的生活了，请问老师这种情况我应该怎么办，我还是想挽回的。</p>
<p><strong>A:</strong></p>
<p>因为女方到你所在的城市，属于比较重大的人生选择和变动，而且到你所在城市后，你是不是还准备接她进门共同生活？</p>
<p>在这种情况，女方需要男方一个比较可靠的承诺是可以理解的，但是你觉得事情还没有到这一步。</p>
<p>我想这可能是矛盾的关键环节，如果你们双方确实对对方有意，双方父母又都非常满意且着急的情况下，最好是都拿出诚意来解决这个承诺问题。</p>
<p><strong>Q:</strong></p>
<p>我想问下 男生觉的 面子很重要 很敏感 把这个当成他的底线，但是这个底线 对女生来说 就是很正常的交流和沟通 我认为他太敏感了 这也变成了我不能接受的点 怎么破 我想知道我有错么？</p>
<p>ps(这个男生其他方面好 OK 就是大男子主义，认为必须给他留足面子，尤其在有其他外人的情况下，自认为自己的选择和认知就是正确，觉得什么就得他做主，不允许别人否定和反驳 否则就认为你不认可 支持他，让他没面子</p>
<p>他就开始恼怒，然后两个人开始冷战，他也不会主动低头认错 或者主动和好……)</p>
<p>我自己的话 说话 可能稍微有点直接 但是真的没有到他所说的不给他留面子，我的直接也是觉得你是我最亲密的人 才这样说，而且肯定没有所谓的恶意，但是他也不认为，所以 心累啊</p>
<p>两个人已经好几次因为这个事情吵架了 我该如何解决 期待得到回复 谢谢啦！</p>
<p><strong>A:</strong></p>
<p>这其实是个双方磨合的问题，既然这个男生其他方面都好 OK，就是在外人面前要摆大男子主义架子这一个缺点的话，我建议你有条件地接受他这个要求。</p>
<ol>
<li>这个大男子主义不能侵犯你的尊严，比如：他可以吹牛逼自己痛打过奥巴马，但是不能吹牛逼在家打你</li>
<li>打蛇打七寸，聪明的女人都知道在人前给男朋友一点面子，人后能有多大的好处。但是你可以给，他不能要，给不给看表现，懂了咩？</li>
</ol>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>结束语 但行好事，莫问前程</title>
    <url>//posts/5df71253/</url>
    <content><![CDATA[<hr>
<p><strong>转载声明</strong>: 本文转载自<a href="https://lianglianglee.com/恋爱必修课">恋爱必修课</a></p>
<hr>
<h1 id="结束语-但行好事，莫问前程"><a href="#结束语-但行好事，莫问前程" class="headerlink" title="结束语 但行好事，莫问前程"></a>结束语 但行好事，莫问前程</h1><p>终于还是到了结束语的环节，到了要说再见的时候，感谢你，与我一路走到了这里。</p>
<h2 id="送君千里，终须一别"><a href="#送君千里，终须一别" class="headerlink" title="送君千里，终须一别"></a>送君千里，终须一别</h2><p>课程结束了，在开篇词中，我曾吹牛说这门课与大部分情感课都不一样。今天，我觉得我确实做到了，可以理直气壮地说，这门课确实与大部分情感课都不一样。</p>
<p>三个月前，我们其实计划做一个武侠方向的情感课程。当时，课程名字还不叫《恋爱必修课》，而是《爱情的独孤九剑》，每一讲的标题也是各种各样的武侠招式。虽然，最终的课程呈现形式和我们当初设想的并不完全相同，但效果还是令人满意的。</p>
<p>最重要的是，能够陪伴你走完这一个多月的爱情之路，与你一起研究爱情这个课题，探讨爱情、分析爱情，遇见了如此多的新朋友。虽有万般不舍，但也是聚散终有时。</p>
<p>这就是送君千里，终须一别吧！</p>
<h2 id="但行好事，莫问前程"><a href="#但行好事，莫问前程" class="headerlink" title="但行好事，莫问前程"></a>但行好事，莫问前程</h2><p>于我而言，这门课程给我留下了很多值得回忆的地方。</p>
<p>第一讲的时候，有点“任性”地引用了一句道德经，可能有点孤僻，但真的有三位朋友在留言区中对此大加赞赏，可谓杨意不逢，抚凌云而自惜，钟期既遇，奏流水以何惭；</p>
<p>在春节的时候，加更了三讲特辑内容，还放了一篇卖萌的小故事，集锦了大家的评论。由于故事过于羞耻（捂脸）没录音，但不影响大过年，让人看的开心；</p>
<p>有开心也有遗憾，没有在春节前把相亲那一讲更新出来，是一件令人惋惜的事情，也在留言区里，受到了一点批评，在此也特别说声抱歉；</p>
<p>从课程上线开始，做了三次直播，从 PPT 车祸现场到美丽的 11 老师特邀出席，动了很多脑筋，虽然直播人数没有突破 3 位数，但是在答疑解惑时，收获了很多“有趣”的问题；</p>
<p>在课程更新的这段时间，基本做到了留言必回，在留言区为各路小伙伴出了不少主意，只是有些问题语焉不详，所以也没法细说，但心里也挂念着事态发展如何；</p>
<p>做了若干次的一对一咨询，坚持偷偷摸摸地按照至少 1 比 1 的时间进行准备，帮助不少朋友解决了恋爱和婚姻问题，过年收到了一大堆祝福感谢；</p>
<p>……</p>
<p>所以，你看，人生就是这样，你不能保证每次努力都会有收获，但只要你始终认真对待生活，生活终将不负于你。</p>
<p>恋爱也是如此，无论你有多优秀、无论你爱的能力有多强、无论你爱的意愿有多坚决，你也无法保证每一个你爱上的人，都会同样爱你。但你能做的，只有做好自己，把剩下的交给命运。</p>
<p>今年情人节的时候，有人找我咨询，说和相亲对象在同地工作，年前见了几次面，感觉还不错。又恰巧是老乡，但同市不同县，过年一直约不出来，问我情人节是不是应该在微信上聊点啥。</p>
<p>我立马问他，去姑娘家的那个县要多久？</p>
<p>他说要一个小时，我说，你在北京从天通苑跑趟北京西站都不止一个多小时，怎么感觉跟跨国恋一样见不了面呢？情人节你当然要直接杀过去，约姑娘见面呀！微信上聊，能有这效果吗？</p>
<p>他答复我说，其实也想过，但是在微信上试探了一下，姑娘没有流露出答应情人节出来跟他约会的意思，他怕去了扑个空。我说，这种事你就是要冒着风险跑路，才能体现心意，才叫浪漫嘛，十拿九稳的事情从来不浪漫。再说了，就算扑空了，你只当是去逛街了呗。</p>
<p>最终，他听取我的建议，赶着下午的时候，到了姑娘所在的地方，根据我介绍的讲话要点，非常顺利地约出了姑娘并且玩到很晚。这个例子，我也放在了评论区，回答了一个类似情况的朋友，如果你喜欢翻评论的话，可能也看到了。</p>
<p>所以，这个例子说明什么呢？千万不要患得患失，算计过重，要勇敢地去爱，不要让今天的自己为明天的自己牺牲太多，但也不要让明天的自己为今天的自己后悔不已。</p>
<p>要记住，但行好事，莫问前程。</p>
<h2 id="你就是你，独自美丽"><a href="#你就是你，独自美丽" class="headerlink" title="你就是你，独自美丽"></a>你就是你，独自美丽</h2><p>如果你认真地听了每一讲，可能你也发现了，咱们这个课程特别强调自己。不管是什么事情、什么时期、什么问题，都要贯彻以我为主的原则，甚至连防渣手册还说了要反躬自省。</p>
<p>这个原则，我想最后再提一次。因为现代社会焦虑无处不在，每个人在追逐焦虑的过程中，往往就忽视了自己。我们总是害怕自己不够优秀，害怕因为不够优秀，而失去爱的机会。</p>
<p>实际上，大多数人其实真的没那么优秀，起码我就属于特别一般的那一种。</p>
<p>我中学的时候就是一个八卦绝缘体。那时候，中学生家长和老师特别担心学生早恋，对此是严防死守的。一旦有男生女生单独出行或是交往过密，就要迎来一顿严刑拷问。</p>
<p>但邪门的事就在于，所有的老师家长都对我特别放心。</p>
<p>哦，和李一帆出去玩，那没事你快去吧；哦，这么晚回来是和李一帆一块自习呐，那没事你早点去休息吧……直到现在，我想起来，也真不知道应该为此高兴还是难过。</p>
<p>而且那个时候也不喜欢女生，别多想，我的意思是，那个时候我对身边的女生不是特别感兴趣，我喜欢的都是武侠小说里面虚构的女性角色——敏敏郡主、蓉儿妹妹、盈盈小姐……以至于常常觉得自己可能有点怪，跟其他说到妹子就两眼放光的兄弟貌似不大一样。</p>
<p>但是，以我现在的眼光看待过去的我自己，我会告诉过去的那个小孩，要坚持做自己，你要相信不一样是正常的，自己总能在这个世界走出自己的路。相信就会，相信本身就是力量。</p>
<p>当然，这是成功经验的分享，不是失败教训的体验。我这个老师家长特别放心的天赋，在后来婚恋过程中，成功升级为丈母娘必杀技——无论认识的姑娘满不满意，反正姑娘家长总是满意的。再比如天天幻想跟小说人物谈恋爱，所以才能深情满满地写下《金庸教你谈恋爱》。</p>
<p>每个人都是这个世界上独一无二的形状，有时候磨平自己，也并不一定就能找到另一半，但坚持做自己，总会有那个契合你形状的爱情出现，并且不需要你多做什么。</p>
<p>因为，你就是你，独自美丽。</p>
<h2 id="凡是过往，皆为序章"><a href="#凡是过往，皆为序章" class="headerlink" title="凡是过往，皆为序章"></a>凡是过往，皆为序章</h2><p>我们度过的每一天、做过的每件事、爱过的每个人，都会成为生命中不可分割的部分。</p>
<p>有人讲，这个课程很治愈，听完终于摆脱了多日的失眠，安心睡去；有人讲，这个课很伤感，听完想起了多年前的恋情，后悔那时候还不懂如何去爱；有人讲，这个课很启迪，听完就开悟了。</p>
<p>我想说，其实，这个课程本身只是引子，你看到和你感受到的，全部都是你自己的感悟和体会，是你自己的总结和思考。而我呢，只是做了一点微不足道的工作。</p>
<p>“如今你的气质里，藏着你走过的路，读过的书和爱过的人。”</p>
<p>你感受到的千钧重量都是你生命的重量。人生总是这样，用大把时间迷茫，用几个瞬间成长。</p>
<p>希望这个课程给你提供的情感框架，能够让你在犹豫中更加勇敢、在徘徊中更加坚定、在迷茫中开辟方向、在痛苦中得到安慰，在恋爱这条路上乘风破浪，一往无前。</p>
<p>课程完结，如果这是你的第一门恋爱启蒙课，那么我倍感荣幸。希望它能够像种子一样播撒，也成为你生命的一部分，在恰当的时机，成长为幸福的大树。</p>
<p>当然，这需要你继续在生活中实践，在爱情中思考。凡是过往，皆为序章。</p>
<h2 id="山高路远，江湖再见"><a href="#山高路远，江湖再见" class="headerlink" title="山高路远，江湖再见"></a>山高路远，江湖再见</h2><p>今番良晤，豪兴不浅。他日江湖相逢，再当杯酒言欢，咱们就此别过。</p>
<p>哦，等等，最后还有两件事。</p>
<p>第一件事呢，就是应留言区广大小伙伴的强烈要求，我们计划搞个相亲帖，让学完本课程后有意寻觅良缘的单身男女们，自产自销，岂不美哉，具体请点击这里。</p>
<p>你可以在这里，公布自己的基本情况，所在城市和对另一半的要求。</p>
<p>第二件事，就是课程结束后，如果你有比较简单的问题，可以继续在留言区里留言，我还是会坚持回复问题的。但是，如果问题比较复杂，三言两语说不清楚，又或者是不想被其他朋友看到，也可以购买一对一的咨询服务，具体请点击这里。</p>
<p>祝天下有情人终成眷属，愿你早日学有所成，觅得真爱。</p>
<p>好啦，这下真的要说再见了，祝好。</p>
]]></content>
      <categories>
        <category>恋爱必修课</category>
      </categories>
  </entry>
  <entry>
    <title>编译原理实验</title>
    <url>//posts/bf342a1b/</url>
    <content><![CDATA[<h3 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1.词法分析"></a>1.词法分析</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span>  <span class="hljs-comment">// getch()</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">char</span> prog[<span class="hljs-number">80</span>], token[<span class="hljs-number">32</span>], ch;  <span class="hljs-comment">// 扩大 token 的大小，防止溢出</span><br><span class="hljs-type">int</span> syn, p, m, n, sum;<br><span class="hljs-type">char</span> *rwtab[<span class="hljs-number">6</span>] = {<span class="hljs-string">"begin"</span>, <span class="hljs-string">"if"</span>, <span class="hljs-string">"then"</span>, <span class="hljs-string">"while"</span>, <span class="hljs-string">"do"</span>, <span class="hljs-string">"end"</span>};  <span class="hljs-comment">// 保留字表</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">scaner</span><span class="hljs-params">()</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    p = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nPlease input a string (end with '#'):\n"</span>);<br><br>    <span class="hljs-comment">// 读取输入直到#</span><br>    <span class="hljs-keyword">do</span> {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>, &amp;ch);<br>        prog[p++] = ch;<br>    } <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">'#'</span>);<br><br>    p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> {<br>        scaner();  <span class="hljs-comment">// 执行词法分析</span><br>        <span class="hljs-keyword">switch</span> (syn) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"( %-10d%5d )\n"</span>, sum, syn);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"You have input a wrong string\n"</span>);<br>                getch();<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"( %-10s%5d )\n"</span>, token, syn);<br>                <span class="hljs-keyword">break</span>;<br>        }<br>    } <span class="hljs-keyword">while</span> (syn != <span class="hljs-number">0</span>);  <span class="hljs-comment">// 直到遇到终止符号 #</span><br><br>    getch();<br>}<br><br><span class="hljs-comment">// 词法分析函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">scaner</span><span class="hljs-params">()</span> {<br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(token, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(token));  <span class="hljs-comment">// 清空token数组</span><br>    ch = prog[p++];<br>    m = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 跳过空格和换行符</span><br>    <span class="hljs-keyword">while</span> ((ch == <span class="hljs-string">' '</span>) || (ch == <span class="hljs-string">'\n'</span>)) {<br>        ch = prog[p++];<br>    }<br><br>    <span class="hljs-comment">// 处理标识符或保留字</span><br>    <span class="hljs-keyword">if</span> (((ch &gt;= <span class="hljs-string">'a'</span>) &amp;&amp; (ch &lt;= <span class="hljs-string">'z'</span>)) || ((ch &gt;= <span class="hljs-string">'A'</span>) &amp;&amp; (ch &lt;= <span class="hljs-string">'Z'</span>))) {<br>        <span class="hljs-keyword">while</span> (((ch &gt;= <span class="hljs-string">'a'</span>) &amp;&amp; (ch &lt;= <span class="hljs-string">'z'</span>)) || ((ch &gt;= <span class="hljs-string">'A'</span>) &amp;&amp; (ch &lt;= <span class="hljs-string">'Z'</span>)) || ((ch &gt;= <span class="hljs-string">'0'</span>) &amp;&amp; (ch &lt;= <span class="hljs-string">'9'</span>))) {<br>            token[m++] = ch;<br>            ch = prog[p++];<br>        }<br>        p--;  <span class="hljs-comment">// 回退一个字符</span><br>        syn = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 标识符默认值</span><br><br>        <span class="hljs-comment">// 检查是否是保留字</span><br>        <span class="hljs-keyword">for</span> (n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">6</span>; n++) {<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(token, rwtab[n]) == <span class="hljs-number">0</span>) {<br>                syn = n + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 是保留字</span><br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>    }<br>        <span class="hljs-comment">// 处理数字</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((ch &gt;= <span class="hljs-string">'0'</span>) &amp;&amp; (ch &lt;= <span class="hljs-string">'9'</span>)) {<br>        <span class="hljs-keyword">while</span> ((ch &gt;= <span class="hljs-string">'0'</span>) &amp;&amp; (ch &lt;= <span class="hljs-string">'9'</span>)) {<br>            sum = sum * <span class="hljs-number">10</span> + ch - <span class="hljs-string">'0'</span>;<br>            ch = prog[p++];<br>        }<br>        p--;  <span class="hljs-comment">// 回退一个字符</span><br>        syn = <span class="hljs-number">11</span>;  <span class="hljs-comment">// 数字</span><br>    }<br>        <span class="hljs-comment">// 处理其他符号</span><br>    <span class="hljs-keyword">else</span> {<br>        token[m++] = ch;<br>        <span class="hljs-keyword">switch</span> (ch) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'&lt;'</span>:<br>                ch = prog[p++];<br>                <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'='</span>) {<br>                    syn = <span class="hljs-number">22</span>;<br>                    token[m++] = ch;<br>                } <span class="hljs-keyword">else</span> {<br>                    syn = <span class="hljs-number">20</span>;<br>                    p--;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'&gt;'</span>:<br>                ch = prog[p++];<br>                <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'='</span>) {<br>                    syn = <span class="hljs-number">24</span>;<br>                    token[m++] = ch;<br>                } <span class="hljs-keyword">else</span> {<br>                    syn = <span class="hljs-number">23</span>;<br>                    p--;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>:<br>                ch = prog[p++];<br>                <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'+'</span>) {<br>                    syn = <span class="hljs-number">17</span>;<br>                    token[m++] = ch;<br>                } <span class="hljs-keyword">else</span> {<br>                    syn = <span class="hljs-number">13</span>;<br>                    p--;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>:<br>                ch = prog[p++];<br>                <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) {<br>                    syn = <span class="hljs-number">29</span>;<br>                    token[m++] = ch;<br>                } <span class="hljs-keyword">else</span> {<br>                    syn = <span class="hljs-number">14</span>;<br>                    p--;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'!'</span>:<br>                ch = prog[p++];<br>                <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'='</span>) {<br>                    syn = <span class="hljs-number">21</span>;<br>                    token[m++] = ch;<br>                } <span class="hljs-keyword">else</span> {<br>                    syn = <span class="hljs-number">31</span>;<br>                    p--;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'='</span>:<br>                ch = prog[p++];<br>                <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'='</span>) {<br>                    syn = <span class="hljs-number">25</span>;<br>                    token[m++] = ch;<br>                } <span class="hljs-keyword">else</span> {<br>                    syn = <span class="hljs-number">18</span>;<br>                    p--;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>: syn = <span class="hljs-number">15</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>: syn = <span class="hljs-number">16</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'('</span>: syn = <span class="hljs-number">27</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">')'</span>: syn = <span class="hljs-number">28</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'{'</span>: syn = <span class="hljs-number">5</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'}'</span>: syn = <span class="hljs-number">6</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">';'</span>: syn = <span class="hljs-number">26</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'\"'</span>: syn = <span class="hljs-number">30</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'#'</span>: syn = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">':'</span>: syn = <span class="hljs-number">17</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>: syn = <span class="hljs-number">-1</span>; <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>    token[m] = <span class="hljs-string">'\0'</span>;  <span class="hljs-comment">// 结束token字符串</span><br>}<br><br></code></pre></td></tr></tbody></table></figure>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202410142245186.png" alt="image-20241014224527945"></p>
<details> 
<summary>点击显示/隐藏</summary>
<p>这段代码是一个简单的词法分析器（Lexical Analyzer），用于解析输入字符串并将其拆分为词法单元（Token），如标识符、数字、保留字和操作符等。词法分析器是编译器前端的一部分，它读取源代码，将其分解为有意义的基本元素，供后续的语法分析阶段使用。</p>
<h3>程序的结构概述</h3>
<ul>
<li><strong>全局变量</strong>：<ul>
<li><code>prog[80]</code>: 用来存储输入的程序字符序列，最多可容纳80个字符。</li>
<li><code>token[32]</code>: 存储当前识别的词法单元（Token），最大长度为32个字符。</li>
<li><code>ch</code>: 用来存储当前读取的字符。</li>
<li><code>syn</code>: 用来表示当前识别的词法单元的类型（如保留字、标识符、操作符等）。</li>
<li><code>p</code>: 指向 <code>prog</code> 中当前读取字符的位置。</li>
<li><code>m</code>: 指向 <code>token</code> 中存储字符的位置。</li>
<li><code>n</code>: 辅助变量，用于遍历保留字表。</li>
<li><code>sum</code>: 用于处理数字时存储数值。</li>
<li><code>rwtab[6]</code>: 保留字表，包含6个保留字：<code>begin</code>, <code>if</code>, <code>then</code>, <code>while</code>, <code>do</code>, <code>end</code>。</li>
</ul>
</li>
</ul>
<h3>主要函数</h3>
<ol>
<li><p><strong><code>main</code> 函数</strong>：</p>
<ul>
<li>程序从 <code>main</code> 函数开始，首先读取用户输入的字符串并存储在 <code>prog</code> 数组中，输入以 <code>#</code> 结束。</li>
<li>然后，调用 <code>scaner</code> 函数进行词法分析。<code>scaner</code> 函数会不断返回词法单元，直到遇到 <code>#</code> 为止。</li>
<li>根据 <code>syn</code> 的值，决定如何输出词法单元，分别处理数字、保留字、标识符、符号以及错误情况。</li>
</ul>
</li>
<li><p><strong><code>scaner</code> 函数（词法分析的核心部分）</strong>：</p>
<ul>
<li><strong>步骤 1：跳过空白字符</strong>。从 <code>prog</code> 中读取字符，忽略空格和换行符。</li>
<li><strong>步骤 2：识别标识符或保留字</strong>。如果字符是字母，进入标识符或保留字识别逻辑。持续读取字母或数字字符，直到遇到非字母或非数字字符。然后检查是否是保留字，如果是，设置相应的 <code>syn</code> 值（1-6），否则 <code>syn</code> 设为 10（标识符）。</li>
<li><strong>步骤 3：识别数字</strong>。如果字符是数字，进入数字识别逻辑，构造数值并存储在 <code>sum</code> 中，最后将 <code>syn</code> 设为 11。</li>
<li><strong>步骤 4：识别符号</strong>。如果是操作符或其他符号（如 <code>+</code>、<code>-</code>、<code>&lt;</code>、<code>&gt;</code> 等），根据规则构造相应的词法单元，给出对应的 <code>syn</code> 值。部分符号（如 <code>&lt;=</code>、<code>&gt;=</code>）需要多读取一个字符进行判断。</li>
<li><strong>步骤 5：结束标记</strong>。如果遇到 <code>#</code>，将 <code>syn</code> 设为 0，表示结束。</li>
<li><strong>步骤 6：错误处理</strong>。如果遇到无法识别的字符，将 <code>syn</code> 设为 -1，并在 <code>main</code> 函数中输出错误信息。</li>
</ul>
</li>
</ol>
<h3>词法单元类型 (<code>syn</code>) 对应表：</h3>
<ul>
<li>保留字（<code>begin</code>, <code>if</code>, <code>then</code>, <code>while</code>, <code>do</code>, <code>end</code>）：1-6</li>
<li>标识符：10</li>
<li>数字：11</li>
<li>操作符和符号：<ul>
<li><code>&lt;</code>：20, <code>&lt;=</code>：22</li>
<li><code>&gt;</code>：23, <code>&gt;=</code>：24</li>
<li><code>=</code>：18, <code>==</code>：25</li>
<li><code>!</code>：31, <code>!=</code>：21</li>
<li><code>+</code>：13, <code>++</code>：17</li>
<li><code>-</code>：14, <code>--</code>：29</li>
<li><code>*</code>：15</li>
<li><code>/</code>：16</li>
<li><code>(</code>：27, <code>)</code>：28</li>
<li><code>{</code>：5, <code>}</code>：6</li>
<li><code>;</code>：26</li>
<li><code>#</code>：0 （结束标记）</li>
</ul>
</li>
<li>错误字符：<code>syn = -1</code></li>
</ul>
<h3>程序运行过程：</h3>
<ol>
<li><p><strong>输入阶段</strong>：</p>
<ul>
<li>用户输入一段以 <code>#</code> 结束的字符串，程序读取并存储在 <code>prog</code> 数组中。</li>
</ul>
</li>
<li><p><strong>词法分析阶段</strong>：</p>
<ul>
<li>程序调用 <code>scaner</code> 函数，逐个扫描字符并识别出相应的词法单元。</li>
<li><code>scaner</code> 会判断当前字符属于哪种类型：保留字、标识符、数字或符号，并赋值 <code>syn</code> 作为识别标志。</li>
<li>程序输出对应的词法单元和 <code>syn</code> 值，直到遇到 <code>#</code> 为止。</li>
</ul>
</li>
<li><p><strong>输出阶段</strong>：</p>
<ul>
<li>若为标识符或保留字，程序会输出标识符或保留字的字符串和对应的 <code>syn</code> 值。</li>
<li>若为数字，程序会输出数值和 <code>syn = 11</code>。</li>
<li>若遇到错误输入，程序会提示用户输入了错误的字符串，并终止运行。</li>
</ul>
</li>
</ol>
<h3>总结：</h3>
<p>这个程序实现了一个简单的词法分析器，能够处理保留字、标识符、数字和常见的操作符。对于初学者而言，它提供了一个理解编译器前端词法分析功能的基础框架，后续可以通过增加更多的保留字、符号或扩展错误处理来进一步完善。</p>
<h3>1. <code>memset(token, 0, sizeof(token));  // 清空token数组</code></h3>
<p><code>memset</code> 是 C 标准库中的函数，用于将内存中的某一块区域全部填充为某个值。在这行代码中：</p>
<ul>
<li><strong><code>token</code></strong> 是一个字符数组，用来存储当前正在分析的词法单元（Token）。</li>
<li><strong><code>sizeof(token)</code></strong> 表示 <code>token</code> 数组的大小，即 32 字节。</li>
<li><strong><code>memset(token, 0, sizeof(token))</code></strong> 将 <code>token</code> 数组的所有元素设置为 0，也就是将整个数组清空。</li>
</ul>
<p>在词法分析中，每次读取到新的词法单元时，需要重置 <code>token</code>，以确保不受之前词法单元的影响。</p>
<h3>2. <code>p--;  // 回退一个字符</code></h3>
<p>在词法分析过程中，程序会不断从 <code>prog</code> 数组中读取字符，<code>p</code> 是当前字符的指针（数组下标）。当 <code>scaner</code> 函数识别出一个完整的标识符、数字或符号时，通常会多读取了一个不属于该词法单元的字符（如空格、符号等），这时就需要将指针回退一个字符。</p>
<p><strong>作用</strong>：</p>
<ul>
<li>在识别标识符、数字等连续字符的词法单元时，<code>p--;</code> 确保不会跳过或漏掉字符。通过回退，可以让下次词法分析继续处理下一个未分析的字符。</li>
</ul>
<p>例如：</p>
<ul>
<li>假设输入为 <code>"abc "</code>，程序在读取 <code>"abc"</code> 时，会额外读取一个空格。因此需要回退一个字符，以便后续继续分析。</li>
</ul>
<h3>3. <code>strcmp(token, rwtab[n])  // 比较 token 和 rwtab[n]</code></h3>
<p><code>strcmp</code> 是 C 标准库中的字符串比较函数。它用来比较两个字符串的内容是否相同。</p>
<ul>
<li><strong><code>token</code></strong> 是存储当前识别的词法单元的字符数组。</li>
<li><strong><code>rwtab[n]</code></strong> 是保留字表中的一个字符串，如 <code>"begin"</code>, <code>"if"</code> 等。</li>
<li><strong><code>strcmp(token, rwtab[n])</code></strong> 会比较 <code>token</code> 和 <code>rwtab[n]</code> 是否相等。<ul>
<li>如果相等，返回 0，说明当前 <code>token</code> 是保留字；</li>
<li>如果不相等，返回非 0 值，说明 <code>token</code> 不是当前比较的保留字。</li>
</ul>
</li>
</ul>
<p>通过遍历 <code>rwtab</code> 数组中的保留字列表，可以判断当前 <code>token</code> 是否为保留字。</p>
<h3>4. <code>token[m] = '\0';  // 结束token字符串</code></h3>
<p>C 语言中的字符串以 <code>\0</code>（空字符）作为结束标志。这一行代码的作用是将 <code>token</code> 数组的最后一位设置为 <code>\0</code>，从而将它标记为一个合法的 C 字符串。</p>
<ul>
<li><strong>为什么要这样做？</strong><ul>
<li>在 C 语言中，字符串是以字符数组的形式表示的，并且字符串的结尾必须用 <code>\0</code> 来表示，否则该字符数组无法作为字符串使用。</li>
<li><code>\0</code> 确保 <code>token</code> 在后续操作（例如 <code>strcmp</code>）中可以正确处理和比较。</li>
</ul>
</li>
</ul>
<p><strong>总结</strong>：  </p>
<ul>
<li><strong><code>memset</code></strong>：清空 <code>token</code>，以防残留数据影响词法分析。</li>
<li><strong><code>p--</code></strong>：回退一个字符，确保下次分析从正确位置开始。</li>
<li><strong><code>strcmp</code></strong>：比较 <code>token</code> 是否与保留字表中的某个保留字相同。</li>
<li><strong><code>token[m] = '\0</code></strong>：将 <code>token</code> 标记为一个以 <code>\0</code> 结尾的合法 C 字符串，确保后续字符串操作可以正确进行。</li>
</ul></details>


<h3 id="2-语法分析"><a href="#2-语法分析" class="headerlink" title="2. 语法分析"></a>2. 语法分析</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> prog[<span class="hljs-number">100</span>], token[<span class="hljs-number">32</span>], ch;<br><span class="hljs-type">char</span> *rwtab[<span class="hljs-number">6</span>] = {<span class="hljs-string">"begin"</span>, <span class="hljs-string">"if"</span>, <span class="hljs-string">"then"</span>, <span class="hljs-string">"while"</span>, <span class="hljs-string">"do"</span>, <span class="hljs-string">"end"</span>};<br><span class="hljs-type">int</span> syn, p, m, n, sum, kk;<br><br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">scaner</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">lrparser</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">yucu</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">statement</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">expression</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">term</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">factor</span><span class="hljs-params">()</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    p = kk = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nPlease input a string (end with '#'): \n"</span>);<br><br>    <span class="hljs-comment">// 读入程序字符</span><br>    <span class="hljs-keyword">do</span> {<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>, &amp;ch);<br>        prog[p++] = ch;<br>    } <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">'#'</span>);<br><br>    p = <span class="hljs-number">0</span>;<br>    scaner(); <span class="hljs-comment">// 读取第一个单词符号</span><br>    lrparser(); <span class="hljs-comment">// 进行语法分析</span><br>    getch();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// LR语法分析器</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lrparser</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">1</span>) { <span class="hljs-comment">// 'begin'</span><br>        scaner();       <span class="hljs-comment">// 读下一个单词符号</span><br>        yucu();         <span class="hljs-comment">// 调用语句序列处理</span><br>        <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">6</span>) { <span class="hljs-comment">// 'end'</span><br>            scaner();<br>            <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">0</span>) { <span class="hljs-comment">// 成功</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Success!\n"</span>);<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: Expected 'end'!\n"</span>);<br>        }<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: Expected 'begin'!\n"</span>);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 处理语句序列</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">yucu</span><span class="hljs-params">()</span> {<br>    statement();   <span class="hljs-comment">// 调用语句处理</span><br>    <span class="hljs-keyword">while</span> (syn == <span class="hljs-number">26</span>) { <span class="hljs-comment">// ';'</span><br>        scaner();   <span class="hljs-comment">// 读下一个单词符号</span><br>        <span class="hljs-keyword">if</span> (syn != <span class="hljs-number">6</span>) { <span class="hljs-comment">// 如果不是'end'，继续处理下一个语句</span><br>            statement();<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 处理单条语句</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">statement</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">10</span>) { <span class="hljs-comment">// 标识符</span><br>        scaner(); <span class="hljs-comment">// 读下一个单词符号</span><br>        <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">18</span>) { <span class="hljs-comment">// ':='</span><br>            scaner(); <span class="hljs-comment">// 读下一个单词符号</span><br>            expression(); <span class="hljs-comment">// 处理表达式</span><br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: Expected ':='\n"</span>);<br>            kk = <span class="hljs-number">1</span>;<br>        }<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: Invalid statement!\n"</span>);<br>        kk = <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 处理表达式</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">expression</span><span class="hljs-params">()</span> {<br>    term(); <span class="hljs-comment">// 处理项</span><br>    <span class="hljs-keyword">while</span> (syn == <span class="hljs-number">13</span> || syn == <span class="hljs-number">14</span>) { <span class="hljs-comment">// '+'或'-'</span><br>        scaner(); <span class="hljs-comment">// 读下一个单词符号</span><br>        term();   <span class="hljs-comment">// 处理项</span><br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 处理项</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">term</span><span class="hljs-params">()</span> {<br>    factor(); <span class="hljs-comment">// 处理因子</span><br>    <span class="hljs-keyword">while</span> (syn == <span class="hljs-number">15</span> || syn == <span class="hljs-number">16</span>) { <span class="hljs-comment">// '*'或'/'</span><br>        scaner(); <span class="hljs-comment">// 读下一个单词符号</span><br>        factor(); <span class="hljs-comment">// 处理因子</span><br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 处理因子</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">factor</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">10</span> || syn == <span class="hljs-number">11</span>) { <span class="hljs-comment">// 标识符或数字</span><br>        scaner(); <span class="hljs-comment">// 读下一个单词符号</span><br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">27</span>) { <span class="hljs-comment">// '('</span><br>        scaner();<br>        expression(); <span class="hljs-comment">// 处理表达式</span><br>        <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">28</span>) { <span class="hljs-comment">// ')'</span><br>            scaner(); <span class="hljs-comment">// 读下一个单词符号</span><br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: Expected ')'\n"</span>);<br>            kk = <span class="hljs-number">1</span>;<br>        }<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: Invalid factor!\n"</span>);<br>        kk = <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 词法分析器</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">scaner</span><span class="hljs-params">()</span> {<br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(token, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(token)); <span class="hljs-comment">// 清空token</span><br>    m = <span class="hljs-number">0</span>;<br>    ch = prog[p++];<br><br>    <span class="hljs-keyword">while</span> (ch == <span class="hljs-string">' '</span>) ch = prog[p++]; <span class="hljs-comment">// 跳过空格</span><br><br>    <span class="hljs-keyword">if</span> ((ch &gt;= <span class="hljs-string">'a'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'z'</span>) || (ch &gt;= <span class="hljs-string">'A'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'Z'</span>)) {<br>        <span class="hljs-comment">// 处理标识符</span><br>        <span class="hljs-keyword">while</span> ((ch &gt;= <span class="hljs-string">'a'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'z'</span>) || (ch &gt;= <span class="hljs-string">'A'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'Z'</span>) || (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>)) {<br>            token[m++] = ch;<br>            ch = prog[p++];<br>        }<br>        p--; <span class="hljs-comment">// 回退</span><br>        syn = <span class="hljs-number">10</span>; <span class="hljs-comment">// 默认是标识符</span><br>        <span class="hljs-keyword">for</span> (n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">6</span>; n++) {<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(token, rwtab[n]) == <span class="hljs-number">0</span>) {<br>                syn = n + <span class="hljs-number">1</span>; <span class="hljs-comment">// 是保留字</span><br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {<br>        <span class="hljs-comment">// 处理数字</span><br>        <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {<br>            sum = sum * <span class="hljs-number">10</span> + ch - <span class="hljs-string">'0'</span>;<br>            ch = prog[p++];<br>        }<br>        p--; <span class="hljs-comment">// 回退</span><br>        syn = <span class="hljs-number">11</span>; <span class="hljs-comment">// 数字</span><br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-comment">// 处理运算符和分隔符</span><br>        <span class="hljs-keyword">switch</span> (ch) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'&lt;'</span>: ch = prog[p++]; syn = (ch == <span class="hljs-string">'='</span>) ? <span class="hljs-number">22</span> : (ch == <span class="hljs-string">'&gt;'</span>) ? <span class="hljs-number">21</span> : <span class="hljs-number">20</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'&gt;'</span>: ch = prog[p++]; syn = (ch == <span class="hljs-string">'='</span>) ? <span class="hljs-number">24</span> : <span class="hljs-number">23</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">':'</span>: ch = prog[p++]; syn = (ch == <span class="hljs-string">'='</span>) ? <span class="hljs-number">18</span> : <span class="hljs-number">17</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>: syn = <span class="hljs-number">13</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>: syn = <span class="hljs-number">14</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>: syn = <span class="hljs-number">15</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>: syn = <span class="hljs-number">16</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'('</span>: syn = <span class="hljs-number">27</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">')'</span>: syn = <span class="hljs-number">28</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'='</span>: syn = <span class="hljs-number">25</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">';'</span>: syn = <span class="hljs-number">26</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'#'</span>: syn = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>: syn = <span class="hljs-number">-1</span>; <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>}<br><br></code></pre></td></tr></tbody></table></figure>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202410142247987.png" alt="image-20241014224744716"></p>
<p><img src="https://jinmajue-typora-picture-bed.oss-cn-zhangjiakou.aliyuncs.com/202410142248871.png" alt="image-20241014224842665"></p>
<details>
<summary>点击显示/隐藏</summary>
<p>这个程序实现了一个简单的 <strong>LR语法分析器</strong>，用来分析包含保留字、标识符、数字和基本算术表达式的小型程序。语法分析器通过词法分析（<code>scaner</code> 函数）解析输入的字符流，并基于一定的语法规则逐步匹配输入内容，检测输入是否符合语言定义的语法结构。</p>
<p>下面我将详细解释程序的功能和运行过程：</p>
<h3>1. <strong>运行过程概述</strong>：</h3>
<ul>
<li>程序首先读入一个以 <code>#</code> 结尾的字符串，该字符串表示一个简化的程序。</li>
<li>程序通过词法分析（<code>scaner</code> 函数）将输入字符流解析成词法单元（Token），词法单元可以是标识符、保留字、数字或符号。</li>
<li>然后通过语法分析器（<code>lrparser</code> 函数），依据一个预定的语法规则，判断输入是否符合特定的语法。如果输入符合语法规则，输出 "Success!"，否则输出相应的错误信息。</li>
</ul>
<h3>2. <strong>主要函数介绍</strong>：</h3>
<h4><strong>主函数 <code>main</code></strong></h4>
<pre><code class="language-c">int main() {
    p = kk = 0;
    printf("\nPlease input a string (end with '#'): \n");
    do {
        scanf("%c", &amp;ch);
        prog[p++] = ch;
    } while (ch != '#');
    p = 0;
    scaner(); // 读取第一个单词符号
    lrparser(); // 进行语法分析
    getch();
    return 0;
}
</code></pre>
<ul>
<li><strong><code>p</code></strong> 和 <strong><code>kk</code></strong> 初始化为 0，<code>p</code> 是指向当前字符的索引，<code>kk</code> 是错误标志变量。</li>
<li>程序通过 <code>scanf</code> 一次读取一个字符，直到遇到 <code>#</code>。读入的字符保存在 <code>prog</code> 数组中。</li>
<li>调用 <code>scaner()</code> 函数进行词法分析，从输入字符串中解析出第一个词法单元。</li>
<li>调用 <code>lrparser()</code> 函数进行 LR 语法分析，分析输入的句子是否符合语法规则。</li>
</ul>
<h4><strong>LR 语法分析器 <code>lrparser</code></strong></h4>
<pre><code class="language-c">int lrparser() {
    if (syn == 1) { // 'begin'
        scaner();       // 读下一个单词符号
        yucu();         // 调用语句序列处理
        if (syn == 6) { // 'end'
            scaner();
            if (syn == 0) { // 成功
                printf("Success!\n");
            }
        } else {
            printf("Error: Expected 'end'!\n");
        }
    } else {
        printf("Error: Expected 'begin'!\n");
    }
    return 0;
}
</code></pre>
<ul>
<li><code>lrparser</code> 是语法分析器的核心。它判断输入的程序是否以 <code>begin</code> 开头，并调用 <code>yucu()</code> 函数处理语句序列。</li>
<li>如果匹配到 <code>begin</code> 后，解析到 <code>end</code>，且 <code>end</code> 后没有其他多余的字符（即遇到 <code>#</code>），表示语法分析成功，输出 "Success!"。</li>
<li>如果未能正确匹配到 <code>begin</code> 或 <code>end</code>，则输出相应的错误信息。</li>
</ul>
<h4><strong>处理语句序列 <code>yucu</code></strong></h4>
<pre><code class="language-c">int yucu() {
    statement();   // 调用语句处理
    while (syn == 26) { // ';'
        scaner();   // 读下一个单词符号
        if (syn != 6) { // 如果不是'end'，继续处理下一个语句
            statement();
        }
    }
    return 0;
}
</code></pre>
<ul>
<li><code>yucu</code> 负责处理一连串的语句。它首先调用 <code>statement()</code> 处理一条语句，然后检查是否有分号（<code>;</code>）分隔的多条语句。</li>
<li>每当遇到分号时，继续处理下一条语句，直到遇到 <code>end</code> 或没有更多语句。</li>
</ul>
<h4><strong>处理单条语句 <code>statement</code></strong></h4>
<pre><code class="language-c">int statement() {
    if (syn == 10) { // 标识符
        scaner(); // 读下一个单词符号
        if (syn == 18) { // ':='
            scaner(); // 读下一个单词符号
            expression(); // 处理表达式
        } else {
            printf("Error: Expected ':='\n");
            kk = 1;
        }
    } else {
        printf("Error: Invalid statement!\n");
        kk = 1;
    }
    return 0;
}
</code></pre>
<ul>
<li><code>statement</code> 负责处理单个语句。它要求语句必须是 <strong>标识符（syn = 10）</strong>，并且接着是赋值运算符 <code>:=</code>（syn = 18）。</li>
<li>如果语句格式正确，则调用 <code>expression()</code> 处理右侧的表达式。</li>
<li>如果语法不正确，会输出相应的错误信息，并设置错误标志 <code>kk</code>。</li>
</ul>
<h4><strong>处理表达式 <code>expression</code></strong></h4>
<pre><code class="language-c">int expression() {
    term(); // 处理项
    while (syn == 13 || syn == 14) { // '+'或'-'
        scaner(); // 读下一个单词符号
        term();   // 处理项
    }
    return 0;
}
</code></pre>
<ul>
<li><code>expression</code> 负责处理一个由 <strong>项（term）</strong> 组成的表达式。项之间可以由 <code>+</code> 或 <code>-</code> 连接。</li>
<li>它首先调用 <code>term()</code> 处理一个项，然后检查是否有 <code>+</code> 或 <code>-</code>，如果有则继续处理下一个项。</li>
</ul>
<h4><strong>处理项 <code>term</code></strong></h4>
<pre><code class="language-c">int term() {
    factor(); // 处理因子
    while (syn == 15 || syn == 16) { // '*'或'/'
        scaner(); // 读下一个单词符号
        factor(); // 处理因子
    }
    return 0;
}
</code></pre>
<ul>
<li><code>term</code> 处理一个由 <strong>因子（factor）</strong> 组成的项，项之间可以由 <code>*</code> 或 <code>/</code> 连接。</li>
<li>它首先调用 <code>factor()</code> 处理一个因子，然后检查是否有 <code>*</code> 或 <code>/</code>，如果有则继续处理下一个因子。</li>
</ul>
<h4><strong>处理因子 <code>factor</code></strong></h4>
<pre><code class="language-c">int factor() {
    if (syn == 10 || syn == 11) { // 标识符或数字
        scaner(); // 读下一个单词符号
    } else if (syn == 27) { // '('
        scaner();
        expression(); // 处理表达式
        if (syn == 28) { // ')'
            scaner(); // 读下一个单词符号
        } else {
            printf("Error: Expected ')'\n");
            kk = 1;
        }
    } else {
        printf("Error: Invalid factor!\n");
        kk = 1;
    }
    return 0;
}
</code></pre>
<ul>
<li><code>factor</code> 处理一个因子，因子可以是 <strong>标识符、数字</strong> 或 <strong>带括号的表达式</strong>。</li>
<li>如果遇到 <code>(</code>，则递归调用 <code>expression()</code> 处理括号内的表达式，并要求最后必须遇到 <code>)</code>。</li>
<li>如果遇到的不是标识符、数字或有效括号表达式，输出错误信息。</li>
</ul>
<h3>3. <strong>词法分析器 <code>scaner</code></strong></h3>
<pre><code class="language-c">void scaner() {
    sum = 0;
    memset(token, 0, sizeof(token)); // 清空token
    m = 0;
    ch = prog[p++];
    while (ch == ' ') ch = prog[p++]; // 跳过空格
    if ((ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') || (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z')) {
        // 处理标识符
        while ((ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') || (ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z') || (ch &gt;= '0' &amp;&amp; ch &lt;= '9')) {
            token[m++] = ch;
            ch = prog[p++];
        }
        p--; // 回退
        syn = 10; // 默认是标识符
        for (n = 0; n &lt; 6; n++) {
            if (strcmp(token, rwtab[n]) == 0) {
                syn = n + 1; // 是保留字
                break;
            }
        }
    } else if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {
        // 处理数字
        while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {
            sum = sum * 10 + ch - '0';
            ch = prog[p++];
        }
        p--; // 回退
        syn = 11; // 数字
    } else {
        // 处理运算符和分隔符
        switch (ch) {
            case '&lt;': ch = prog[p++]; syn = (ch == '=') ? 22 : (ch == '&gt;') ? 21 : 20; break;
            case '&gt;': ch = prog[p++]; syn = (ch
 == '=') ? 24 : 23; break;
        case ':': ch = prog[p++]; syn = (ch == '=') ? 18 : 17;break;
            case '+': syn = 13; break;
            case '-': syn = 14; break;
            case '*': syn = 15; break;
            case '/': syn = 16; break;
            case '(': syn = 27; break;
            case ')': syn = 28; break;
            case '=': syn = 25; break;
            case ';': syn = 26; break;
            case '#': syn = 0; break;
            default: syn = -1; break;
        }
    }
}</code></pre><ul>
<li><code>scaner()</code> 函数是词法分析器，用来从输入中读取下一个词法单元并根据类型给 <code>syn</code> 赋值。</li>
<li>它会处理空格，跳过空格后继续分析单词。</li>
<li><strong>标识符</strong>：由字母和数字组成，默认 <code>syn = 10</code>，并检查是否为保留字（如 <code>begin</code>、<code>if</code> 等）。</li>
<li><strong>数字</strong>：连续的数字序列，<code>syn = 11</code>。</li>
<li><strong>运算符和符号</strong>：通过 <code>switch</code> 语句处理常见的运算符和分隔符（如 <code>+</code>, <code>-</code>, <code>*</code>, <code>:</code>, <code>#</code> 等）。</li>
</ul>
<h3>4. <strong>难点解释</strong>：</h3>
<ul>
<li><strong>词法分析中的回退 <code>p--</code></strong>：在处理标识符或数字时，会多读入一个字符（可能是下一个单词的开始），因此需要将指针 <code>p</code> 回退一个，以便下次分析能正确从未处理的字符开始。</li>
<li><strong>语法分析中的递归调用</strong>：语法分析器通过递归调用（如 <code>expression</code> 调用 <code>term</code>，<code>term</code> 调用 <code>factor</code>）来处理更复杂的语法结构。递归调用是匹配嵌套语法（如括号中的表达式）的常用方式。</li>
</ul>
<h3>总结：</h3>
<ul>
<li>这个程序通过词法分析将输入分割成词法单元，再通过语法分析判断词法单元是否符合预定的语法规则。</li>
<li>语法分析器采用递归下降法处理保留字、赋值语句、算术表达式等简单语法结构。</li>
<li>输入若符合语法规则，程序输出 <code>Success!</code>，否则输出错误信息。</li>
</ul></details>

<h3 id="3-语义分析"><a href="#3-语义分析" class="headerlink" title="3.语义分析"></a>3.语义分析</h3><figure class="highlight c"><table><tbody><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// By Jin Majue</span><br><span class="hljs-comment">// at 2024/12/25</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span> <span class="hljs-comment">// 提供 getch() 等控制台相关功能</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> <span class="hljs-comment">// 提供 malloc()、exit() 等内存分配和退出函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> <span class="hljs-comment">// 提供标准输入输出功能</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> <span class="hljs-comment">// 提供字符串操作功能</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span> <span class="hljs-comment">// 提供布尔类型</span></span><br><br><span class="hljs-comment">// 定义常量</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_PROG_LEN 100  <span class="hljs-comment">// 最大程序长度</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SYM_LEN 100   <span class="hljs-comment">// 符号表最大容量</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_TOKEN_LEN 8   <span class="hljs-comment">// 最大单词长度-</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_QUAD 20       <span class="hljs-comment">// 最大四元式数量</span></span><br><br><span class="hljs-comment">// 全局变量</span><br><span class="hljs-type">char</span> symbols[MAX_SYM_LEN][MAX_TOKEN_LEN]; <span class="hljs-comment">// 符号表，存储所有标识符</span><br><span class="hljs-type">int</span> symbol_count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 符号表中的标识符数量</span><br><span class="hljs-type">char</span> prog[MAX_PROG_LEN]; <span class="hljs-comment">// 存储程序的输入</span><br><span class="hljs-type">char</span> token[MAX_TOKEN_LEN]; <span class="hljs-comment">// 存储当前词法单元</span><br><span class="hljs-type">char</span> ch; <span class="hljs-comment">// 当前读取的字符</span><br><span class="hljs-type">char</span> *rwtab[<span class="hljs-number">6</span>] = {<span class="hljs-string">"begin"</span>, <span class="hljs-string">"if"</span>, <span class="hljs-string">"then"</span>, <span class="hljs-string">"while"</span>, <span class="hljs-string">"do"</span>, <span class="hljs-string">"end"</span>}; <span class="hljs-comment">// 保留字表</span><br><span class="hljs-type">int</span> syn, p, m, n, sum;<br><span class="hljs-type">int</span> q; <span class="hljs-comment">// 词法分析和语法分析的状态变量</span><br><span class="hljs-type">int</span> temp_count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 临时变量计数器</span><br><br><span class="hljs-comment">// 添加新的错误处理状态变量</span><br><span class="hljs-type">bool</span> has_error = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 用于跟踪当前输入是否有错误</span><br><span class="hljs-comment">// 四元式结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> {</span><br>    <span class="hljs-type">char</span> result[MAX_TOKEN_LEN]; <span class="hljs-comment">// 结果</span><br>    <span class="hljs-type">char</span> arg1[MAX_TOKEN_LEN];   <span class="hljs-comment">// 操作数1</span><br>    <span class="hljs-type">char</span> op[MAX_TOKEN_LEN];     <span class="hljs-comment">// 运算符</span><br>    <span class="hljs-type">char</span> arg2[MAX_TOKEN_LEN];   <span class="hljs-comment">// 操作数2</span><br>} quad[MAX_QUAD]; <span class="hljs-comment">// 四元式数组</span><br><br><span class="hljs-comment">// 函数声明</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_defined</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span>; <span class="hljs-comment">// 检查变量是否已定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">define</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span>; <span class="hljs-comment">// 定义新变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">scaner</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 词法分析器</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">factor</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 解析因子</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">term</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 解析项</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">expression</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 解析表达式</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">statement</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 解析单个语句</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">parse_statements</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 解析多个语句</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lrparser</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 递归下降语法分析</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">new_temp</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 生成新临时变量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">emit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* result, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* arg1, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* op, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* arg2)</span>; <span class="hljs-comment">// 生成四元式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg)</span>; <span class="hljs-comment">// 错误处理</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">reset_state</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 初始化状态</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>        reset_state();  <span class="hljs-comment">// 完全重置所有状态</span><br>        has_error = <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nPlease input a string (end with '#', or type 'exit#' to quit): "</span>);<br><br>        <span class="hljs-comment">// 清空输入缓冲区</span><br>        fflush(<span class="hljs-built_in">stdin</span>);<br><br>        <span class="hljs-comment">// 读取输入</span><br>        p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (p &lt; MAX_PROG_LEN - <span class="hljs-number">1</span>) {<br>            ch = getchar();<br>            <span class="hljs-keyword">if</span> (ch == EOF || ch == <span class="hljs-string">'#'</span>) {<br>                prog[p++] = <span class="hljs-string">'#'</span>;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>            prog[p++] = ch;<br>        }<br>        prog[p] = <span class="hljs-string">'\0'</span>;<br><br>        <span class="hljs-comment">// 去除开头的空白字符</span><br>        <span class="hljs-type">char</span> *trimmed = prog;<br>        <span class="hljs-keyword">while</span> (*trimmed == <span class="hljs-string">' '</span> || *trimmed == <span class="hljs-string">'\n'</span> || *trimmed == <span class="hljs-string">'\t'</span> || *trimmed == <span class="hljs-string">'\r'</span>) {<br>            trimmed++;<br>        }<br><br>        <span class="hljs-comment">// 检查是否是退出命令</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(trimmed, <span class="hljs-string">"exit#"</span>, <span class="hljs-number">5</span>) == <span class="hljs-number">0</span>) {<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Exiting...\n"</span>);<br>            <span class="hljs-keyword">break</span>;<br>        }<br><br>        <span class="hljs-comment">// 重置分析起始位置</span><br>        p = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 开始分析</span><br>        scaner();<br>        lrparser();<br><br>        <span class="hljs-comment">// 只有在没有错误时才输出四元式</span><br>        <span class="hljs-keyword">if</span> (!has_error &amp;&amp; q &gt; <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; q; i++) {<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"(%d) %s = %s %s %s \n"</span>, i+<span class="hljs-number">1</span>,<br>                       quad[i].result, quad[i].arg1,<br>                       quad[i].op, quad[i].arg2);<br>            }<br>        }<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 修改 error 函数，简化错误处理</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg)</span> {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error: %s\n"</span>, msg);<br>    has_error = <span class="hljs-literal">true</span>;<br>}<br><br><span class="hljs-comment">// 修改 reset_state 函数确保完全重置</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">reset_state</span><span class="hljs-params">()</span> {<br>    q = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 重置四元式计数器</span><br>    p = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 重置输入指针</span><br>    temp_count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 重置临时变量计数器</span><br>    symbol_count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 重置符号表计数器</span><br>    has_error = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 重置错误标志</span><br>    syn = <span class="hljs-number">-1</span>;       <span class="hljs-comment">// 重置词法分析状态</span><br>    ch = <span class="hljs-string">' '</span>;       <span class="hljs-comment">// 重置当前字符</span><br><br>    <span class="hljs-comment">// 清空所有数据结构</span><br>    <span class="hljs-built_in">memset</span>(symbols, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(symbols));<br>    <span class="hljs-built_in">memset</span>(prog, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(prog));<br>    <span class="hljs-built_in">memset</span>(quad, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(quad));<br>    <span class="hljs-built_in">memset</span>(token, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(token));<br>}<br><br><span class="hljs-comment">// 修改 lrparser 函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lrparser</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (syn != <span class="hljs-number">1</span>) {  <span class="hljs-comment">// 不是 begin</span><br>        error(<span class="hljs-string">"Missing 'begin'!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br><br>    scaner();<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    parse_statements();<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (syn != <span class="hljs-number">6</span>) {  <span class="hljs-comment">// 不是 end</span><br>        error(<span class="hljs-string">"Missing 'end'!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br><br>    scaner();<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">0</span>) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Success!\n"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        error(<span class="hljs-string">"Unexpected token after 'end'"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br>}<br><br><span class="hljs-comment">// 修改各个解析函数，添加错误检查</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">parse_statements</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">while</span> (syn == <span class="hljs-number">10</span>) {<br>        statement();<br>        <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>        <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">26</span>) {<br>            scaner();<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// 修改语句分析器，添加更好的错误恢复</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">statement</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">char</span> tt[MAX_TOKEN_LEN], eplace[MAX_TOKEN_LEN];<br><br>    <span class="hljs-keyword">if</span> (syn != <span class="hljs-number">10</span>) {<br>        error(<span class="hljs-string">"Expected identifier!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br><br>    <span class="hljs-built_in">strcpy</span>(tt, token);<br>    <span class="hljs-keyword">if</span> (!is_defined(tt)) {<br>        define(tt);<br>    }<br><br>    scaner();<br>    <span class="hljs-keyword">if</span> (syn != <span class="hljs-number">18</span>) {<br>        error(<span class="hljs-string">"Missing ':='!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br><br>    scaner();<br>    <span class="hljs-type">char</span>* expr_result = expression();<br><br>    <span class="hljs-keyword">if</span> (!has_error &amp;&amp; expr_result != <span class="hljs-literal">NULL</span>) {<br>        emit(tt, expr_result, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>);<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br><span class="hljs-comment">// 修改表达式解析函数，添加错误检查</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">expression</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span>* eplace = term();<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">while</span> (syn == <span class="hljs-number">13</span> || syn == <span class="hljs-number">14</span>) {<br>        <span class="hljs-type">char</span> op[MAX_TOKEN_LEN];<br>        <span class="hljs-built_in">strcpy</span>(op, (syn == <span class="hljs-number">13</span>) ? <span class="hljs-string">"+"</span> : <span class="hljs-string">"-"</span>);<br>        scaner();<br>        <span class="hljs-type">char</span>* ep2 = term();<br>        <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-type">char</span>* temp = new_temp();<br>        emit(temp, eplace, op, ep2);<br>        eplace = temp;<br>    }<br>    <span class="hljs-keyword">return</span> eplace;<br>}<br><br><span class="hljs-comment">// 解析项</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">term</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">char</span>* eplace = factor(); <span class="hljs-comment">// 解析因子</span><br>    <span class="hljs-keyword">while</span> (syn == <span class="hljs-number">15</span> || syn == <span class="hljs-number">16</span>) { <span class="hljs-comment">// '*' 或 '/'</span><br>        <span class="hljs-type">char</span> op[MAX_TOKEN_LEN];<br>        <span class="hljs-built_in">strcpy</span>(op, (syn == <span class="hljs-number">15</span>) ? <span class="hljs-string">"*"</span> : <span class="hljs-string">"/"</span>);<br>        scaner();<br>        <span class="hljs-type">char</span>* ep2 = factor(); <span class="hljs-comment">// 解析下一个因子</span><br>        <span class="hljs-type">char</span>* temp = new_temp(); <span class="hljs-comment">// 生成临时变量</span><br>        emit(temp, eplace, op, ep2); <span class="hljs-comment">// 生成四元式</span><br>        eplace = temp; <span class="hljs-comment">// 更新结果变量</span><br>    }<br>    <span class="hljs-keyword">return</span> eplace;<br>}<br><br><span class="hljs-comment">// 修改 factor 函数</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">factor</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">char</span>* fplace = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(MAX_TOKEN_LEN);<br>    <span class="hljs-keyword">if</span> (!fplace) {<br>        error(<span class="hljs-string">"Memory allocation failed!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    }<br><br>    <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">10</span>) {  <span class="hljs-comment">// 标识符</span><br>        <span class="hljs-keyword">if</span> (!is_defined(token)) {<br>            <span class="hljs-type">char</span> msg[MAX_TOKEN_LEN + <span class="hljs-number">50</span>];<br>            <span class="hljs-built_in">sprintf</span>(msg, <span class="hljs-string">"Variable '%s' is not defined!"</span>, token);<br>            error(msg);<br>            <span class="hljs-built_in">free</span>(fplace);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        }<br>        <span class="hljs-built_in">strcpy</span>(fplace, token);<br>        scaner();<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">11</span>) {  <span class="hljs-comment">// 数字</span><br>        <span class="hljs-built_in">sprintf</span>(fplace, <span class="hljs-string">"%d"</span>, sum);<br>        scaner();<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (syn == <span class="hljs-number">27</span>) {  <span class="hljs-comment">// 左括号</span><br>        scaner();<br>        <span class="hljs-type">char</span>* expr_result = expression();<br>        <span class="hljs-keyword">if</span> (has_error || !expr_result) {<br>            <span class="hljs-built_in">free</span>(fplace);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        }<br>        <span class="hljs-keyword">if</span> (syn != <span class="hljs-number">28</span>) {  <span class="hljs-comment">// 缺少右括号</span><br>            error(<span class="hljs-string">"Missing ')'!"</span>);<br>            <span class="hljs-built_in">free</span>(fplace);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        }<br>        <span class="hljs-built_in">strcpy</span>(fplace, expr_result);<br>        scaner();<br>    } <span class="hljs-keyword">else</span> {<br>        error(<span class="hljs-string">"Syntax error in factor!"</span>);<br>        <span class="hljs-built_in">free</span>(fplace);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    }<br><br>    <span class="hljs-keyword">return</span> fplace;<br>}<br><br><span class="hljs-comment">// 检查变量是否已定义</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">is_defined</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span> {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; symbol_count; i++) {<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(symbols[i], name) == <span class="hljs-number">0</span>) {<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        }<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>}<br><br><span class="hljs-comment">// 定义新变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">define</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span> {<br>    <span class="hljs-keyword">if</span> (symbol_count &lt; MAX_SYM_LEN) {<br>        <span class="hljs-built_in">strcpy</span>(symbols[symbol_count++], name);<br>    } <span class="hljs-keyword">else</span> {<br>        error(<span class="hljs-string">"Symbol table overflow!"</span>);<br>    }<br>}<br><br><span class="hljs-comment">// 生成新临时变量</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">new_temp</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">char</span>* temp = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(MAX_TOKEN_LEN);<br>    <span class="hljs-built_in">sprintf</span>(temp, <span class="hljs-string">"t%d"</span>, ++temp_count); <span class="hljs-comment">// 临时变量格式为 t1, t2, ...</span><br>    <span class="hljs-keyword">return</span> temp;<br>}<br><br><span class="hljs-comment">// 修改 scaner 函数，添加错误状态检查</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">scaner</span><span class="hljs-params">()</span> {<br>    <span class="hljs-keyword">if</span> (has_error) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 如果有错误，不继续扫描</span><br><br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(token, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(token));<br>    m = <span class="hljs-number">0</span>;<br>    ch = prog[p++];<br><br>    <span class="hljs-keyword">while</span> (ch == <span class="hljs-string">' '</span> || ch == <span class="hljs-string">'\n'</span> || ch == <span class="hljs-string">'\r'</span> || ch == <span class="hljs-string">'\t'</span>) {<br>        ch = prog[p++];<br>    }<br><br>    <span class="hljs-keyword">if</span> ((ch &gt;= <span class="hljs-string">'a'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'z'</span>) || (ch &gt;= <span class="hljs-string">'A'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'Z'</span>)) {<br>        <span class="hljs-keyword">while</span> ((ch &gt;= <span class="hljs-string">'a'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'z'</span>) || (ch &gt;= <span class="hljs-string">'A'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'Z'</span>) || (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>)) {<br>            token[m++] = ch;<br>            ch = prog[p++];<br>        }<br>        p--;<br>        token[m] = <span class="hljs-string">'\0'</span>;<br>        syn = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span> (n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">6</span>; n++) {<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(token, rwtab[n]) == <span class="hljs-number">0</span>) {<br>                syn = n + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            }<br>        }<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {<br>        <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) {<br>            sum = sum * <span class="hljs-number">10</span> + ch - <span class="hljs-string">'0'</span>;<br>            ch = prog[p++];<br>        }<br>        p--;<br>        syn = <span class="hljs-number">11</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">switch</span> (ch) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'&lt;'</span>: syn = (prog[p] == <span class="hljs-string">'='</span>) ? (p++, <span class="hljs-number">22</span>) : <span class="hljs-number">20</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'&gt;'</span>: syn = (prog[p] == <span class="hljs-string">'='</span>) ? (p++, <span class="hljs-number">24</span>) : <span class="hljs-number">23</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">':'</span>: syn = (prog[p] == <span class="hljs-string">'='</span>) ? (p++, <span class="hljs-number">18</span>) : <span class="hljs-number">17</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>: syn = <span class="hljs-number">13</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>: syn = <span class="hljs-number">14</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>: syn = <span class="hljs-number">15</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>: syn = <span class="hljs-number">16</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'('</span>: syn = <span class="hljs-number">27</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">')'</span>: syn = <span class="hljs-number">28</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">';'</span>: syn = <span class="hljs-number">26</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'#'</span>: syn = <span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>: syn = <span class="hljs-number">-1</span>; <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>}<br><br><span class="hljs-comment">// 生成四元式</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">emit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* result, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* arg1, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* op, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* arg2)</span> {<br>    <span class="hljs-built_in">strcpy</span>(quad[q].result, result);<br>    <span class="hljs-built_in">strcpy</span>(quad[q].arg1, arg1);<br>    <span class="hljs-built_in">strcpy</span>(quad[q].op, op);<br>    <span class="hljs-built_in">strcpy</span>(quad[q].arg2, arg2);<br>    q++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>
<p>这段代码实现了一个简易的编译器前端，完成了词法分析、语法分析，并生成了四元式中间代码，适用于一个简单的编程语言。下面从程序结构、作用和运行流程几个方面进行详细讲解：</p>
<hr>
<h3 id="一、程序结构"><a href="#一、程序结构" class="headerlink" title="一、程序结构"></a><strong>一、程序结构</strong></h3><ol>
<li><strong>头文件与宏定义</strong><ul>
<li>包含了标准库（如 <code>stdio.h</code>, <code>stdlib.h</code>, <code>string.h</code> 等）和自定义宏，定义了程序中使用的常量，如最大程序长度、符号表大小等。</li>
</ul>
</li>
<li><strong>全局变量</strong><ul>
<li><strong><code>prog</code> 和 <code>token</code></strong>: 存储输入的程序代码和当前处理的词法单元。</li>
<li><strong><code>quad</code></strong>: 用于存储生成的四元式中间代码。</li>
<li><strong><code>symbols</code></strong>: 记录变量的符号表，用于变量定义和检查。</li>
<li><strong><code>syn</code></strong>: 标识当前词法单元的类别，如关键字、标识符等。</li>
</ul>
</li>
<li><strong>辅助函数</strong><ul>
<li>词法分析函数：<code>scaner</code>。</li>
<li>语法分析函数：<code>lrparser</code>、<code>statement</code>、<code>expression</code> 等。</li>
<li>符号表操作：<code>is_defined</code> 和 <code>define</code>。</li>
<li>四元式生成函数：<code>emit</code>。</li>
<li>错误处理：<code>error</code>。</li>
</ul>
</li>
<li><strong>核心逻辑</strong><ul>
<li>实现了一个递归下降解析器，能够解析一个包含赋值语句和表达式的简单语言。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="二、程序作用"><a href="#二、程序作用" class="headerlink" title="二、程序作用"></a><strong>二、程序作用</strong></h3><ol>
<li><strong>词法分析</strong><ul>
<li>读取用户输入的程序代码，将其分割成<strong>标识符、数字、关键字、运算符等</strong>词法单元。</li>
</ul>
</li>
<li><strong>语法分析</strong><ul>
<li>检查代码是否符合指定的语法规则。例如：<ul>
<li>必须以 <code>begin</code> 开头，以 <code>end</code> 结尾。</li>
<li>每条语句的结束需要分号 <code>;</code>。</li>
<li>表达式和赋值的语法需要符合规则。</li>
</ul>
</li>
</ul>
</li>
<li><strong>生成四元式中间代码</strong><ul>
<li>将输入程序转换为类似于汇编指令的四元式中间代码，便于进一步优化或翻译为目标机器码。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、运行流程"><a href="#三、运行流程" class="headerlink" title="三、运行流程"></a><strong>三、运行流程</strong></h3><ol>
<li><p><strong>用户输入代码</strong></p>
<ul>
<li><p>用户输入一个以 <code>#</code> 结尾的程序代码字符串。</p>
</li>
<li><p>示例输入：</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><code class="hljs css">begin<br><span class="hljs-selector-tag">a</span> := <span class="hljs-number">5</span>;<br><span class="hljs-selector-tag">b</span> := a + <span class="hljs-number">3</span>;<br>end#<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
</li>
<li><p><strong>词法分析</strong></p>
<ul>
<li><code>scaner</code> 逐字符扫描输入，识别出关键字 <code>begin</code>、标识符 <code>a</code>、数字 <code>5</code> 等，并赋予不同的 <code>syn</code> 值。</li>
<li>标识符和数字会存储在 <code>token</code> 中，运算符直接根据符号分类。</li>
</ul>
</li>
<li><p><strong>语法分析</strong></p>
<ul>
<li><p>调用 </p>
<figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lrparser</span><br></code></pre></td></tr></tbody></table></figure>
<p> 对程序进行整体语法检查：</p>
<ul>
<li>确保以 <code>begin</code> 开始，调用 <code>parse_statements</code> 处理中间的语句块。</li>
<li>每个语句调用 <code>statement</code> 检查，解析赋值表达式或简单语句。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>生成中间代码</strong></p>
<ul>
<li>对于每个赋值语句，解析左值和右值，并生成四元式。例如：<ul>
<li>输入 <code>a := 5;</code> 会生成 <code>(1) a = 5</code>。</li>
<li>输入 <code>b := a + 3;</code> 会生成类似于 <code>(2) t1 = a + 3</code> 和 <code>(3) b = t1</code> 的四元式。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>结果输出</strong></p>
<ul>
<li><p>语法分析完成后，程序输出所有生成的四元式。</p>
</li>
<li><p>示例输出：</p>
<figure class="highlight lisp"><table><tbody><tr><td class="code"><pre><code class="hljs lisp">(<span class="hljs-number">1</span>) a = <span class="hljs-number">5</span><br>(<span class="hljs-number">2</span>) t1 = a + <span class="hljs-number">3</span><br>(<span class="hljs-number">3</span>) b = t1<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
</li>
<li><p><strong>错误处理</strong></p>
<ul>
<li>遇到语法错误或未定义变量时，调用 <code>error</code> 函数显示错误信息并终止程序。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="四、运行示例分析"><a href="#四、运行示例分析" class="headerlink" title="四、运行示例分析"></a><strong>四、运行示例分析</strong></h3><p>假设输入程序如下：</p>
<figure class="highlight gml"><table><tbody><tr><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">begin</span><br><span class="hljs-variable language_">x</span> := <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">y</span> := <span class="hljs-variable language_">x</span> * <span class="hljs-number">2</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">end</span>#<br></code></pre></td></tr></tbody></table></figure>
<p><strong>运行步骤：</strong></p>
<ol>
<li><strong>词法分析</strong><ul>
<li>识别出 <code>begin</code>、<code>x</code>、<code>:=</code>、<code>10</code>、<code>;</code>、<code>y</code>、<code>:=</code>、<code>x</code>、<code>*</code>、<code>2</code>、<code>+</code>、<code>5</code>、<code>;</code>、<code>end</code>、<code>#</code> 等词法单元。</li>
</ul>
</li>
<li><strong>语法分析</strong><ul>
<li>首先匹配 <code>begin</code> 和 <code>end</code>。</li>
<li>对每个语句 <code>x := 10;</code> 和 <code>y := x * 2 + 5;</code> 进行解析，生成对应的四元式。</li>
</ul>
</li>
<li><strong>生成四元式</strong><ul>
<li>(1) <code>x = 10</code></li>
<li>(2) <code>t1 = x * 2</code></li>
<li>(3) <code>t2 = t1 + 5</code></li>
<li>(4) <code>y = t2</code></li>
</ul>
</li>
</ol>
<hr>
<h1 id="课程设计报告"><a href="#课程设计报告" class="headerlink" title="课程设计报告"></a>课程设计报告</h1><h1 id="实验报告：语义分析程序实现"><a href="#实验报告：语义分析程序实现" class="headerlink" title="实验报告：语义分析程序实现"></a>实验报告：语义分析程序实现</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>设计目的</li>
<li>设计要求</li>
<li>设计方案及算法</li>
<li>详细设计及程序源代码</li>
<li>结果分析</li>
<li>课程设计总结</li>
</ol>
<hr>
<h2 id="一、设计目的"><a href="#一、设计目的" class="headerlink" title="一、设计目的"></a>一、设计目的</h2><p>在实现词法、语法分析程序的基础上，编写相应的语义子程序，进行语义检查，加深对语法制导翻译原理的理解。进一步掌握将语法分析所识别的语法范畴变换为中间代码（四元式）的语义分析方法，完成编译器前端开发工作。</p>
<h2 id="二、设计要求"><a href="#二、设计要求" class="headerlink" title="二、设计要求"></a>二、设计要求</h2><ol>
<li>在语法分析程序的基础上增加语义子程序，实现对源程序的语义检查和中间代码生成。</li>
<li>输入为测试用例的源程序文件。</li>
<li>输出源程序转换的中间代码形式（四元式）并将中间代码输出到文件。</li>
<li>在检测到语法或语义错误时，能够准确报告错误信息。</li>
<li>对不同数据类型的运算对象，在算术运算前需转换为相同的数据类型。</li>
</ol>
<hr>
<h2 id="三、设计方案及算法"><a href="#三、设计方案及算法" class="headerlink" title="三、设计方案及算法"></a>三、设计方案及算法</h2><h3 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h3><p>语义分析基于语法制导翻译模式，程序由以下模块组成：</p>
<ol>
<li><strong>词法分析模块</strong>：读取源代码，解析标识符、关键字、运算符、分隔符等基本单元。</li>
<li><strong>语法分析模块</strong>：按照文法规则对词法分析结果进行解析，构建语法树。</li>
<li><strong>语义分析模块</strong>：在语法树的基础上添加语义检查，生成中间代码（四元式）。</li>
<li><strong>错误处理模块</strong>：发现词法、语法或语义错误时，能够准确定位并输出错误信息。</li>
</ol>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol>
<li><strong>词法分析</strong>：<ul>
<li>逐字符读取源程序，将标识符、数字等转换为对应的记号（Token）。</li>
<li>记录每个标识符的位置，用于错误提示。</li>
</ul>
</li>
<li><strong>语法分析</strong>：<ul>
<li>基于递归下降分析法或LR分析法，对输入的记号序列进行匹配，按照产生式规则构造语法树。</li>
</ul>
</li>
<li><strong>语义分析</strong>：<ul>
<li>在每个产生式匹配时调用对应的语义子程序。</li>
<li>检查标识符的定义状态，未定义时输出错误。</li>
<li>根据运算生成中间代码，并记录到四元式表中。</li>
</ul>
</li>
<li><strong>生成中间代码</strong>：<ul>
<li>使用四元式格式 <code>(结果, 参数1, 操作符, 参数2)</code> 表示。</li>
<li>在遇到复合表达式时生成临时变量存储中间结果。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="四、详细设计及程序源代码"><a href="#四、详细设计及程序源代码" class="headerlink" title="四、详细设计及程序源代码"></a>四、详细设计及程序源代码</h2><p>以下为实验程序完整源代码：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><code class="hljs c">略。。。。<br></code></pre></td></tr></tbody></table></figure>
<p>以下是每个函数及整个程序的流程图，使用Mermaid语法表示。</p>
<h3 id="整体程序流程图"><a href="#整体程序流程图" class="headerlink" title="整体程序流程图"></a>整体程序流程图</h3><pre class="mermaid">graph TD
    Start["程序开始"]
    Input["输入程序字符串"]
    Scaner["词法分析器 (scaner)"]
    Parser["语法分析器 (lrparser)"]
    Quad["生成四元式"]
    Output["输出四元式"]
    End["程序结束"]

    Start --&gt; Input --&gt; Scaner --&gt; Parser
    Parser --&gt;|解析成功| Quad --&gt; Output --&gt; End
    Parser --&gt;|解析失败| Error["错误处理 (error)"] --&gt; End</pre>

<ul>
<li><code>lrparser</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    LRStart["调用 lrparser"]
    BeginCheck["检查是否以 'begin' 开头"]
    ParseStatements["解析语句块 (parse_statements)"]
    EndCheck["检查是否以 'end' 结束"]
    Success["成功，程序结束"]
    Error["错误处理 (error)"]

    LRStart --&gt; BeginCheck
    BeginCheck --&gt;|是| ParseStatements
    BeginCheck --&gt;|否| Error
    ParseStatements --&gt; EndCheck
    EndCheck --&gt;|是| Success
    EndCheck --&gt;|否| Error</pre>

<ul>
<li><code>parse_statements</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    ParseStatementsStart["调用 parse_statements"]
    CheckIdent["检查是否为标识符"]
    Statement["解析语句 (statement)"]
    Semicolon["检查是否以 ';' 结束"]
    EndParseStatements["返回"]

    ParseStatementsStart --&gt; CheckIdent
    CheckIdent --&gt;|是| Statement
    CheckIdent --&gt;|否| EndParseStatements
    Statement --&gt; Semicolon
    Semicolon --&gt;|是| CheckIdent
    Semicolon --&gt;|否| EndParseStatements</pre>

<ul>
<li><code>statement</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    StatementStart["调用 statement"]
    CheckIdent["检查是否为标识符"]
    Define["检查并定义标识符"]
    Assignment["检查赋值符号 ':='"]
    Expression["解析表达式 (expression)"]
    Emit["生成赋值四元式"]
    EndStatement["返回"]
    Error["错误处理 (error)"]

    StatementStart --&gt; CheckIdent
    CheckIdent --&gt;|是| Define
    CheckIdent --&gt;|否| EndStatement
    Define --&gt; Assignment
    Assignment --&gt;|是| Expression
    Assignment --&gt;|否| Error
    Expression --&gt; Emit
    Emit --&gt; EndStatement</pre>

<ul>
<li><code>expression</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    ExpressionStart["调用 expression"]
    Term["解析项 (term)"]
    OpCheck["检查是否有 '+' 或 '-'"]
    NewTemp["生成新临时变量"]
    Emit["生成四元式"]
    EndExpression["返回"]

    ExpressionStart --&gt; Term
    Term --&gt; OpCheck
    OpCheck --&gt;|有| NewTemp
    OpCheck --&gt;|无| EndExpression
    NewTemp --&gt; Emit
    Emit --&gt; Term</pre>

<ul>
<li><code>term</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    TermStart["调用 term"]
    Factor["解析因子 (factor)"]
    OpCheck["检查是否有 '*' 或 '/'"]
    NewTemp["生成新临时变量"]
    Emit["生成四元式"]
    EndTerm["返回"]

    TermStart --&gt; Factor
    Factor --&gt; OpCheck
    OpCheck --&gt;|有| NewTemp
    OpCheck --&gt;|无| EndTerm
    NewTemp --&gt; Emit
    Emit --&gt; Factor</pre>

<ul>
<li><code>factor</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    FactorStart["调用 factor"]
    CheckType["检查类型 (标识符/数字/括号)"]
    IdentCheck["检查标识符是否已定义"]
    Expr["递归解析表达式"]
    EndFactor["返回"]
    Error["错误处理 (error)"]

    FactorStart --&gt; CheckType
    CheckType --&gt;|标识符| IdentCheck
    CheckType --&gt;|数字| EndFactor
    CheckType --&gt;|括号| Expr
    CheckType --&gt;|其他| Error
    IdentCheck --&gt;|已定义| EndFactor
    IdentCheck --&gt;|未定义| Error
    Expr --&gt; EndFactor</pre>

<ul>
<li><code>scaner</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    ScanerStart["调用 scaner"]
    SkipSpaces["跳过空格"]
    Ident["处理标识符或关键字"]
    Num["处理数字"]
    Symbol["处理符号"]
    EndScaner["返回"]

    ScanerStart --&gt; SkipSpaces
    SkipSpaces --&gt; Ident
    SkipSpaces --&gt; Num
    SkipSpaces --&gt; Symbol
    Ident --&gt; EndScaner
    Num --&gt; EndScaner
    Symbol --&gt; EndScaner</pre>

<ul>
<li><code>emit</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    EmitStart["调用 emit"]
    GenerateQuad["生成四元式并存储"]
    EndEmit["返回"]

    EmitStart --&gt; GenerateQuad --&gt; EndEmit</pre>

<ul>
<li><code>error</code> 函数流程图</li>
</ul>
<pre class="mermaid">graph TD
    ErrorStart["调用 error"]
    PrintMsg["打印错误信息"]
    Exit["退出程序"]

    ErrorStart --&gt; PrintMsg --&gt; Exit</pre>

<p>以下是补充的 <strong>变量检查函数 (<code>is_defined</code>)</strong> 和 <strong>定义变量函数 (<code>define</code>)</strong> 的流程图：</p>
<hr>
<p>1 <code>is_defined</code> 函数流程图</p>
<pre class="mermaid">graph TD
    IsDefinedStart["调用 is_defined"]
    Loop["遍历符号表"]
    CheckMatch["检查是否匹配"]
    Match["返回 true"]
    EndLoop["遍历结束"]
    NoMatch["返回 false"]

    IsDefinedStart --&gt; Loop
    Loop --&gt; CheckMatch
    CheckMatch --&gt;|匹配| Match
    CheckMatch --&gt;|不匹配| Loop
    Loop --&gt;|结束| EndLoop --&gt; NoMatch</pre>

<hr>
<p>2 <code>define</code> 函数流程图</p>
<pre class="mermaid">graph TD
    DefineStart["调用 define"]
    CheckCapacity["检查符号表容量是否已满"]
    AddSymbol["将新变量加入符号表"]
    OverflowError["错误处理 (符号表溢出)"]
    EndDefine["返回"]

    DefineStart --&gt; CheckCapacity
    CheckCapacity --&gt;|未满| AddSymbol --&gt; EndDefine
    CheckCapacity --&gt;|已满| OverflowError --&gt; EndDefine</pre>



<hr>
<h2 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h2><ol>
<li>基本语法测试</li>
</ol>
<figure class="highlight crystal"><table><tbody><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-keyword">begin</span> x := <span class="hljs-number">1</span>; <span class="hljs-keyword">end</span><span class="hljs-comment">#</span><br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：成功，生成赋值四元式</p>
<ol>
<li>多语句测试</li>
</ol>
<figure class="highlight gml"><table><tbody><tr><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">begin</span> <span class="hljs-variable language_">x</span> := <span class="hljs-number">3</span> + <span class="hljs-number">5</span>; <span class="hljs-variable language_">y</span> := <span class="hljs-variable language_">x</span> * <span class="hljs-number">2</span>; <span class="hljs-keyword">end</span>#<br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：成功，生成四则运算和赋值的四元式</p>
<ol>
<li>复杂表达式测试</li>
</ol>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">begin</span> x := (<span class="hljs-number">3</span> + <span class="hljs-number">5</span>) * <span class="hljs-number">2</span>; end#<br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：成功，生成带括号的四则运算四元式</p>
<ol>
<li>错误情况测试：</li>
</ol>
<p>a. 缺少 begin</p>
<figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><code class="hljs applescript">x := <span class="hljs-number">1</span>; <span class="hljs-keyword">end</span><span class="hljs-comment">#</span><br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：Error: Missing ‘begin’!</p>
<p>b. 缺少 end</p>
<figure class="highlight llvm"><table><tbody><tr><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">begin</span> <span class="hljs-keyword">x</span> :<span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;#</span><br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：Error: Missing ‘end’!</p>
<p>c. 未定义变量</p>
<figure class="highlight gml"><table><tbody><tr><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">begin</span> <span class="hljs-variable language_">x</span> := <span class="hljs-variable language_">y</span> + <span class="hljs-number">1</span>; <span class="hljs-keyword">end</span>#<br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：Error: Variable ‘y’ is not defined!</p>
<p>d. 语法错误 - 不完整表达式</p>
<figure class="highlight crystal"><table><tbody><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-keyword">begin</span> x := <span class="hljs-number">3</span> + ; <span class="hljs-keyword">end</span><span class="hljs-comment">#</span><br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：Error: Syntax error in factor!</p>
<p>e. 语法错误 - 缺少赋值符号</p>
<figure class="highlight crystal"><table><tbody><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-keyword">begin</span> x = <span class="hljs-number">1</span>; <span class="hljs-keyword">end</span><span class="hljs-comment">#</span><br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：Error: Missing ‘:=’!</p>
<p>f. 括号不匹配</p>
<figure class="highlight crystal"><table><tbody><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-keyword">begin</span> x := (<span class="hljs-number">1</span> + <span class="hljs-number">2</span>; <span class="hljs-keyword">end</span><span class="hljs-comment">#</span><br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：Error: Missing ‘)’!</p>
<ol>
<li>连续变量定义和使用</li>
</ol>
<figure class="highlight gml"><table><tbody><tr><td class="code"><pre><code class="hljs gml"><span class="hljs-keyword">begin</span> <br>    <span class="hljs-variable language_">x</span> := <span class="hljs-number">1</span>; <br>    <span class="hljs-variable language_">y</span> := <span class="hljs-variable language_">x</span> + <span class="hljs-number">2</span>; <br>    z := <span class="hljs-variable language_">x</span> * <span class="hljs-variable language_">y</span>; <br><span class="hljs-keyword">end</span>#<br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：成功，生成多个相关联的四元式</p>
<ol>
<li>退出测试</li>
</ol>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><span class="hljs-comment">#</span><br></code></pre></td></tr></tbody></table></figure>
<p>预期输出：Exiting…</p>
<hr>
<h2 id="六、课程设计总结"><a href="#六、课程设计总结" class="headerlink" title="六、课程设计总结"></a>六、课程设计总结</h2><p>通过本实验，我加深了对编译原理中语法制导翻译的理解，掌握了以下技能：</p>
<ol>
<li><strong>语法制导翻译的基本实现</strong>：将语法分析与语义分析结合，完成简单编译器的前端开发。</li>
<li><strong>中间代码生成</strong>：通过四元式表示复杂的表达式计算。</li>
<li><strong>错误处理机制</strong>：在词法、语法和语义分析阶段均能准确定位和报告错误。</li>
</ol>
<p>实验过程中遇到的主要问题包括：</p>
<ol>
<li>对不同语法规则的处理优先级不够明确，导致初始版本生成的语法树错误。</li>
<li>在标识符定义检查中，符号表操作逻辑不完善，初期出现重复定义的问题。</li>
</ol>
<p>改进建议：</p>
<ol>
<li>增加对复杂语句（如 <code>if-then-else</code> 结构）的支持。</li>
<li>实现更优化的符号表查找算法，提高效率。</li>
<li>在生成四元式时加入类型检查和类型转换的支持。</li>
</ol>
]]></content>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>芝麻的健康益处</title>
    <url>//posts/db2b3b5a/</url>
    <content><![CDATA[<hr>
<p>原文：<a href="https://webmedy.com/blog/zh/benefits-sesame-seeds/">芝麻的健康益处：您饮食中需要的超级食物</a></p>
<hr>
<h2 id="芝麻的十大健康益处"><a href="#芝麻的十大健康益处" class="headerlink" title="芝麻的十大健康益处"></a>芝麻的十大健康益处</h2><h3 id="1-营养强化剂"><a href="#1-营养强化剂" class="headerlink" title="1. 营养强化剂"></a>1. 营养强化剂</h3><p>芝麻个头虽小，但营养价值却十分高。芝麻富含钙、镁、锌和铁等必需矿物质。这些营养物质在维持强健骨骼、支持免疫功能和改善整体健康方面发挥着关键作用。</p>
<blockquote>
<p>[!IMPORTANT]</p>
<ul>
<li>钙：对骨骼和牙齿的健康至关重要。</li>
<li>镁：有助于调节血压并支持肌肉功能。</li>
<li>铁：对于预防贫血和提高能量水平至关重要。</li>
<li>锌：增强免疫反应并有助于伤口愈合。</li>
</ul>
</blockquote>
<h3 id="2-促进心脏健康"><a href="#2-促进心脏健康" class="headerlink" title="2.促进心脏健康"></a>2.促进心脏健康</h3><p>在您的饮食中加入芝麻可以显著改善您的心脏健康。这些种子富含有益健康的不饱和脂肪，有助于降低坏胆固醇 (LDL) 水平并增加好胆固醇 (HDL)。芝麻中的木脂素还具有抗高血压特性，可以降低血压。</p>
<h3 id="3-改善消化"><a href="#3-改善消化" class="headerlink" title="3.改善消化"></a>3.改善消化</h3><p>消化问题困扰着你？芝麻或许能帮到你。芝麻富含膳食纤维，有助于健康消化，预防便秘。纤维还有助于维持健康的肠道微生物群，这对整体健康至关重要。</p>
<h3 id="4-强化骨骼"><a href="#4-强化骨骼" class="headerlink" title="4. 强化骨骼"></a>4. 强化骨骼</h3><p>芝麻富含钙和镁，是维持骨骼强健的绝佳食物。经常食用芝麻可能有助于预防骨质疏松症等疾病。黑芝麻含有较高水平的某些营养素，包括钙和抗氧化剂，对骨骼健康特别有益。</p>
<h3 id="5-增强皮肤和头发健康"><a href="#5-增强皮肤和头发健康" class="headerlink" title="5. 增强皮肤和头发健康"></a>5. 增强皮肤和头发健康</h3><p>芝麻籽中的抗氧化剂和维生素（如维生素 E 和 B 族维生素）可为皮肤和头发提供营养。它们可抵抗氧化应激、减少皱纹并保持皮肤年轻。芝麻油也是治疗皮肤干燥和头皮屑的流行天然药物。</p>
<blockquote>
<p>[!IMPORTANT]</p>
<p><strong>芝麻油对皮肤和头发的好处：</strong></p>
<ul>
<li>滋润并软化肌肤。</li>
<li>减少炎症并防止阳光伤害。</li>
<li>强化毛囊，促进头发生长。</li>
</ul>
</blockquote>
<h3 id="6-调节血糖水平"><a href="#6-调节血糖水平" class="headerlink" title="6.调节血糖水平"></a>6.调节血糖水平</h3><p>对于糖尿病患者来说，芝麻是膳食中的明智之选。芝麻含有镁和健康脂肪，有助于调节血糖水平。研究表明，芝麻油作为均衡饮食的一部分可以改善胰岛素敏感性。</p>
<h3 id="7-增强免疫系统"><a href="#7-增强免疫系统" class="headerlink" title="7.增强免疫系统"></a>7.增强免疫系统</h3><p>芝麻中的锌和硒可增强免疫系统抵抗感染的能力。这些营养素还能减少氧化应激并支持免疫细胞的生成。</p>
<h3 id="8-支持荷尔蒙平衡"><a href="#8-支持荷尔蒙平衡" class="headerlink" title="8.支持荷尔蒙平衡"></a>8.支持荷尔蒙平衡</h3><p>芝麻富含木脂素，这是一种植物雌激素，可以模仿体内的雌激素。这使得它们对绝经后女性特别有益。它们可以帮助缓解潮热和情绪波动等症状，同时提高骨密度。</p>
<h3 id="9-抗炎特性"><a href="#9-抗炎特性" class="headerlink" title="9.抗炎特性"></a>9.抗炎特性</h3><p>慢性炎症与各种健康问题有关，包括关节炎和心脏病。芝麻籽含有芝麻素和芝麻酚，具有强大的抗炎特性。这些化合物可以减轻关节炎患者的关节疼痛并改善活动能力。</p>
<h3 id="10-改善大脑健康"><a href="#10-改善大脑健康" class="headerlink" title="10.改善大脑健康"></a>10.改善大脑健康</h3><p>芝麻籽是天然的健脑食品。芝麻籽富含维生素 B，如硫胺素和烟酸，可改善记忆力并减轻压力。芝麻籽还含有有益于认知功能的健康脂肪。</p>
<hr>
<h2 id="如何在饮食中使用芝麻"><a href="#如何在饮食中使用芝麻" class="headerlink" title="如何在饮食中使用芝麻"></a>如何在饮食中使用芝麻</h2><p>在餐食中添加芝麻既简单又百搭。以下是一些添加芝麻的创意方法：</p>
<ul>
<li>撒在沙拉上：给蔬菜增添脆脆的口感。</li>
<li>混合到冰沙中：一勺芝麻可以增强您最喜爱的饮料的营养。</li>
<li>与面包或松饼一起烘烤：在烘焙食品上撒芝麻，以获得坚果的味道。</li>
<li>制作芝麻酱：这种芝麻酱非常适合用作鹰嘴豆泥之类的蘸料和酱料。</li>
<li>使用芝麻油：炒菜或制作沙拉酱的最佳选择。</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>芝麻的健康益处确实令人瞩目。从改善心脏和骨骼健康到增强免疫力和皮肤活力，这些小小的种子都具有强大的功效。无论您选择白芝麻还是黑芝麻，将它们纳入您的饮食都是迈向更健康的简单一步。今天就开始享受芝麻的诸多益处，亲身体验转变。</p>
<h2 id="有用信息"><a href="#有用信息" class="headerlink" title="有用信息"></a>有用信息</h2><h3 id="芝麻对健康有哪些益处？"><a href="#芝麻对健康有哪些益处？" class="headerlink" title="芝麻对健康有哪些益处？"></a>芝麻对健康有哪些益处？</h3><p>芝麻富含钙、镁和锌等营养成分，有利于骨骼健康、心脏健康和免疫力。芝麻还有助于改善消化、皮肤健康和荷尔蒙平衡，同时具有抗炎作用。</p>
<h3 id="黑芝麻比白芝麻更健康吗？"><a href="#黑芝麻比白芝麻更健康吗？" class="headerlink" title="黑芝麻比白芝麻更健康吗？"></a>黑芝麻比白芝麻更健康吗？</h3><p>黑白芝麻营养丰富，但黑芝麻的抗氧化成分更高，钙和铁的含量也更高，对骨骼健康和皮肤再生特别有益。</p>
<h3 id="芝麻如何有益于心脏健康？"><a href="#芝麻如何有益于心脏健康？" class="headerlink" title="芝麻如何有益于心脏健康？"></a>芝麻如何有益于心脏健康？</h3><p>芝麻含有不饱和脂肪和木脂素，有助于降低坏胆固醇水平、维持健康的血压，对心血管健康非常有益。</p>
<h3 id="芝麻可以减肥吗？"><a href="#芝麻可以减肥吗？" class="headerlink" title="芝麻可以减肥吗？"></a>芝麻可以减肥吗？</h3><p>是的，芝麻碳水化合物含量低，蛋白质、健康脂肪和纤维含量高，可以促进饱腹感并有助于控制体重。</p>
<h3 id="芝麻对糖尿病患者有好处吗？"><a href="#芝麻对糖尿病患者有好处吗？" class="headerlink" title="芝麻对糖尿病患者有好处吗？"></a>芝麻对糖尿病患者有好处吗？</h3><p>芝麻籽含有镁和健康脂肪，有助于调节血糖水平。芝麻油也被证实可以改善胰岛素敏感性。</p>
<h3 id="芝麻对皮肤和头发有什么好处？"><a href="#芝麻对皮肤和头发有什么好处？" class="headerlink" title="芝麻对皮肤和头发有什么好处？"></a>芝麻对皮肤和头发有什么好处？</h3><p>芝麻含有抗氧化剂和维生素E等维生素，可以滋养皮肤和头发，减少皱纹，防止阳光伤害，并强化毛囊。</p>
<h3 id="芝麻如何改善消化？"><a href="#芝麻如何改善消化？" class="headerlink" title="芝麻如何改善消化？"></a>芝麻如何改善消化？</h3><p>芝麻富含膳食纤维，可促进排便规律并支持健康的肠道微生物群，改善整体消化健康。</p>
<h3 id="芝麻能增强免疫力吗？"><a href="#芝麻能增强免疫力吗？" class="headerlink" title="芝麻能增强免疫力吗？"></a>芝麻能增强免疫力吗？</h3><p>是的，芝麻富含锌和硒，可以增强免疫功能，帮助身体更有效地抵抗感染。</p>
<h3 id="芝麻可以帮助平衡荷尔蒙吗？"><a href="#芝麻可以帮助平衡荷尔蒙吗？" class="headerlink" title="芝麻可以帮助平衡荷尔蒙吗？"></a>芝麻可以帮助平衡荷尔蒙吗？</h3><p>芝麻富含木脂素，这是一种模仿雌激素的植物雌激素，对女性，特别是绝经后女性的荷尔蒙平衡特别有益。</p>
<h3 id="芝麻具有哪些抗炎功效？"><a href="#芝麻具有哪些抗炎功效？" class="headerlink" title="芝麻具有哪些抗炎功效？"></a>芝麻具有哪些抗炎功效？</h3><p>芝麻含有芝麻素和芝麻酚，这种化合物具有强效的抗炎特性，可以减轻关节炎和其他慢性病的症状。</p>
<h3 id="芝麻对骨骼有好处吗？"><a href="#芝麻对骨骼有好处吗？" class="headerlink" title="芝麻对骨骼有好处吗？"></a>芝麻对骨骼有好处吗？</h3><p>是的，芝麻富含钙、镁和锌，这些都是保持骨骼强健和预防骨质疏松症所必需的。</p>
<h3 id="芝麻可以改善心理健康吗？"><a href="#芝麻可以改善心理健康吗？" class="headerlink" title="芝麻可以改善心理健康吗？"></a>芝麻可以改善心理健康吗？</h3><p>芝麻含有硫胺素和烟酸等 B 族维生素，可以支持大脑功能、改善记忆力并减轻压力。</p>
<h3 id="芝麻油有什么好处？"><a href="#芝麻油有什么好处？" class="headerlink" title="芝麻油有什么好处？"></a>芝麻油有什么好处？</h3><p>芝麻油富含抗氧化剂、健康脂肪和抗炎化合物。它有益于心脏健康、皮肤保湿和减轻关节疼痛。</p>
<h3 id="您如何在饮食中使用芝麻？"><a href="#您如何在饮食中使用芝麻？" class="headerlink" title="您如何在饮食中使用芝麻？"></a>您如何在饮食中使用芝麻？</h3><p>芝麻可以撒在沙拉、烘焙食品或冰沙上。它们也可以混合到芝麻酱中或作为汤和炒菜的配料。</p>
<h3 id="炒芝麻和生芝麻一样有营养吗？"><a href="#炒芝麻和生芝麻一样有营养吗？" class="headerlink" title="炒芝麻和生芝麻一样有营养吗？"></a>炒芝麻和生芝麻一样有营养吗？</h3><p>烤芝麻保留了大部分营养成分，但可能会损失一些热敏化合物。这两种形式都营养丰富，对健康有益。</p>
<h3 id="吃芝麻有副作用吗？"><a href="#吃芝麻有副作用吗？" class="headerlink" title="吃芝麻有副作用吗？"></a>吃芝麻有副作用吗？</h3><p>虽然芝麻一般是安全的，但有些人可能会出现过敏反应。由于芝麻纤维含量高，过量食用会导致消化问题。</p>
<h3 id="芝麻可以帮助降低血压吗？"><a href="#芝麻可以帮助降低血压吗？" class="headerlink" title="芝麻可以帮助降低血压吗？"></a>芝麻可以帮助降低血压吗？</h3><p>是的，芝麻含有镁和木脂素，它们可以降低高血压并促进整体心血管健康。</p>
<h3 id="芝麻可以改善睡眠质量吗？"><a href="#芝麻可以改善睡眠质量吗？" class="headerlink" title="芝麻可以改善睡眠质量吗？"></a>芝麻可以改善睡眠质量吗？</h3><p>芝麻含有色氨酸，这是一种促进放松的氨基酸，可以通过增加血清素和褪黑激素的水平来帮助改善睡眠。</p>
]]></content>
      <categories>
        <category>health</category>
      </categories>
  </entry>
  <entry>
    <title>血型性格论</title>
    <url>//posts/e16739a2/</url>
    <content><![CDATA[<p>以下是四种血型性格特点的全面总结：</p>
<h3 id="A型血"><a href="#A型血" class="headerlink" title="A型血"></a>A型血</h3><ul>
<li><strong>性格特点</strong>：A型血的人通常具有高度责任感，善于组织和规划，注重细节。他们性格内敛，追求稳定和安全感，喜欢在熟悉的环境中工作和生活。因其谨慎性格，他们在决策时往往考虑周全，避免冒险。尽管外表温和，但内心可能承受较大压力。</li>
<li><strong>社交倾向</strong>：A型血的人在社交中表现得有礼貌、体贴，擅长维持和谐的关系。他们重视他人的感受，通常愿意为他人付出，但有时会因为太过顾虑他人而忽视自己内心的需求，导致情感上的压抑。</li>
</ul>
<h3 id="B型血"><a href="#B型血" class="headerlink" title="B型血"></a>B型血</h3><ul>
<li><strong>性格特点</strong>：B型血的人个性活泼外向，富有创造力和冒险精神。他们不拘泥于规则，喜欢尝试新鲜事物，能够灵活应对变化。他们追求自由和独立，不喜欢被束缚，倾向于随心所欲地生活。尽管如此，他们在面对困难时往往表现出较强的适应能力。</li>
<li><strong>社交倾向</strong>：在社交场合中，B型血的人通常表现得开朗、自信，容易结交新朋友。他们喜欢在轻松愉快的氛围中交流，但有时可能显得过于自我中心或不够考虑他人感受，这可能导致人际关系上的摩擦。</li>
</ul>
<h3 id="O型血"><a href="#O型血" class="headerlink" title="O型血"></a>O型血</h3><ul>
<li><strong>性格特点</strong>：O型血的人通常充满自信，目标明确，具有较强的领导才能。他们思维清晰，逻辑性强，擅长解决问题和制定计划。在行动上，他们果断且执行力强，喜欢掌控局面，追求成就和成功。他们对自己的要求较高，常常设定远大的目标并全力以赴。</li>
<li><strong>社交倾向</strong>：O型血的人在社交中表现得大方、自信，容易吸引他人的注意力。他们喜欢成为团体中的领导者，并且善于调动他人的积极性。然而，由于他们的强势个性，有时可能会忽视他人的感受或意见，导致与他人产生冲突。</li>
</ul>
<h3 id="AB型血"><a href="#AB型血" class="headerlink" title="AB型血"></a>AB型血</h3><ul>
<li><strong>性格特点</strong>：AB型血的人性格复杂，具有多重特质，既能冷静分析，又能表现出富有创意的一面。他们思维敏捷，情绪变化多样，常常表现出矛盾的特质，既有理性的一面，也有感性的一面。他们追求个人空间，但也希望与他人建立深刻的联系，往往在理性与感性之间寻找平衡。</li>
<li><strong>社交倾向</strong>：AB型血的人在社交中灵活多变，能够迅速适应不同的社交场合。他们既能独立处理事务，又能融入群体，表现出双重性格特征。在与他人交往时，他们能够理解和包容不同的观点，但有时可能显得难以捉摸或情绪化，这可能影响他人对他们的信任感。</li>
</ul>
<p>这些性格特点反映了不同血型的人在思维方式、行为习惯和社交倾向上的差异。虽然血型与性格之间的联系并非绝对，但这些总结提供了一种有趣的视角，帮助人们理解自己和他人的性格特点。</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>道德经</title>
    <url>//posts/8e6daf7b/</url>
    <content><![CDATA[<h1 id="道德经"><a href="#道德经" class="headerlink" title="道德经"></a>道德经</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>道可道，非常道；名可名，非常名。<br>无名天地之始；有名万物之母。<br>故常无欲，以观其妙；常有欲，以观其徼。<br>此两者同出而异名，同谓之玄。<br>玄之又玄，众妙之门。</p>
<blockquote>
<p>道可以说，但不是永恒的道；名可以命名，但不是永恒的名。<br>无名是天地的开始；有名是万物的母亲。<br>所以常常没有欲望，以观察它的奥妙；常常有欲望，以观察它的边界。<br>这两者同出一源而名称不同，都称为玄。<br>玄之又玄，是众多奥妙的门户。</p>
</blockquote>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。<br>故有无相生，难易相成，长短相形，高下相倾，音声相和，前后相随。<br>是以圣人处无为之事，行不言之教。<br>万物作焉而不辞，生而不有，为而不恃，功成而弗居。<br>夫唯弗居，是以不去。</p>
<blockquote>
<p>天下都知道美之所以为美，丑的观念就产生了；都知道善之所以为善，不善的观念就产生了。<br>所以有和无相互产生，难和易相互形成，长和短相互比较，高和下相互倾斜，音和声相互和谐，前和后相互跟随。<br>因此圣人以无为的态度处理事务，实行不言的教导。<br>万物兴起而不加干涉，生养而不占有，作为而不依赖，功成而不居功。<br>正因为不居功，所以功绩不会失去。</p>
</blockquote>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。<br>是以圣人之治，虚其心，实其腹，弱其志，强其骨。<br>常使民无知无欲，使夫智者不敢为也。<br>为无为，则无不治。</p>
<blockquote>
<p>不推崇贤能，使人民不争夺；不珍视难得的货物，使人民不去偷盗；不显露可欲的事物，使人民的心不混乱。<br>因此圣人的治理，空虚人民的心，充实人民的腹，削弱人民的志，强壮人民的骨。<br>常常使人民无知无欲，使那些智者不敢妄为。<br>实行无为，那么就没有治理不好的。</p>
</blockquote>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>道冲而用之或不盈，渊兮似万物之宗。<br>挫其锐，解其纷，和其光，同其尘。<br>湛兮似或存，吾不知谁之子，象帝之先。</p>
<blockquote>
<p>道空虚而使用它却不会满溢，深远啊，像是万物的根源。<br>挫去它的锐利，解开它的纷乱，调和它的光芒，混同它的尘埃。<br>深沉啊，似乎存在，我不知道它是谁的孩子，像是天帝的祖先。</p>
</blockquote>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p>天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。<br>天地之间，其犹橐龠乎？虚而不屈，动而愈出。<br>多言数穷，不如守中。</p>
<blockquote>
<p>天地没有仁爱，把万物当作刍狗；圣人没有仁爱，把百姓当作刍狗。<br>天地之间，不就像风箱吗？空虚而不枯竭，动起来就更加出风。<br>多说话往往会陷入困境，不如保持中庸。</p>
</blockquote>
<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>谷神不死，是谓玄牝。<br>玄牝之门，是谓天地根。<br>绵绵若存，用之不勤。</p>
<blockquote>
<p>谷神不死，这叫做玄牝。<br>玄牝的门户，这叫做天地的根本。<br>绵绵不绝，似乎存在，使用它却不会穷尽。</p>
</blockquote>
<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p>天长地久。<br>天地所以能长且久者，以其不自生，故能长生。<br>是以圣人后其身而身先，外其身而身存。<br>非以其无私邪？故能成其私。</p>
<blockquote>
<p>天长地久。<br>天地之所以能长久，是因为它们不为自己而生，所以能长生。<br>因此圣人把自己放在后面，反而能领先；把自己置之度外，反而能保存。<br>这不是因为他们的无私吗？所以能成就他们的私。</p>
</blockquote>
<h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><p>上善若水。<br>水善利万物而不争，处众人之所恶，故几于道。<br>居善地，心善渊，与善仁，言善信，政善治，事善能，动善时。<br>夫唯不争，故无尤。</p>
<blockquote>
<p>最高的善像水一样。<br>水善于滋润万物而不与万物相争，停留在众人所厌恶的地方，所以接近于道。<br>居住在善地，心思善渊，交往善仁，言语善信，政治善治，办事善能，行动善时。<br>正因为不争，所以没有过失。</p>
</blockquote>
<h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><p>持而盈之，不如其已；揣而锐之，不可长保。<br>金玉满堂，莫之能守；富贵而骄，自遗其咎。<br>功遂身退，天之道也。</p>
<blockquote>
<p>持满而溢，不如适可而止；磨尖而锐，不能长久保持。<br>金玉满堂，没有人能守住；富贵而骄傲，自己招致灾祸。<br>功成身退，这是天的道。</p>
</blockquote>
<h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><p>载营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？爱民治国，能无知乎？天门开阖，能无雌乎？明白四达，能无为乎？<br>生之畜之，生而不有，为而不恃，长而不宰，是谓玄德。</p>
<blockquote>
<p>承载魂魄抱守一，能不离失吗？专一气息达到柔和，能像婴儿吗？涤除玄妙的观照，能没有瑕疵吗？爱民治国，能不用智巧吗？天门开合，能无雌柔吗？明白四达，能无为吗？<br>生育万物，养育万物，生养而不占有，作为而不依赖，成长而不主宰，这叫做玄德。</p>
</blockquote>
<h2 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h2><p>三十辐共一毂，当其无，有车之用。<br>埏埴以为器，当其无，有器之用。<br>凿户牖以为室，当其无，有室之用。<br>故有之以为利，无之以为用。</p>
<blockquote>
<p>三十根辐条共用一个轮毂，当轮毂中间空虚时，才有车的作用。<br>揉和泥土制作器皿，当器皿中间空虚时，才有器皿的作用。<br>开凿门窗建造房屋，当房屋中间空虚时，才有房屋的作用。<br>所以“有”给人便利，“无”发挥了它的作用。</p>
</blockquote>
<h2 id="第十二章"><a href="#第十二章" class="headerlink" title="第十二章"></a>第十二章</h2><p>五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋猎令人心发狂，难得之货令人行妨。<br>是以圣人为腹不为目，故去彼取此。</p>
<blockquote>
<p>五色使人眼盲，五音使人耳聋，五味使人口爽，驰骋畋猎使人心发狂，难得的货物使人行为妨害。<br>因此圣人只求饱腹而不求目眩，所以舍弃那些而取这些。</p>
</blockquote>
<h2 id="第十三章"><a href="#第十三章" class="headerlink" title="第十三章"></a>第十三章</h2><p>宠辱若惊，贵大患若身。<br>何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。<br>何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患？<br>故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。</p>
<blockquote>
<p>宠辱都像受惊一样，重视大患像重视自身一样。<br>什么叫宠辱若惊？宠是下等的，得到它像受惊，失去它像受惊，这叫做宠辱若惊。<br>什么叫贵大患若身？我之所以有大患，是因为我有自身，如果我没有自身，我还有什么患难？<br>所以重视自身是为了天下，就可以寄托天下；爱惜自身是为了天下，就可以托付天下。</p>
</blockquote>
<h2 id="第十四章"><a href="#第十四章" class="headerlink" title="第十四章"></a>第十四章</h2><p>视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。<br>此三者不可致诘，故混而为一。<br>其上不皦，其下不昧，绳绳不可名，复归于无物。<br>是谓无状之状，无物之象，是谓惚恍。<br>迎之不见其首，随之不见其后。<br>执古之道，以御今之有，能知古始，是谓道纪。</p>
<blockquote>
<p>看它看不见叫做夷，听它听不到叫做希，摸它摸不着叫做微。<br>这三者无法追究，所以混合为一。<br>它的上面不光明，它的下面不昏暗，连绵不断无法命名，又回归于无物。<br>这叫做没有形状的形状，没有物体的形象，这叫做惚恍。<br>迎着它看不见它的头，跟着它看不见它的尾。<br>把握古代的道，来驾驭现在的有，能知道古代的起始，这叫做道的纲纪。</p>
</blockquote>
<h2 id="第十五章"><a href="#第十五章" class="headerlink" title="第十五章"></a>第十五章</h2><p>古之善为士者，微妙玄通，深不可识。<br>夫唯不可识，故强为之容：<br>豫兮若冬涉川，犹兮若畏四邻，俨兮其若客，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。<br>孰能浊以静之徐清？孰能安以久动之徐生？<br>保此道者不欲盈，夫唯不盈，故能蔽不新成。</p>
<blockquote>
<p>古代善于为士的人，微妙玄通，深不可识。<br>正因为不可识，所以勉强形容他：<br>谨慎啊，像冬天涉水过河；犹豫啊，像畏惧四邻；庄重啊，像做客；涣散啊，像冰将融化；敦厚啊，像未经雕琢的木头；空旷啊，像山谷；混浊啊，像浊水。<br>谁能把浊水静置而慢慢澄清？谁能把安静长久保持而慢慢生发？<br>保持这种道的人不追求满盈，正因为不盈，所以能遮蔽而不新成。</p>
</blockquote>
<h2 id="第十六章"><a href="#第十六章" class="headerlink" title="第十六章"></a>第十六章</h2><p>致虚极，守静笃。<br>万物并作，吾以观复。<br>夫物芸芸，各复归其根。<br>归根曰静，静曰复命。<br>复命曰常，知常曰明。<br>不知常，妄作凶。<br>知常容，容乃公，公乃全，全乃天，天乃道，道乃久，没身不殆。</p>
<blockquote>
<p>达到虚空的极点，保持静定的极致。<br>万物一起生长，我观察它们的循环。<br>万物纷繁，各自回归它们的根源。<br>回归根源叫做静，静叫做复命。<br>复命叫做常，知道常叫做明。<br>不知道常，妄动就会招致凶险。<br>知道常就能包容，包容就能公正，公正就能周全，周全就能符合天，符合天就能符合道，符合道就能长久，终身没有危险。</p>
</blockquote>
<h2 id="第十七章"><a href="#第十七章" class="headerlink" title="第十七章"></a>第十七章</h2><p>太上，下知有之；其次，亲而誉之；其次，畏之；其次，侮之。<br>信不足焉，有不信焉。<br>悠兮其贵言，功成事遂，百姓皆谓我自然。</p>
<blockquote>
<p>最好的统治者，下面只知道他的存在；其次的，亲近而赞美他；再次的，畏惧他；最次的，轻侮他。<br>诚信不足，才有不信任。<br>悠然啊，他重视言语，功成事遂，百姓都说我是自然而然的。</p>
</blockquote>
<h2 id="第十八章"><a href="#第十八章" class="headerlink" title="第十八章"></a>第十八章</h2><p>大道废，有仁义；智慧出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。</p>
<blockquote>
<p>大道废弃了，才有仁义；智慧出现了，才有大伪；六亲不和，才有孝慈；国家昏乱，才有忠臣。</p>
</blockquote>
<h2 id="第十九章"><a href="#第十九章" class="headerlink" title="第十九章"></a>第十九章</h2><p>绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。<br>此三者以为文不足，故令有所属：见素抱朴，少私寡欲。</p>
<blockquote>
<p>抛弃圣智，人民利益百倍；抛弃仁义，人民恢复孝慈；抛弃巧利，盗贼消失。<br>这三者作为文饰是不够的，所以要让人民有所归属：显现朴素，抱守纯朴，减少私欲。</p>
</blockquote>
<h2 id="第二十章"><a href="#第二十章" class="headerlink" title="第二十章"></a>第二十章</h2><p>绝学无忧。<br>唯之与阿，相去几何？美之与恶，相去若何？人之所畏，不可不畏。<br>荒兮其未央哉！<br>众人熙熙，如享太牢，如春登台。<br>我独泊兮其未兆，如婴儿之未孩。<br>傫傫兮若无所归。<br>众人皆有余，而我独若遗。<br>我愚人之心也哉，沌沌兮！<br>俗人昭昭，我独昏昏；俗人察察，我独闷闷。<br>澹兮其若海，飂兮若无止。<br>众人皆有以，而我独顽似鄙。<br>我独异于人，而贵食母。</p>
<blockquote>
<p>抛弃学问，没有忧虑。<br>唯诺与呵斥，相差多少？美与恶，相差多少？人所畏惧的，不可不畏惧。<br>荒远啊，它没有尽头！<br>众人熙熙攘攘，像享受太牢，像春天登台。<br>我独自淡泊啊，没有征兆，像婴儿还未笑。<br>疲惫啊，好像没有归宿。<br>众人都有余，而我独自好像不足。<br>我是愚人的心啊，混沌啊！<br>俗人昭昭，我独自昏昏；俗人察察，我独自闷闷。<br>淡泊啊，像大海；飘荡啊，好像没有止境。<br>众人都有所作为，而我独自顽劣似鄙陋。<br>我独自与人不同，而重视滋养万物的大道。</p>
</blockquote>
<h2 id="第二十一章"><a href="#第二十一章" class="headerlink" title="第二十一章"></a>第二十一章</h2><p>孔德之容，惟道是从。<br>道之为物，惟恍惟惚。<br>惚兮恍兮，其中有象；恍兮惚兮，其中有物。<br>窈兮冥兮，其中有精；其精甚真，其中有信。<br>自古及今，其名不去，以阅众甫。<br>吾何以知众甫之状哉？以此。</p>
<blockquote>
<p>大德的容貌，只跟随道。<br>道这个东西，恍恍惚惚。<br>惚惚恍恍，其中有形象；恍恍惚惚，其中有物体。<br>深远幽暗，其中有精华；这精华非常真实，其中有信实。<br>从古到今，它的名字不消失，用来观察万物的起始。<br>我怎么知道万物起始的状态呢？就是通过这个。</p>
</blockquote>
<h2 id="第二十二章"><a href="#第二十二章" class="headerlink" title="第二十二章"></a>第二十二章</h2><p>曲则全，枉则直，洼则盈，敝则新，少则得，多则惑。<br>是以圣人抱一为天下式。<br>不自见故明，不自是故彰，不自伐故有功，不自矜故长。<br>夫唯不争，故天下莫能与之争。<br>古之所谓曲则全者，岂虚言哉！诚全而归之。</p>
<blockquote>
<p>弯曲才能保全，委屈才能伸直，低洼才能充盈，破旧才能更新，少取才能获得，多取反而迷惑。<br>因此圣人抱守一作为天下的法则。<br>不自我表现所以明智，不自以为是所以彰显，不自我夸耀所以有功，不自高自大所以长久。<br>正因为不争，所以天下没有人能与他争。<br>古人所说的“曲则全”，难道是空话吗？确实能保全而归向它。</p>
</blockquote>
<h2 id="第二十三章"><a href="#第二十三章" class="headerlink" title="第二十三章"></a>第二十三章</h2><p>希言自然。<br>故飘风不终朝，骤雨不终日。<br>孰为此者？天地。<br>天地尚不能久，而况于人乎？<br>故从事于道者，同于道；德者，同于德；失者，同于失。<br>同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。<br>信不足焉，有不信焉。</p>
<blockquote>
<p>少说话是自然的。<br>所以狂风不会刮一早上，暴雨不会下一整天。<br>谁造成这些？天地。<br>天地尚且不能持久，何况人呢？<br>所以从事于道的人，与道相同；从事于德的人，与德相同；从事于失的人，与失相同。<br>与道相同的人，道也乐于得到他；与德相同的人，德也乐于得到他；与失相同的人，失也乐于得到他。<br>诚信不足，才有不信任。</p>
</blockquote>
<h2 id="第二十四章"><a href="#第二十四章" class="headerlink" title="第二十四章"></a>第二十四章</h2><p>企者不立，跨者不行。<br>自见者不明，自是者不彰，自伐者无功，自矜者不长。<br>其在道也，曰余食赘行，物或恶之，故有道者不处。</p>
<blockquote>
<p>踮起脚跟的人站不稳，跨大步的人走不远。<br>自我表现的人不明智，自以为是的人不彰显，自我夸耀的人没有功，自高自大的人不长久。<br>这些在道中，叫做剩饭赘瘤，万物都厌恶它们，所以有道的人不这样做。</p>
</blockquote>
<h2 id="第二十五章"><a href="#第二十五章" class="headerlink" title="第二十五章"></a>第二十五章</h2><p>有物混成，先天地生。<br>寂兮寥兮，独立而不改，周行而不殆，可以为天下母。<br>吾不知其名，字之曰道，强为之名曰大。<br>大曰逝，逝曰远，远曰反。<br>故道大，天大，地大，人亦大。<br>域中有四大，而人居其一焉。<br>人法地，地法天，天法道，道法自然。</p>
<blockquote>
<p>有一个东西混然而成，在天地之前就存在。<br>寂静啊，空虚啊，独立而不改变，循环运行而不停止，可以成为天下的母亲。<br>我不知道它的名字，勉强给它起个名字叫做道，再勉强给它起个名字叫做大。<br>大叫做逝，逝叫做远，远叫做反。<br>所以道大，天大，地大，人也大。<br>宇宙中有四大，而人居其中之一。<br>人效法地，地效法天，天效法道，道效法自然。</p>
</blockquote>
<h2 id="第二十六章"><a href="#第二十六章" class="headerlink" title="第二十六章"></a>第二十六章</h2><p>重为轻根，静为躁君。<br>是以圣人终日行不离辎重。<br>虽有荣观，燕处超然。<br>奈何万乘之主，而以身轻天下？<br>轻则失本，躁则失君。</p>
<blockquote>
<p>重是轻的根本，静是躁的主宰。<br>因此圣人整天行走不离开辎重。<br>虽然有荣华富贵，却超然处之。<br>为什么万乘之国的君主，却以自身轻率对待天下？<br>轻率就会失去根本，躁动就会失去主宰。</p>
</blockquote>
<h2 id="第二十七章"><a href="#第二十七章" class="headerlink" title="第二十七章"></a>第二十七章</h2><p>善行无辙迹，善言无瑕谪，善数不用筹策，善闭无关楗而不可开，善结无绳约而不可解。<br>是以圣人常善救人，故无弃人；常善救物，故无弃物。<br>是谓袭明。<br>故善人者，不善人之师；不善人者，善人之资。<br>不贵其师，不爱其资，虽智大迷，是谓要妙。</p>
<blockquote>
<p>善于行走的不留痕迹，善于说话的无懈可击，善于计算的不需要筹码，善于关闭的不用门闩却打不开，善于结扎的不用绳索却解不开。<br>因此圣人常常善于救人，所以没有废弃的人；常常善于救物，所以没有废弃的物。<br>这叫做袭明。<br>所以善人是不善人的老师，不善人是善人的借鉴。<br>不尊重老师，不爱惜借鉴，虽然聪明却是大迷惑，这叫做要妙。</p>
</blockquote>
<h2 id="第二十八章"><a href="#第二十八章" class="headerlink" title="第二十八章"></a>第二十八章</h2><p>知其雄，守其雌，为天下溪。<br>为天下溪，常德不离，复归于婴儿。<br>知其白，守其黑，为天下式。<br>为天下式，常德不忒，复归于无极。<br>知其荣，守其辱，为天下谷。<br>为天下谷，常德乃足，复归于朴。<br>朴散则为器，圣人用之则为官长。<br>故大制不割。</p>
<blockquote>
<p>知道雄强，却守持雌柔，作为天下的溪流。<br>作为天下的溪流，常德不离开，回归到婴儿状态。<br>知道光明，却守持黑暗，作为天下的法则。<br>作为天下的法则，常德不差错，回归到无极。<br>知道荣耀，却守持屈辱，作为天下的山谷。<br>作为天下的山谷，常德才充足，回归到纯朴。<br>纯朴分散就成为器皿，圣人使用它就成为官长。<br>所以大制不割裂。</p>
</blockquote>
<h2 id="第二十九章"><a href="#第二十九章" class="headerlink" title="第二十九章"></a>第二十九章</h2><p>将欲取天下而为之，吾见其不得已。<br>天下神器，不可为也，不可执也。<br>为者败之，执者失之。<br>故物或行或随，或歔或吹，或强或羸，或挫或隳。<br>是以圣人去甚，去奢，去泰。</p>
<blockquote>
<p>想要取得天下而治理它，我看他不得已。<br>天下是神圣的器物，不可作为，不可执持。<br>作为的人会失败，执持的人会失去。<br>所以万物有的前行，有的跟随，有的轻嘘，有的急吹，有的强健，有的羸弱，有的挫败，有的毁坏。<br>因此圣人去除极端，去除奢侈，去除过度。</p>
</blockquote>
<h2 id="第三十章"><a href="#第三十章" class="headerlink" title="第三十章"></a>第三十章</h2><p>以道佐人主者，不以兵强天下。<br>其事好还。<br>师之所处，荆棘生焉。<br>大军之后，必有凶年。<br>善者果而已，不敢以取强。<br>果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。<br>物壮则老，是谓不道，不道早已。</p>
<blockquote>
<p>用道辅助君主的人，不靠兵力强取天下。<br>这种事情容易得到报应。<br>军队所到之处，荆棘丛生。<br>大战之后，必有荒年。<br>善于用兵的人只求达到目的，不敢用兵逞强。<br>达到目的而不自夸，达到目的而不自伐，达到目的而不骄傲，达到目的而不得已，达到目的而不逞强。<br>事物壮大了就会衰老，这叫做不符合道，不符合道就会早亡。</p>
</blockquote>
<h2 id="第三十一章"><a href="#第三十一章" class="headerlink" title="第三十一章"></a>第三十一章</h2><p>夫兵者，不祥之器，物或恶之，故有道者不处。<br>君子居则贵左，用兵则贵右。<br>兵者不祥之器，非君子之器，不得已而用之，恬淡为上。<br>胜而不美，而美之者，是乐杀人。<br>夫乐杀人者，则不可得志于天下矣。<br>吉事尚左，凶事尚右。<br>偏将军居左，上将军居右，言以丧礼处之。<br>杀人之众，以悲哀泣之，战胜以丧礼处之。</p>
<blockquote>
<p>兵器是不祥的器物，万物都厌恶它，所以有道的人不使用。<br>君子平时以左为贵，用兵时以右为贵。<br>兵器是不祥的器物，不是君子的器物，不得已才使用它，以恬淡为上。<br>胜利了不要赞美，如果赞美它，就是喜欢杀人。<br>喜欢杀人的人，就不能在天下实现志向。<br>吉事崇尚左边，凶事崇尚右边。<br>偏将军站在左边，上将军站在右边，这是用丧礼来处理。<br>杀人众多，要以悲哀的心情哭泣，战胜了要用丧礼来处理。</p>
</blockquote>
<h2 id="第三十二章"><a href="#第三十二章" class="headerlink" title="第三十二章"></a>第三十二章</h2><p>道常无名，朴虽小，天下莫能臣也。<br>侯王若能守之，万物将自宾。<br>天地相合，以降甘露，民莫之令而自均。<br>始制有名，名亦既有，夫亦将知止，知止可以不殆。<br>譬道之在天下，犹川谷之于江海。</p>
<blockquote>
<p>道永远是无名的，朴虽然小，天下没有谁能臣服它。<br>侯王如果能守住它，万物将自然归顺。<br>天地相合，降下甘露，人民没有命令而自然均匀。<br>开始制定有名，名既然有了，也要知道停止，知道停止可以避免危险。<br>譬如道在天下，就像川谷归于江海。</p>
</blockquote>
<h2 id="第三十三章"><a href="#第三十三章" class="headerlink" title="第三十三章"></a>第三十三章</h2><p>知人者智，自知者明。<br>胜人者有力，自胜者强。<br>知足者富，强行者有志。<br>不失其所者久，死而不亡者寿。</p>
<blockquote>
<p>了解别人是智慧，了解自己是明智。<br>战胜别人是有力，战胜自己是强大。<br>知足的人是富有，坚持力行的人有志气。<br>不失去根基的人能长久，死而不朽的人是长寿。</p>
</blockquote>
<h2 id="第三十四章"><a href="#第三十四章" class="headerlink" title="第三十四章"></a>第三十四章</h2><p>大道泛兮，其可左右。<br>万物恃之以生而不辞，功成而不名有。<br>衣养万物而不为主，常无欲，可名于小；万物归焉而不为主，可名为大。<br>以其终不自为大，故能成其大。</p>
<blockquote>
<p>大道广泛啊，它可以左右。<br>万物依赖它生长而不推辞，功成而不占有。<br>养育万物而不为主宰，常常没有欲望，可以称为小；万物归附而不为主宰，可以称为大。<br>因为它始终不自以为大，所以能成就它的伟大。</p>
</blockquote>
<h2 id="第三十五章"><a href="#第三十五章" class="headerlink" title="第三十五章"></a>第三十五章</h2><p>执大象，天下往。<br>往而不害，安平泰。<br>乐与饵，过客止。<br>道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。</p>
<blockquote>
<p>把握大道的形象，天下归往。<br>归往而不伤害，安宁平和。<br>音乐和美食，过客会停留。<br>道说出口，淡而无味，看它看不见，听它听不到，用它用不完。</p>
</blockquote>
<h2 id="第三十六章"><a href="#第三十六章" class="headerlink" title="第三十六章"></a>第三十六章</h2><p>将欲歙之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必固与之。<br>是谓微明。<br>柔弱胜刚强。<br>鱼不可脱于渊，国之利器不可以示人。</p>
<blockquote>
<p>想要收敛它，必先扩张它；想要削弱它，必先加强它；想要废除它，必先兴起它；想要夺取它，必先给予它。<br>这叫做微明。<br>柔弱胜过刚强。<br>鱼不能离开深渊，国家的利器不能展示给人看。</p>
</blockquote>
<h2 id="第三十七章"><a href="#第三十七章" class="headerlink" title="第三十七章"></a>第三十七章</h2><p>道常无为而无不为。<br>侯王若能守之，万物将自化。<br>化而欲作，吾将镇之以无名之朴。<br>镇之以无名之朴，夫亦将不欲。<br>不欲以静，天下将自定。</p>
<blockquote>
<p>道永远无为而无不为。<br>侯王如果能守住它，万物将自然化育。<br>化育而有欲望产生，我将用无名的朴来镇服它。<br>用无名的朴来镇服它，欲望就会消失。<br>欲望消失而归于安静，天下将自然安定。</p>
</blockquote>
<h2 id="第三十八章"><a href="#第三十八章" class="headerlink" title="第三十八章"></a>第三十八章</h2><p>上德不德，是以有德；下德不失德，是以无德。<br>上德无为而无以为；下德为之而有以为。<br>上仁为之而无以为；上义为之而有以为。<br>上礼为之而莫之应，则攘臂而扔之。<br>故失道而后德，失德而后仁，失仁而后义，失义而后礼。<br>夫礼者，忠信之薄，而乱之首。<br>前识者，道之华，而愚之始。<br>是以大丈夫处其厚，不居其薄；处其实，不居其华。<br>故去彼取此。</p>
<blockquote>
<p>上德的人不表现为德，所以有德；下德的人不失去德，所以无德。<br>上德的人无为而无以为；下德的人有为而有以为。<br>上仁的人有为而无以为；上义的人有为而有以为。<br>上礼的人有为而没有人响应，就卷起袖子强拉人。<br>所以失去道而后有德，失去德而后有仁，失去仁而后有义，失去义而后有礼。<br>礼是忠信的薄弱，是混乱的开始。<br>先知是道的华丽，是愚昧的开始。<br>因此大丈夫处于厚实，不处于薄弱；处于实在，不处于华丽。<br>所以舍弃那些而取这些。</p>
</blockquote>
<h2 id="第三十九章"><a href="#第三十九章" class="headerlink" title="第三十九章"></a>第三十九章</h2><p>昔之得一者：天得一以清；地得一以宁；神得一以灵；谷得一以盈；万物得一以生；侯王得一以为天下正。<br>其致之也，谓天无以清，将恐裂；地无以宁，将恐废；神无以灵，将恐歇；谷无以盈，将恐竭；万物无以生，将恐灭；侯王无以正，将恐蹶。<br>故贵以贱为本，高以下为基。<br>是以侯王自称孤、寡、不谷。<br>此非以贱为本邪？非乎？故致誉无誉。<br>是故不欲琭琭如玉，珞珞如石。</p>
<blockquote>
<p>古代得到一的：天得到一而清明；地得到一而安宁；神得到一而灵验；谷得到一而充盈；万物得到一而生长；侯王得到一而成为天下的正统。<br>推究其原因，天没有清明，恐怕会破裂；地没有安宁，恐怕会废弃；神没有灵验，恐怕会消失；谷没有充盈，恐怕会枯竭；万物没有生长，恐怕会灭绝；侯王没有正统，恐怕会颠覆。<br>所以贵以贱为根本，高以下为基础。<br>因此侯王自称孤、寡、不谷。<br>这不是以贱为根本吗？不是吗？所以追求名誉反而没有名誉。<br>因此不希望像玉那样琭琭，像石那样珞珞。</p>
</blockquote>
<h2 id="第四十章"><a href="#第四十章" class="headerlink" title="第四十章"></a>第四十章</h2><p>反者道之动，弱者道之用。<br>天下万物生于有，有生于无。</p>
<blockquote>
<p>反复是道的运动，柔弱是道的作用。<br>天下万物生于有，有生于无。</p>
</blockquote>
<h2 id="第四十一章"><a href="#第四十一章" class="headerlink" title="第四十一章"></a>第四十一章</h2><p>上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。<br>不笑不足以为道。<br>故建言有之：<br>明道若昧，进道若退，夷道若颣。<br>上德若谷，大白若辱，广德若不足，建德若偷，质真若渝。<br>大方无隅，大器晚成，大音希声，大象无形。<br>道隐无名。<br>夫唯道，善贷且成。</p>
<blockquote>
<p>上士听到道，勤奋实行；中士听到道，半信半疑；下士听到道，大笑。<br>不笑不足以成为道。<br>所以古语有：<br>明显的道好像暗昧，前进的道好像后退，平坦的道好像崎岖。<br>上德好像低谷，大白好像污辱，广德好像不足，建德好像偷懒，质朴好像变化。<br>大方没有角落，大器晚成，大音希声，大象无形。<br>道隐藏无名。<br>只有道，善于施予而且成就。</p>
</blockquote>
<h2 id="第四十二章"><a href="#第四十二章" class="headerlink" title="第四十二章"></a>第四十二章</h2><p>道生一，一生二，二生三，三生万物。<br>万物负阴而抱阳，冲气以为和。<br>人之所恶，唯孤、寡、不谷，而王公以为称。<br>故物或损之而益，或益之而损。<br>人之所教，我亦教之。<br>强梁者不得其死，吾将以为教父。</p>
<blockquote>
<p>道生一，一生二，二生三，三生万物。<br>万物背负阴而怀抱阳，冲气以为和谐。<br>人所厌恶的，只有孤、寡、不谷，而王公却用来称呼自己。<br>所以事物有时减损反而增益，有时增益反而减损。<br>人所教导的，我也教导。<br>强横的人不得好死，我将以此作为教父。</p>
</blockquote>
<h2 id="第四十三章"><a href="#第四十三章" class="headerlink" title="第四十三章"></a>第四十三章</h2><p>天下之至柔，驰骋天下之至坚。<br>无有入无间，吾是以知无为之有益。<br>不言之教，无为之益，天下希及之。</p>
<blockquote>
<p>天下最柔软的东西，能驰骋天下最坚硬的东西。<br>没有形体的东西能进入没有间隙的地方，我因此知道无为的益处。<br>不言的教导，无为的益处，天下很少能及得上。</p>
</blockquote>
<h2 id="第四十四章"><a href="#第四十四章" class="headerlink" title="第四十四章"></a>第四十四章</h2><p>名与身孰亲？身与货孰多？得与亡孰病？<br>甚爱必大费，多藏必厚亡。<br>故知足不辱，知止不殆，可以长久。</p>
<blockquote>
<p>名声与生命哪个更亲近？生命与财富哪个更重要？得到与失去哪个更有害？<br>过分爱惜必定大费，过多收藏必定厚亡。<br>所以知足不会受辱，知止不会危险，可以长久。</p>
</blockquote>
<h2 id="第四十五章"><a href="#第四十五章" class="headerlink" title="第四十五章"></a>第四十五章</h2><p>大成若缺，其用不弊。<br>大盈若冲，其用不穷。<br>大直若屈，大巧若拙，大辩若讷。<br>躁胜寒，静胜热。<br>清静为天下正。</p>
<blockquote>
<p>最完满的东西好像有缺陷，它的作用不会衰竭。<br>最充盈的东西好像空虚，它的作用不会穷尽。<br>最直的东西好像弯曲，最巧的东西好像笨拙，最善辩的人好像口吃。<br>躁动胜过寒冷，安静胜过炎热。<br>清静是天下的正道。</p>
</blockquote>
<h2 id="第四十六章"><a href="#第四十六章" class="headerlink" title="第四十六章"></a>第四十六章</h2><p>天下有道，却走马以粪。<br>天下无道，戎马生于郊。<br>祸莫大于不知足；咎莫大于欲得。<br>故知足之足，常足矣。</p>
<blockquote>
<p>天下有道，退却战马用来施肥。<br>天下无道，战马生于郊野。<br>祸患没有比不知足更大的；罪过没有比贪得更大的。<br>所以知足的满足，永远是满足。</p>
</blockquote>
<h2 id="第四十七章"><a href="#第四十七章" class="headerlink" title="第四十七章"></a>第四十七章</h2><p>不出户，知天下；不窥牖，见天道。<br>其出弥远，其知弥少。<br>是以圣人不行而知，不见而明，不为而成。</p>
<blockquote>
<p>不出门，知道天下；不看窗，看见天道。<br>走得越远，知道得越少。<br>因此圣人不行而知，不见而明，不为而成。</p>
</blockquote>
<h2 id="第四十八章"><a href="#第四十八章" class="headerlink" title="第四十八章"></a>第四十八章</h2><p>为学日益，为道日损。<br>损之又损，以至于无为。<br>无为而无不为。<br>取天下常以无事，及其有事，不足以取天下。</p>
<blockquote>
<p>求学日益增加，求道日益减少。<br>减少又减少，以至于无为。<br>无为而无不为。<br>取得天下常常以无事，如果有事，不足以取得天下。</p>
</blockquote>
<h2 id="第四十九章"><a href="#第四十九章" class="headerlink" title="第四十九章"></a>第四十九章</h2><p>圣人无常心，以百姓心为心。<br>善者吾善之，不善者吾亦善之，德善。<br>信者吾信之，不信者吾亦信之，德信。<br>圣人在天下，歙歙焉为天下浑其心，百姓皆注其耳目，圣人皆孩之。</p>
<blockquote>
<p>圣人没有固定的心，以百姓的心为心。<br>善良的人我善待他，不善良的人我也善待他，这是德善。<br>诚信的人我相信他，不诚信的人我也相信他，这是德信。<br>圣人在天下，收敛收敛为天下浑沌其心，百姓都专注他们的耳目，圣人都像孩子一样对待他们。</p>
</blockquote>
<h2 id="第五十章"><a href="#第五十章" class="headerlink" title="第五十章"></a>第五十章</h2><p>出生入死。<br>生之徒，十有三；死之徒，十有三；人之生，动之于死地，亦十有三。<br>夫何故？以其生生之厚。<br>盖闻善摄生者，陆行不遇兕虎，入军不被甲兵。<br>兕无所投其角，虎无所措其爪，兵无所容其刃。<br>夫何故？以其无死地。</p>
<blockquote>
<p>出生入死。<br>生存的途径，十分之三；死亡的途径，十分之三；人的生存，动辄陷入死地，也占十分之三。<br>为什么呢？因为他们追求生存的厚养。<br>听说善于摄生的人，陆行不会遇到犀牛老虎，入军不会受到兵器伤害。<br>犀牛没有地方投角，老虎没有地方措爪，兵器没有地方容刃。<br>为什么呢？因为他们没有死地。</p>
</blockquote>
<h2 id="第五十一章"><a href="#第五十一章" class="headerlink" title="第五十一章"></a>第五十一章</h2><p>道生之，德畜之，物形之，势成之。<br>是以万物莫不尊道而贵德。<br>道之尊，德之贵，夫莫之命而常自然。<br>故道生之，德畜之，长之育之，亭之毒之，养之覆之。<br>生而不有，为而不恃，长而不宰，是谓玄德。</p>
<blockquote>
<p>道生成万物，德养育万物，物形成万物，势成就万物。<br>因此万物没有不尊崇道而珍贵德的。<br>道的尊崇，德的珍贵，没有谁命令而常常自然。<br>所以道生成万物，德养育万物，生长养育，成熟结果，养育覆盖。<br>生养而不占有，作为而不依赖，成长而不主宰，这叫做玄德。</p>
</blockquote>
<h2 id="第五十二章"><a href="#第五十二章" class="headerlink" title="第五十二章"></a>第五十二章</h2><p>天下有始，以为天下母。<br>既得其母，以知其子；既知其子，复守其母，没身不殆。<br>塞其兑，闭其门，终身不勤。<br>开其兑，济其事，终身不救。<br>见小曰明，守柔曰强。<br>用其光，复归其明，无遗身殃，是为袭常。</p>
<blockquote>
<p>天下有开始，作为天下的母亲。<br>既然得到母亲，就知道儿子；既然知道儿子，又守住母亲，终身没有危险。<br>堵塞它的孔窍，关闭它的门户，终身不劳苦。<br>打开它的孔窍，成就它的事务，终身不可救。<br>看见微小叫做明，守住柔弱叫做强。<br>使用它的光，回归它的明，不给自身留下灾殃，这叫做袭常。</p>
</blockquote>
<h2 id="第五十三章"><a href="#第五十三章" class="headerlink" title="第五十三章"></a>第五十三章</h2><p>使我介然有知，行于大道，唯施是畏。<br>大道甚夷，而人好径。<br>朝甚除，田甚芜，仓甚虚；服文采，带利剑，厌饮食，财货有余，是谓盗夸。<br>非道也哉！</p>
<blockquote>
<p>假使我稍微有知，行走在大道上，只怕走入邪路。<br>大道很平坦，而人喜欢小路。<br>朝廷很腐败，田地很荒芜，仓库很空虚；穿着华丽的衣服，佩带锋利的剑，饱食终日，财货有余，这叫做盗夸。<br>这不是道啊！</p>
</blockquote>
<h2 id="第五十四章"><a href="#第五十四章" class="headerlink" title="第五十四章"></a>第五十四章</h2><p>善建者不拔，善抱者不脱，子孙以祭祀不辍。<br>修之于身，其德乃真；修之于家，其德乃余；修之于乡，其德乃长；修之于国，其德乃丰；修之于天下，其德乃普。<br>故以身观身，以家观家，以乡观乡，以国观国，以天下观天下。<br>吾何以知天下然哉？以此。</p>
<blockquote>
<p>善于建立的不会拔除，善于抱持的不会脱落，子孙祭祀不会断绝。<br>修之于身，他的德才真实；修之于家，他的德才有余；修之于乡，他的德才长久；修之于国，他的德才丰盛；修之于天下，他的德才普遍。<br>所以用身观察身，用家观察家，用乡观察乡，用国观察国，用天下观察天下。<br>我怎么知道天下的情况呢？就是通过这个。</p>
</blockquote>
<h2 id="第五十五章"><a href="#第五十五章" class="headerlink" title="第五十五章"></a>第五十五章</h2><p>含德之厚，比于赤子。<br>毒虫不螫，猛兽不据，攫鸟不搏。<br>骨弱筋柔而握固，未知牝牡之合而朘作，精之至也。<br>终日号而不嗄，和之至也。<br>知和曰常，知常曰明。<br>益生曰祥，心使气曰强。<br>物壮则老，谓之不道，不道早已。</p>
<blockquote>
<p>含德深厚的人，比得上婴儿。<br>毒虫不螫他，猛兽不抓他，猛禽不搏他。<br>筋骨柔弱而握持牢固，不知道男女交合而生殖器勃起，这是精气的极致。<br>整天哭号而不嘶哑，这是和谐的极致。<br>知道和谐叫做常，知道常叫做明。<br>增益生命叫做祥，心使气叫做强。<br>事物壮大了就会衰老，这叫做不符合道，不符合道就会早亡。</p>
</blockquote>
<h2 id="第五十六章"><a href="#第五十六章" class="headerlink" title="第五十六章"></a>第五十六章</h2><p>知者不言，言者不知。<br>塞其兑，闭其门，挫其锐，解其纷，和其光，同其尘，是谓玄同。<br>故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱。<br>故为天下贵。</p>
<blockquote>
<p>知道的人不说，说的人不知道。<br>堵塞它的孔窍，关闭它的门户，挫去它的锐利，解开它的纷乱，调和它的光芒，混同它的尘埃，这叫做玄同。<br>所以不能得到而亲近，不能得到而疏远；不能得到而利益，不能得到而损害；不能得到而尊贵，不能得到而卑贱。<br>所以为天下所珍贵。</p>
</blockquote>
<h2 id="第五十七章"><a href="#第五十七章" class="headerlink" title="第五十七章"></a>第五十七章</h2><p>以正治国，以奇用兵，以无事取天下。<br>吾何以知其然哉？以此：<br>天下多忌讳，而民弥贫；民多利器，国家滋昏；人多伎巧，奇物滋起；法令滋彰，盗贼多有。<br>故圣人云：我无为而民自化，我好静而民自正，我无事而民自富，我无欲而民自朴。</p>
<blockquote>
<p>用正道治理国家，用奇术用兵，用无事取得天下。<br>我怎么知道是这样呢？通过这个：<br>天下多忌讳，人民更加贫穷；人民多利器，国家更加混乱；人多伎巧，奇物更加兴起；法令更加彰明，盗贼更加多。<br>所以圣人说：我无为而人民自然化育，我好静而人民自然端正，我无事而人民自然富裕，我无欲而人民自然纯朴。</p>
</blockquote>
<h2 id="第五十八章"><a href="#第五十八章" class="headerlink" title="第五十八章"></a>第五十八章</h2><p>其政闷闷，其民淳淳；其政察察，其民缺缺。<br>祸兮福之所倚，福兮祸之所伏。<br>孰知其极？其无正也。<br>正复为奇，善复为妖。<br>人之迷，其日固久。<br>是以圣人方而不割，廉而不刿，直而不肆，光而不耀。</p>
<blockquote>
<p>政治宽厚，人民淳朴；政治严苛，人民狡诈。<br>祸患啊，幸福倚靠它；幸福啊，祸患潜伏其中。<br>谁知道它的极限？它没有定准。<br>正又变为奇，善又变为妖。<br>人的迷惑，日子已经很久了。<br>因此圣人方正而不割伤，廉洁而不刺人，正直而不放肆，光明而不耀眼。</p>
</blockquote>
<h2 id="第五十九章"><a href="#第五十九章" class="headerlink" title="第五十九章"></a>第五十九章</h2><p>治人事天，莫若啬。<br>夫唯啬，是谓早服；早服谓之重积德；重积德则无不克；无不克则莫知其极；莫知其极，可以有国；有国之母，可以长久。<br>是谓深根固柢，长生久视之道。</p>
<blockquote>
<p>治理人事，奉行天道，没有比节俭更好的。<br>只有节俭，这叫做早服；早服叫做重积德；重积德就无所不能；无所不能就不知道它的极限；不知道它的极限，就可以拥有国家；拥有国家的根本，可以长久。<br>这叫做深根固柢，长生久视的道。</p>
</blockquote>
<h2 id="第六十章"><a href="#第六十章" class="headerlink" title="第六十章"></a>第六十章</h2><p>治大国若烹小鲜。<br>以道莅天下，其鬼不神；非其鬼不神，其神不伤人；非其神不伤人，圣人亦不伤人。<br>夫两不相伤，故德交归焉。</p>
<blockquote>
<p>治理大国像烹煮小鱼。<br>用道来治理天下，鬼神就不灵验；不是鬼神不灵验，是鬼神不伤害人；不是鬼神不伤害人，圣人也不伤害人。<br>两者互不伤害，所以德交归于天下。</p>
</blockquote>
<h2 id="第六十一章"><a href="#第六十一章" class="headerlink" title="第六十一章"></a>第六十一章</h2><p>大邦者下流，天下之交，天下之牝。<br>牝常以静胜牡，以静为下。<br>故大邦以下小邦，则取小邦；小邦以下大邦，则取大邦。<br>故或下以取，或下而取。<br>大邦不过欲兼畜人，小邦不过欲入事人。<br>夫两者各得其所欲，大者宜为下。</p>
<blockquote>
<p>大国居于下流，是天下交汇的地方，是天下雌柔的地方。<br>雌柔常常以安静胜过雄强，以安静居于下位。<br>所以大国以谦下对待小国，就取得小国；小国以谦下对待大国，就取得大国。<br>所以有的谦下而取得，有的谦下而被取得。<br>大国不过想兼养人，小国不过想侍奉人。<br>两者各得其所欲，大国应该居于下位。</p>
</blockquote>
<h2 id="第六十二章"><a href="#第六十二章" class="headerlink" title="第六十二章"></a>第六十二章</h2><p>道者万物之奥，善人之宝，不善人之所保。<br>美言可以市尊，美行可以加人。<br>人之不善，何弃之有？<br>故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。<br>古之所以贵此道者何？不曰：求以得，有罪以免邪？故为天下贵。</p>
<blockquote>
<p>道是万物的奥秘，是善人的珍宝，是不善人的保护。<br>美好的言辞可以换取尊重，美好的行为可以加惠于人。<br>人的不善，有什么可抛弃的呢？<br>所以设立天子，设置三公，虽然有拱璧在先驷马在后，不如坐进此道。<br>古代之所以珍贵此道，为什么呢？不是说：求以得，有罪以免吗？所以为天下所珍贵。</p>
</blockquote>
<h2 id="第六十三章"><a href="#第六十三章" class="headerlink" title="第六十三章"></a>第六十三章</h2><p>为无为，事无事，味无味。<br>大小多少，报怨以德。<br>图难于其易，为大于其细。<br>天下难事必作于易，天下大事必作于细。<br>是以圣人终不为大，故能成其大。<br>夫轻诺必寡信，多易必多难。<br>是以圣人犹难之，故终无难矣。</p>
<blockquote>
<p>以无为的态度作为，以无事的态度做事，以无味的态度品味。<br>大小多少，用德来报答怨恨。<br>解决困难从容易处着手，做大事从细小处开始。<br>天下的难事必定从容易处做起，天下的大事必定从细小处开始。<br>因此圣人始终不做大事，所以能成就大事。<br>轻易许诺必定少有信用，多易必定多难。<br>因此圣人还认为难，所以最终没有困难。</p>
</blockquote>
<h2 id="第六十四章"><a href="#第六十四章" class="headerlink" title="第六十四章"></a>第六十四章</h2><p>其安易持，其未兆易谋，其脆易泮，其微易散。<br>为之于未有，治之于未乱。<br>合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。<br>为者败之，执者失之。<br>是以圣人无为故无败，无执故无失。<br>民之从事，常于几成而败之。<br>慎终如始，则无败事。<br>是以圣人欲不欲，不贵难得之货；学不学，复众人之所过。<br>以辅万物之自然，而不敢为。</p>
<blockquote>
<p>安定时容易保持，未显征兆时容易谋划，脆弱时容易分解，微小时容易散失。<br>在事情未发生前作为，在混乱未形成前治理。<br>合抱的大树，生于细小的萌芽；九层的高台，起于堆积的泥土；千里的行程，始于脚下的第一步。<br>作为的人会失败，执持的人会失去。<br>因此圣人无为所以没有失败，无执所以没有失去。<br>人们做事，常常在接近成功时失败。<br>谨慎终结如同开始，就没有失败的事。<br>因此圣人欲求无欲，不珍贵难得的货物；学习不学，补救众人的过失。<br>以辅助万物的自然，而不敢妄为。</p>
</blockquote>
<h2 id="第六十五章"><a href="#第六十五章" class="headerlink" title="第六十五章"></a>第六十五章</h2><p>古之善为道者，非以明民，将以愚之。<br>民之难治，以其智多。<br>故以智治国，国之贼；不以智治国，国之福。<br>知此两者亦稽式。<br>常知稽式，是谓玄德。<br>玄德深矣，远矣，与物反矣，然后乃至大顺。</p>
<blockquote>
<p>古代善于行道的人，不是使人民聪明，而是使人民愚朴。<br>人民难以治理，是因为他们的智慧太多。<br>所以用智慧治理国家，是国家的贼害；不用智慧治理国家，是国家的福气。<br>知道这两者也是法则。<br>常常知道法则，这叫做玄德。<br>玄德深奥啊，遥远啊，与万物相反啊，然后才能达到大顺。</p>
</blockquote>
<h2 id="第六十六章"><a href="#第六十六章" class="headerlink" title="第六十六章"></a>第六十六章</h2><p>江海所以能为百谷王者，以其善下之，故能为百谷王。<br>是以圣人欲上民，必以言下之；欲先民，必以身后之。<br>是以圣人处上而民不重，处前而民不害。<br>是以天下乐推而不厌。<br>以其不争，故天下莫能与之争。</p>
<blockquote>
<p>江海所以能成为百谷之王，是因为它善于居于下位，所以能成为百谷之王。<br>因此圣人想要居于人民之上，必须用言辞谦下；想要居于人民之前，必须把自身放在后面。<br>因此圣人居于上位而人民不感到沉重，居于前位而人民不感到妨害。<br>因此天下乐于推举而不厌弃。<br>因为他不争，所以天下没有人能与他争。</p>
</blockquote>
<h2 id="第六十七章"><a href="#第六十七章" class="headerlink" title="第六十七章"></a>第六十七章</h2><p>天下皆谓我道大，似不肖。<br>夫唯大，故似不肖。<br>若肖，久矣其细也夫！<br>我有三宝，持而保之。<br>一曰慈，二曰俭，三曰不敢为天下先。<br>慈故能勇；俭故能广；不敢为天下先，故能成器长。<br>今舍慈且勇，舍俭且广，舍后且先，死矣。<br>夫慈，以战则胜，以守则固。<br>天将救之，以慈卫之。</p>
<blockquote>
<p>天下都说我的道大，好像不像。<br>正因为大，所以好像不像。<br>如果像，早就细小了！<br>我有三宝，持守而保全。<br>一是慈，二是俭，三是不敢为天下先。<br>慈所以能勇；俭所以能广；不敢为天下先，所以能成为器物的长。<br>现在舍弃慈而求勇，舍弃俭而求广，舍弃后而求先，死路一条。<br>慈，用来战斗就能胜利，用来守卫就能坚固。<br>天将要救谁，就用慈来保卫他。</p>
</blockquote>
<h2 id="第六十八章"><a href="#第六十八章" class="headerlink" title="第六十八章"></a>第六十八章</h2><p>善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。<br>是谓不争之德，是谓用人之力，是谓配天古之极。</p>
<blockquote>
<p>善于为士的人不逞武，善于战斗的人不发怒，善于战胜敌人的人不交战，善于用人的人居于下位。<br>这叫做不争的德，这叫做用人的力量，这叫做配天古的极致。</p>
</blockquote>
<h2 id="第六十九章"><a href="#第六十九章" class="headerlink" title="第六十九章"></a>第六十九章</h2><p>用兵有言：吾不敢为主而为客，不敢进寸而退尺。<br>是谓行无行，攘无臂，扔无敌，执无兵。<br>祸莫大于轻敌，轻敌几丧吾宝。<br>故抗兵相加，哀者胜矣。</p>
<blockquote>
<p>用兵有言：我不敢为主而为客，不敢进寸而退尺。<br>这叫做行无行，攘无臂，扔无敌，执无兵。<br>祸患没有比轻敌更大的，轻敌几乎丧失我的宝。<br>所以两军对抗，哀者胜。</p>
</blockquote>
<h2 id="第七十章"><a href="#第七十章" class="headerlink" title="第七十章"></a>第七十章</h2><p>吾言甚易知，甚易行。<br>天下莫能知，莫能行。<br>言有宗，事有君。<br>夫唯无知，是以不我知。<br>知我者希，则我者贵。<br>是以圣人被褐怀玉。</p>
<blockquote>
<p>我的话很容易懂，很容易实行。<br>天下没有人能懂，没有人能实行。<br>言论有宗旨，事情有主宰。<br>正因为无知，所以不了解我。<br>了解我的人稀少，效法我的人珍贵。<br>因此圣人穿着粗布衣服，怀揣美玉。</p>
</blockquote>
<h2 id="第七十一章"><a href="#第七十一章" class="headerlink" title="第七十一章"></a>第七十一章</h2><p>知不知，上；不知知，病。<br>夫唯病病，是以不病。<br>圣人不病，以其病病，是以不病。</p>
<blockquote>
<p>知道自己不知道，是上等；不知道却自以为知道，是病。<br>正因为把病当作病，所以不病。<br>圣人不病，因为他把病当作病，所以不病。</p>
</blockquote>
<h2 id="第七十二章"><a href="#第七十二章" class="headerlink" title="第七十二章"></a>第七十二章</h2><p>民不畏威，则大威至。<br>无狎其所居，无厌其所生。<br>夫唯不厌，是以不厌。<br>是以圣人自知不自见，自爱不自贵。<br>故去彼取此。</p>
<blockquote>
<p>人民不畏惧威压，那么大的威压就会到来。<br>不要逼迫他们的居所，不要压榨他们的生活。<br>正因为不压榨，所以不被厌恶。<br>因此圣人自知而不自我表现，自爱而不自高自大。<br>所以舍弃那些而取这些。</p>
</blockquote>
<h2 id="第七十三章"><a href="#第七十三章" class="headerlink" title="第七十三章"></a>第七十三章</h2><p>勇于敢则杀，勇于不敢则活。<br>此两者，或利或害。<br>天之所恶，孰知其故？<br>是以圣人犹难之。<br>天之道，不争而善胜，不言而善应，不召而自来，繟然而善谋。<br>天网恢恢，疏而不失。</p>
<blockquote>
<p>勇于敢就会被杀，勇于不敢就能活。<br>这两者，有的有利，有的有害。<br>天所厌恶的，谁知道它的缘故？<br>因此圣人还认为难。<br>天的道，不争而善于胜利，不言而善于回应，不召而自来，坦然而善于谋划。<br>天网广大，稀疏而不漏失。</p>
</blockquote>
<h2 id="第七十四章"><a href="#第七十四章" class="headerlink" title="第七十四章"></a>第七十四章</h2><p>民不畏死，奈何以死惧之？<br>若使民常畏死，而为奇者，吾得执而杀之，孰敢？<br>常有司杀者杀。<br>夫代司杀者杀，是谓代大匠斫。<br>夫代大匠斫者，希有不伤其手矣。</p>
<blockquote>
<p>人民不畏惧死，为什么用死来恐吓他们？<br>如果使人民常常畏惧死，而为非作歹的人，我抓来杀掉，谁敢？<br>常常有司杀者来杀。<br>代替司杀者来杀，这叫做代替大匠砍削。<br>代替大匠砍削的人，很少有不伤到自己的手的。</p>
</blockquote>
<h2 id="第七十五章"><a href="#第七十五章" class="headerlink" title="第七十五章"></a>第七十五章</h2><p>民之饥，以其上食税之多，是以饥。<br>民之难治，以其上之有为，是以难治。<br>民之轻死，以其上求生之厚，是以轻死。<br>夫唯无以生为者，是贤于贵生。</p>
<blockquote>
<p>人民饥饿，是因为上面吃税太多，所以饥饿。<br>人民难以治理，是因为上面有为，所以难以治理。<br>人民轻视死，是因为上面追求生活太丰厚，所以轻视死。<br>只有不追求生活的人，比重视生活的人更贤明。</p>
</blockquote>
<h2 id="第七十六章"><a href="#第七十六章" class="headerlink" title="第七十六章"></a>第七十六章</h2><p>人之生也柔弱，其死也坚强。<br>万物草木之生也柔脆，其死也枯槁。<br>故坚强者死之徒，柔弱者生之徒。<br>是以兵强则灭，木强则折。<br>强大处下，柔弱处上。</p>
<blockquote>
<p>人活着时柔软，死了后僵硬。<br>万物草木活着时柔脆，死了后枯槁。<br>所以坚强的是死的同类，柔弱的是生的同类。<br>因此兵强就会灭亡，木强就会折断。<br>强大的居于下位，柔弱的居于上位。</p>
</blockquote>
<h2 id="第七十七章"><a href="#第七十七章" class="headerlink" title="第七十七章"></a>第七十七章</h2><p>天之道，其犹张弓与？<br>高者抑之，下者举之；有余者损之，不足者补之。<br>天之道，损有余而补不足。<br>人之道则不然，损不足以奉有余。<br>孰能有余以奉天下？唯有道者。<br>是以圣人为而不恃，功成而不处，其不欲见贤。</p>
<blockquote>
<p>天的道，不就像张弓吗？<br>高的压低它，低的抬高它；有余的减少它，不足的补充它。<br>天的道，减少有余而补充不足。<br>人的道却不是这样，减少不足而供奉有余。<br>谁能有余来供奉天下？只有有道的人。<br>因此圣人作为而不依赖，功成而不居功，他不愿意表现贤能。</p>
</blockquote>
<h2 id="第七十八章"><a href="#第七十八章" class="headerlink" title="第七十八章"></a>第七十八章</h2><p>天下莫柔弱于水，而攻坚强者莫之能胜，以其无以易之。<br>弱之胜强，柔之胜刚，天下莫不知，莫能行。<br>是以圣人云：受国之垢，是谓社稷主；受国不祥，是为天下王。<br>正言若反。</p>
<blockquote>
<p>天下没有比水更柔弱的，但攻击坚强的东西没有能胜过它的，因为它无法被替代。<br>弱胜过强，柔胜过刚，天下没有人不知道，但没有人能实行。<br>因此圣人说：承受国家的屈辱，这叫做社稷主；承受国家的灾祸，这叫做天下王。<br>正话好像反话。</p>
</blockquote>
<h2 id="第七十九章"><a href="#第七十九章" class="headerlink" title="第七十九章"></a>第七十九章</h2><p>和大怨，必有余怨，安可以为善？<br>是以圣人执左契，而不责于人。<br>有德司契，无德司彻。<br>天道无亲，常与善人。</p>
<blockquote>
<p>调和大的怨恨，必定还有余怨，怎么可以算是善？<br>因此圣人拿着左契，而不责备别人。<br>有德的人掌管契约，无德的人掌管税收。<br>天道没有亲疏，常常帮助善人。</p>
</blockquote>
<h2 id="第八十章"><a href="#第八十章" class="headerlink" title="第八十章"></a>第八十章</h2><p>小国寡民。<br>使有什伯之器而不用；使民重死而不远徙。<br>虽有舟舆，无所乘之；虽有甲兵，无所陈之。<br>使民复结绳而用之。<br>甘其食，美其服，安其居，乐其俗。<br>邻国相望，鸡犬之声相闻，民至老死不相往来。</p>
<blockquote>
<p>小国寡民。<br>使有各种器具而不使用；使人民重视死亡而不远徙。<br>虽然有船和车，没有地方乘坐；虽然有甲兵，没有地方陈列。<br>使人民重新结绳而使用。<br>甘于他们的食物，美于他们的衣服，安于他们的居所，乐于他们的风俗。<br>邻国互相望见，鸡犬的声音互相听见，人民到老死不相往来。</p>
</blockquote>
<h2 id="第八十一章"><a href="#第八十一章" class="headerlink" title="第八十一章"></a>第八十一章</h2><p>信言不美，美言不信。<br>善者不辩，辩者不善。<br>知者不博，博者不知。<br>圣人不积，既以为人己愈有，既以与人己愈多。<br>天之道，利而不害；圣人之道，为而不争。</p>
<blockquote>
<p>真实的话不华丽，华丽的话不真实。<br>善良的人不争辩，争辩的人不善良。<br>知道的人不广博，广博的人不知道。<br>圣人不积累，尽量帮助别人自己越有，尽量给予别人自己越多。<br>天的道，有利而不害；圣人的道，作为而不争。</p>
</blockquote>
]]></content>
      <categories>
        <category>中国古文</category>
      </categories>
  </entry>
  <entry>
    <title>编译原理概念速查</title>
    <url>//posts/6536aa06/</url>
    <content><![CDATA[<h1 id="编译原理概念速查"><a href="#编译原理概念速查" class="headerlink" title="编译原理概念速查"></a>编译原理概念速查</h1><h2 id="概述"><a href="#概述" class="headerlink" title="#概述"></a>#概述</h2><p>编译原理的定义、作用、基本功能、特点、层次结构。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="#定义"></a>#定义</h3><p>编译原理是计算机科学的一个分支，它主要研究如何将高级程序语言转换为计算机能够理解和执行的低级机器语言的过程。编译原理包括编译器设计和实现、解释器设计和实现、程序语言的语法和语义分析、代码优化、程序调试等内容。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="#作用"></a>#作用</h3><p>编译原理的作用是将高级语言编写的程序转换为计算机能够理解和执行的机器语言程序，从而实现高效、准确的计算机程序运行。编译原理的发展促进了程序设计的快速发展，使程序设计人员可以更加专注于程序的逻辑、算法和数据结构的设计。</p>
<h3 id="基本功能"><a href="#基本功能" class="headerlink" title="#基本功能"></a>#基本功能</h3><p>编译器的基本功能包括：词法分析、语法分析、语义分析、中间代码生成、代码优化和目标代码生成。其中，词法分析是将程序代码分解为单个单词或符号的过程；语法分析是确定程序代码的语法结构，并生成相应的语法树；语义分析是分析程序代码的含义，检查代码是否符合语言的语义规则；中间代码生成是将语法树转换为中间代码；代码优化是针对中间代码进行优化，以提高程序的执行效率；目标代码生成是将中间代码转换为目标机器的机器代码。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="#特点"></a>#特点</h3><p>编译原理的特点包括：复杂性、系统性、工程性和理论性。编译原理涉及多个学科领域的知识，如计算机体系结构、操作系统、算法和数据结构等。编译原理的研究需要掌握多种编程语言和工具，并且需要对计算机系统的各个层次有深入的理解。同时，编译原理研究也具有很强的工程应用价值，是计算机软件开发的重要组成部分。</p>
<h3 id="层次结构"><a href="#层次结构" class="headerlink" title="#层次结构"></a>#层次结构</h3><p>编译原理的层次结构包括语言层、编译器层和目标机层。语言层包括高级语言和汇编语言；编译器层包括编译器和解释器；目标机层包括机器指令和操作系统。编译器作为连接语言层和目标机层的桥梁，实现了高级语言到目标机的转换。同时，编译器还需要考虑语言层和目标机层之间的接口问题，如内存管理、I/O操作等。</p>
<h2 id="词法分析"><a href="#词法分析" class="headerlink" title="#词法分析"></a>#词法分析</h2><h3 id="词法单元"><a href="#词法单元" class="headerlink" title="#词法单元"></a>#词法单元</h3><p>编译原理课程中，词法单元（Lexical Unit）是编译器中的一个重要概念，用于将源代码划分为一个个的词法单元，从而为后续的语法分析和语义分析等编译器的处理步骤提供基础。词法单元是编程语言中最小的语法单元，通常由词法分析器（Lexer）负责识别和生成。</p>
<p>词法单元一般包括以下几个方面：</p>
<ul>
<li>标识符（Identifier）：表示程序中的变量名、函数名等符号，由一串字母和数字组成，通常以字母开头。</li>
<li>关键字（Keyword）：是编程语言中预先定义的具有特定含义的单词，例如if、else、while等，在编译过程中需要特殊处理。</li>
<li>运算符（Operator）：表示程序中的各种数学运算、逻辑运算等符号，例如+、-、*、/等。</li>
<li>分隔符（Delimiter）：表示程序中的各种符号，例如括号、逗号、分号等，用于标识程序的结构。</li>
<li>常量（Constant）：表示程序中的固定数值，例如整数常量、浮点数常量、字符串常量等。</li>
<li>注释（Comment）：用于在程序中添加注释，不参与实际的编译和执行。</li>
</ul>
<p>词法单元的识别通常通过正则表达式、有限自动机等方式进行，词法分析器会逐个扫描源代码，将其划分为一个个的词法单元，并将识别到的词法单元传递给语法分析器进行进一步的语法分析。</p>
<p>词法单元在编译器的各个阶段都起着重要的作用，包括语法分析、语义分析、中间代码生成和目标代码生成等过程都需要借助词法单元的信息进行处理。因此，对于编译原理课程来说，深入理解词法单元的概念和识别方法是非常重要的，它是编译器中的一个基础模块，对于编译器的设计和实现具有重要的指导意义。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="#正则表达式"></a>#正则表达式</h3><p>编译原理中的正则表达式（Regular Expression）是一种用于描述字符串模式的形式化语言。它在编译器中被广泛用于词法分析阶段，用于识别和匹配源代码中的词法单元，如标识符、关键字、运算符等。</p>
<p>正则表达式由一系列的字符和操作符组成，可以用于描述字符串中的字符序列的规则。以下是编译原理中常见的正则表达式操作符：</p>
<ul>
<li>字符匹配：用于匹配指定的字符，如字符”a”匹配字符”a”。</li>
<li>字符类：用于匹配一组字符中的任意一个字符，如”[abc]”匹配字符”a”、”b”或”c”。</li>
<li>范围类：用于匹配一定范围内的字符，如”[a-z]”匹配从”a”到”z”的任意小写字母。</li>
<li>量词：用于指定匹配的次数，如”*”匹配零次或多次，”+”匹配一次或多次，”?”匹配零次或一次。</li>
<li>括号：用于分组和捕获匹配的子表达式，如”(abc)”可以匹配”abc”。</li>
<li>转义符：用于转义特殊字符，如”.”匹配实际的点字符而不是表示任意字符的通配符。</li>
<li>选择符：用于在多个模式之间选择一个进行匹配，如”a|b”匹配”a”或”b”。</li>
</ul>
<p>正则表达式的语法和操作符可以根据不同的编程语言和工具而有所不同，但其基本原理和用法都是类似的。</p>
<p>在编译原理中，正则表达式通常由词法分析器使用，用于根据定义的词法规则，从源代码中提取出符合规则的词法单元。通过使用正则表达式，词法分析器可以高效地识别和划分源代码中的词法单元，为后续的语法分析和语义分析等编译器的处理步骤提供基础。因此，对于编译原理课程来说，理解和掌握正则表达式的概念和用法是非常重要的。</p>
<h3 id="有限自动机"><a href="#有限自动机" class="headerlink" title="#有限自动机"></a>#有限自动机</h3><p>有限自动机（Finite Automaton）是编译原理中的一个重要概念，用于描述和实现正则表达式的匹配过程。在词法分析阶段，有限自动机通常被用于识别和提取输入字符串中的词法单元。</p>
<p>有限自动机可以分为两种类型：确定性有限自动机（Deterministic Finite Automaton, DFA）和非确定性有限自动机（Nondeterministic Finite Automaton, NFA）。</p>
<p>DFA是一种每次只有一种可能的状态转换的有限自动机。它包含有限个状态和一组输入字符的转换规则，根据当前状态和输入字符，自动转换到下一个状态。DFA 的状态转换是确定的，即对于相同的输入字符和当前状态，只有一种可能的状态转换。DFA的状态转换可以通过状态转换表（Transition Table）或状态转换图（Transition Diagram）来表示。</p>
<p>NFA则可以有多个可能的状态转换，并且可以通过ε-转换（ε-transition）实现状态的跳转，即不需要读取输入字符就可以从一个状态转移到另一个状态。NFA的状态转换不是唯一确定的，需要根据输入字符和当前状态选择其中一条可能的状态转换路径。NFA的状态转换也可以通过状态转换表或状态转换图来表示。</p>
<p>有限自动机的匹配过程通常从初始状态开始，根据输入字符进行状态转换，直到到达一个终态（接受状态），表示成功匹配了一个模式。如果无法进行状态转换或没有到达终态，则表示匹配失败。</p>
<p>有限自动机在编译原理中扮演了重要角色，特别是在词法分析阶段中的词法单元识别过程。通过有限自动机，编译器可以高效地进行字符串的模式匹配，识别和提取出符合定义的词法单元，为后续的编译过程打下基础。同时，有限自动机也是其他计算理论和实际应用中的重要工具，如字符串匹配、编码器、编译器优化等领域都有广泛应用。</p>
<h3 id="NFA"><a href="#NFA" class="headerlink" title="#NFA"></a>#NFA</h3><p>NFA 是指非确定性有限自动机，它可以识别更复杂的正则表达式，并且可以进行自动化的状态合并操作。</p>
<h3 id="DFA"><a href="#DFA" class="headerlink" title="#DFA"></a>#DFA</h3><p>是指确定性有限自动机，它是一种更加高效的自动机，能够识别所有的正则表达式，并且可以通过最小化算法来实现状态的最小化。</p>
<h3 id="最小化算法"><a href="#最小化算法" class="headerlink" title="#最小化算法"></a>#最小化算法</h3><p>是一种用来将 DFA 中的状态集合合并的算法，以达到状态最小化的目的，从而提高词法分析器的性能。</p>
<h3 id="正则文法"><a href="#正则文法" class="headerlink" title="#正则文法"></a>#正则文法</h3><p>是一种描述正则表达式的上下文无关文法，它可以被用来生成一个词法分析器。</p>
<h3 id="词法分析器生成器"><a href="#词法分析器生成器" class="headerlink" title="#词法分析器生成器"></a>#词法分析器生成器</h3><p>是一种可以根据正则文法自动生成词法分析器的程序，例如 Lex 和 Flex。</p>
<h3 id="标记"><a href="#标记" class="headerlink" title="#标记"></a>#标记</h3><p>是指将词法单元转换成词法分析器输出的结果，包括单词类型和单词值等信息。</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="#错误处理"></a>#错误处理</h3><p>是指在词法分析过程中遇到无法识别的字符或者不符合规范的词法单元时，如何正确地处理这些错误情况。</p>
<h3 id="状态堆栈"><a href="#状态堆栈" class="headerlink" title="#状态堆栈"></a>#状态堆栈</h3><p>是一种用于保存词法分析器的状态信息的数据结构，它可以在分析过程中保存分析器的上下文信息，以实现更复杂的词法分析操作。</p>
<h3 id="正则表达式引擎"><a href="#正则表达式引擎" class="headerlink" title="#正则表达式引擎"></a>#正则表达式引擎</h3><p>是一种用于解释和匹配正则表达式的程序，它可以对输入的文本进行扫描和匹配，并输出匹配到的词法单元。</p>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="#字符集"></a>#字符集</h3><p>是指一组字符的集合，它可以用来描述正则表达式中的字符范围。</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="#转义字符"></a>#转义字符</h3><p>是指在正则表达式中使用反斜杠（\）来转义特殊字符的语法。例如，\d 表示任意数字字符。</p>
<h3 id="上下文相关的词法分析"><a href="#上下文相关的词法分析" class="headerlink" title="#上下文相关的词法分析"></a>#上下文相关的词法分析</h3><p>是指一种使用上下文信息来判断词法单元类型的词法分析方法。它可以通过上下文信息来区分类似于关键字和标识符之间的歧义。</p>
<h3 id="正则表达式的扩展语法"><a href="#正则表达式的扩展语法" class="headerlink" title="#正则表达式的扩展语法"></a>#正则表达式的扩展语法</h3><p>是指一些在标准正则表达式语法基础上扩展出来的更加丰富的语法，例如 POSIX 扩展和 Perl 扩展等。</p>
<h3 id="Unicode-支持"><a href="#Unicode-支持" class="headerlink" title="#Unicode 支持"></a>#Unicode 支持</h3><p>是指词法分析器能够支持 Unicode 字符集，以处理多语言字符集。</p>
<h3 id="向前看符号"><a href="#向前看符号" class="headerlink" title="#向前看符号"></a>#向前看符号</h3><p>是指在语法分析中，词法分析器向后读取多个字符，以判断当前词法单元的类型和属性。它通常用于处理上下文相关的词法单元，例如 C 语言中的 typedef 和 struct 等。</p>
<h3 id="词法分析的优化技术"><a href="#词法分析的优化技术" class="headerlink" title="#词法分析的优化技术"></a>#词法分析的优化技术</h3><p>是指一些可以提高词法分析器性能的技术，例如 DFA 最小化、正则表达式的预编译、词法单元缓存、多线程处理等。</p>
<h3 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="#语法制导翻译"></a>#语法制导翻译</h3><p>是指将语法分析和语义动作相结合的一种方法，它可以在语法分析的同时进行语义分析，从而实现语义动作和翻译过程的整合。</p>
<h2 id="语法分析"><a href="#语法分析" class="headerlink" title="#语法分析"></a>#语法分析</h2><h3 id="上下文无关文法（Context-Free-Grammar，CFG）"><a href="#上下文无关文法（Context-Free-Grammar，CFG）" class="headerlink" title="#上下文无关文法（Context-Free Grammar，CFG）"></a>#上下文无关文法（Context-Free Grammar，CFG）</h3><p>是指一类形式化的文法，用于描述一类语言。在编译原理中，常用 CFG 来描述程序的语法结构。</p>
<h3 id="推导（Derivation）"><a href="#推导（Derivation）" class="headerlink" title="#推导（Derivation）"></a>#推导（Derivation）</h3><p>是指按照 CFG 中的规则，从文法的起始符号开始，逐步生成出该文法所描述的语言中的句子的过程。</p>
<h3 id="语法树（Parse-Tree）"><a href="#语法树（Parse-Tree）" class="headerlink" title="#语法树（Parse Tree）"></a>#语法树（Parse Tree）</h3><p>是指由语法分析器构建出的一种树形结构，用于表示一个程序的语法结构。</p>
<h3 id="终结符号（Terminal-Symbol）"><a href="#终结符号（Terminal-Symbol）" class="headerlink" title="#终结符号（Terminal Symbol）"></a>#终结符号（Terminal Symbol）</h3><p>是指 CFG 中不再进行推导的符号，通常代表程序中的基本语法单元，例如关键字、标识符、操作符等。</p>
<h3 id="非终结符号（Nonterminal-Symbol）"><a href="#非终结符号（Nonterminal-Symbol）" class="headerlink" title="#非终结符号（Nonterminal Symbol）"></a>#非终结符号（Nonterminal Symbol）</h3><p>是指 CFG 中可以进行推导的符号，通常代表程序中的语法结构。</p>
<h3 id="FIRST-集合"><a href="#FIRST-集合" class="headerlink" title="#FIRST 集合"></a>#FIRST 集合</h3><p>是指 CFG 中某个符号可以推导出的所有终结符号的集合。</p>
<h3 id="FOLLOW-集合"><a href="#FOLLOW-集合" class="headerlink" title="#FOLLOW 集合"></a>#FOLLOW 集合</h3><p>是指 CFG 中某个非终结符号在某些情况下可以紧跟着的所有终结符号的集合。</p>
<h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="#LL(1) 文法"></a>#LL(1) 文法</h3><p>是指一类特殊的 CFG，它具有良好的语法特性，可以用于构建预测分析表，从而实现高效的语法分析。</p>
<h3 id="语法分析器"><a href="#语法分析器" class="headerlink" title="#语法分析器"></a>#语法分析器</h3><p>是指用于对程序进行语法分析的程序或工具。常用的语法分析算法包括 LL 分析、LR 分析、LALR 分析等。</p>
<h3 id="语法错误（Syntax-Error）"><a href="#语法错误（Syntax-Error）" class="headerlink" title="#语法错误（Syntax Error）"></a>#语法错误（Syntax Error）</h3><p>是指程序中存在语法错误，不能正确进行语法分析的情况。语法错误通常会导致编译器报错，无法继续进行编译。</p>
<h3 id="语法分析栈（Parsing-Stack）"><a href="#语法分析栈（Parsing-Stack）" class="headerlink" title="#语法分析栈（Parsing Stack）"></a>#语法分析栈（Parsing Stack）</h3><p>是指在语法分析过程中，用于保存符号序列的数据结构。它通常与语法分析表一起使用，用于确定下一步的语法分析动作。</p>
<h3 id="预测分析表（Parsing-Table）"><a href="#预测分析表（Parsing-Table）" class="headerlink" title="#预测分析表（Parsing Table）"></a>#预测分析表（Parsing Table）</h3><p>是指在 LL(1) 文法中，用于指导语法分析器进行语法分析的一张表格。它以语法分析栈的栈顶符号和当前输入符号为索引，提供下一步要进行的语法分析动作。</p>
<h3 id="语法制导翻译（Syntax-Directed-Translation）"><a href="#语法制导翻译（Syntax-Directed-Translation）" class="headerlink" title="#语法制导翻译（Syntax-Directed Translation）"></a>#语法制导翻译（Syntax-Directed Translation）</h3><p>是指通过语法分析器对程序进行语法分析的同时，直接生成目标代码的过程。在语法制导翻译中，通常会为 CFG 中的每个产生式规则指定相应的动作，用于生成目标代码。</p>
<h3 id="属性文法（Attribute-Grammar）"><a href="#属性文法（Attribute-Grammar）" class="headerlink" title="#属性文法（Attribute Grammar）"></a>#属性文法（Attribute Grammar）</h3><p>是指一种扩展的文法形式，用于描述产生式规则中的属性计算和传递。在属性文法中，每个符号都可以附加一个或多个属性，并通过产生式规则中的属性计算和传递来推导出符号的最终属性值。</p>
<h3 id="语法制导翻译器（Syntax-Directed-Compiler）"><a href="#语法制导翻译器（Syntax-Directed-Compiler）" class="headerlink" title="#语法制导翻译器（Syntax-Directed Compiler）"></a>#语法制导翻译器（Syntax-Directed Compiler）</h3><p>是指一类编译器，它通过结合语法分析器和语法制导翻译技术，直接将程序转换为目标代码。与传统的编译器不同，语法制导翻译器不需要生成中间代码，可以直接将程序转换为可执行的目标代码。</p>
<h3 id="语义动作（Semantic-Action）"><a href="#语义动作（Semantic-Action）" class="headerlink" title="#语义动作（Semantic Action）"></a>#语义动作（Semantic Action）</h3><p>是指在语法制导翻译中，由产生式规则中的语义动作指定的一系列操作，用于生成目标代码或更新语法分析树的属性值。</p>
<h3 id="语义分析器（Semantic-Analyzer）"><a href="#语义分析器（Semantic-Analyzer）" class="headerlink" title="#语义分析器（Semantic Analyzer）"></a>#语义分析器（Semantic Analyzer）</h3><p>是指编译器中的一个模块，用于对程序进行语义分析。语义分析器主要负责类型检查、作用域分析、常量折叠等任务，以确保程序的语义正确性。</p>
<h3 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="#作用域（Scope）"></a>#作用域（Scope）</h3><p>是指程序中变量、函数等实体的可访问范围。作用域规定了一个实体在程序中的有效可见范围，并决定了如何解析名称。</p>
<h3 id="符号表（Symbol-Table）"><a href="#符号表（Symbol-Table）" class="headerlink" title="#符号表（Symbol Table）"></a>#符号表（Symbol Table）</h3><p>是指编译器中用于存储变量、函数等实体信息的数据结构。符号表中通常包括每个实体的名称、类型、作用域、地址等信息。</p>
<h3 id="类型检查（Type-Checking）"><a href="#类型检查（Type-Checking）" class="headerlink" title="#类型检查（Type Checking）"></a>#类型检查（Type Checking）</h3><p>是指在编译器中对程序进行的一项重要的语义分析，它用于检查程序中的类型错误，包括类型不匹配、类型转换错误等。类型检查是保证程序语义正确性的重要手段。</p>
<h3 id="语义错误（Semantic-Error）"><a href="#语义错误（Semantic-Error）" class="headerlink" title="#语义错误（Semantic Error）"></a>#语义错误（Semantic Error）</h3><p>是指在程序语义分析过程中发现的错误，包括类型错误、作用域错误、常量溢出等。语义错误通常需要被编译器识别并报告给用户，以便于程序员进行修复。</p>
<h3 id="中间代码（Intermediate-Code）"><a href="#中间代码（Intermediate-Code）" class="headerlink" title="#中间代码（Intermediate Code）"></a>#中间代码（Intermediate Code）</h3><p>是指在编译器中生成的一种抽象的中间表示形式，用于连接语法分析和目标代码生成之间的过渡。中间代码可以是一种低级的虚拟机指令集合，也可以是一种高级的抽象语言形式。</p>
<h3 id="优化（Optimization）"><a href="#优化（Optimization）" class="headerlink" title="#优化（Optimization）"></a>#优化（Optimization）</h3><p>是指在编译器中对程序进行的一种重要的优化处理，用于提高程序的运行效率和空间利用率。编译器可以对程序进行各种优化，如常量折叠、循环展开、指令调度等。</p>
<h2 id="语义分析"><a href="#语义分析" class="headerlink" title="#语义分析"></a>#语义分析</h2><p>在编译原理中，语义分析是指对源程序中表达的语义进行分析和处理，以检查程序中的语义错误、推断类型、构造中间代码等。</p>
<p>以下是语义分析中的一些重要概念。</p>
<h3 id="语义"><a href="#语义" class="headerlink" title="#语义"></a>#语义</h3><p>指一个程序或语句在运行时所表达的意义或含义。</p>
<h3 id="语义错误"><a href="#语义错误" class="headerlink" title="#语义错误"></a>#语义错误</h3><p>指程序中违反了语言的语义规则或逻辑规则所导致的错误，如类型不匹配、未定义的标识符等。</p>
<h3 id="符号表"><a href="#符号表" class="headerlink" title="#符号表"></a>#符号表</h3><p>指用于存储程序中所有标识符信息的数据结构，包括标识符的名称、类型、作用域等信息。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="#作用域"></a>#作用域</h3><p>指变量或标识符的有效范围，即变量或标识符可以被访问的代码块范围。</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="#类型"></a>#类型</h3><p>指变量或表达式所代表的数据类型，如整数、浮点数、布尔值等。</p>
<h3 id="类型检查"><a href="#类型检查" class="headerlink" title="#类型检查"></a>#类型检查</h3><p>指在编译过程中对程序中的类型进行检查，以确保类型的正确性和一致性。</p>
<h3 id="中间代码"><a href="#中间代码" class="headerlink" title="#中间代码"></a>#中间代码</h3><p>指在编译过程中生成的一种抽象的、中间的代码表示形式，可以用于后续的优化和转换。</p>
<h3 id="语法制导翻译-1"><a href="#语法制导翻译-1" class="headerlink" title="#语法制导翻译"></a>#语法制导翻译</h3><p>指在语法分析的过程中，通过对语法规则的扩展，将翻译动作嵌入到语法分析过程中，以便生成中间代码或目标代码。</p>
<h3 id="语义动作"><a href="#语义动作" class="headerlink" title="#语义动作"></a>#语义动作</h3><p>指在语法分析的同时执行的操作，用于计算属性值、检查类型、更新符号表等。</p>
<h3 id="类型系统"><a href="#类型系统" class="headerlink" title="#类型系统"></a>#类型系统</h3><p>指用于描述和检查程序中各种数据类型及其操作的系统。</p>
<h3 id="作用域嵌套和静态链"><a href="#作用域嵌套和静态链" class="headerlink" title="#作用域嵌套和静态链"></a>#作用域嵌套和静态链</h3><p>在处理作用域嵌套时，可以使用静态链来管理作用域的嵌套关系。静态链可以用于查找变量的定义、访问外层作用域的变量等。</p>
<h3 id="运行时环境和存储管理"><a href="#运行时环境和存储管理" class="headerlink" title="#运行时环境和存储管理"></a>#运行时环境和存储管理</h3><p>运行时环境是指程序在运行时所需的各种资源，包括内存、堆栈、寄存器等。在语义分析阶段，需要对程序的存储需求进行分析和规划，以保证程序运行的正确性和效率。</p>
<h3 id="代码生成和优化"><a href="#代码生成和优化" class="headerlink" title="#代码生成和优化"></a>#代码生成和优化</h3><p>在语义分析阶段结束后，需要将源程序转换为中间代码或目标代码，并进行优化和调整，以提高代码的执行效率和空间利用率。</p>
<h3 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="#中间代码生成"></a>#中间代码生成</h3><p>指将源代码转换为中间代码的过程。中间代码可以是一种抽象的指令序列，也可以是一种具有结构的数据结构，例如语法树。</p>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="#代码优化"></a>#代码优化</h3><p>指通过改变代码结构或执行顺序等手段，以提高代码的性能或可读性。代码优化的目标是使程序运行更快、占用更少的内存，或者使代码更易于维护。</p>
<h3 id="数据流分析"><a href="#数据流分析" class="headerlink" title="#数据流分析"></a>#数据流分析</h3><p>指对程序中的数据流进行分析，以得到程序中变量的值或取值范围等信息。数据流分析通常用于代码优化和错误检测。</p>
<h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="#代码生成器"></a>#代码生成器</h3><p>指将中间代码转换为目标机器代码的程序。代码生成器需要考虑目标机器的指令集、寄存器分配、指令选择等问题，以保证生成的代码能够在目标机器上正确执行。</p>
<h3 id="运行时错误"><a href="#运行时错误" class="headerlink" title="#运行时错误"></a>#运行时错误</h3><p>指程序在运行时产生的错误，如除零错误、内存访问错误等。运行时错误通常需要在编译器生成的代码中插入异常处理代码来处理。</p>
<h3 id="代码调试"><a href="#代码调试" class="headerlink" title="#代码调试"></a>#代码调试</h3><p>指通过分析程序的运行状态来发现和修复程序中的错误。代码调试通常需要使用调试器等工具来实现。</p>
<h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="#汇编语言"></a>#汇编语言</h3><p>指一种较低层次的程序语言，用于编写机器语言指令。汇编语言通常比高级语言更接近机器的底层，但也更难以编写和调试。</p>
<h2 id="中间代码生成-1"><a href="#中间代码生成-1" class="headerlink" title="#中间代码生成"></a>#中间代码生成</h2><h3 id="中间代码（Intermediate-Code）-1"><a href="#中间代码（Intermediate-Code）-1" class="headerlink" title="#中间代码（Intermediate Code）"></a>#中间代码（Intermediate Code）</h3><p>是编译器在源代码和目标代码之间生成的一种抽象表示形式，它通常比源代码和目标代码都要简单和易于处理。</p>
<h3 id="三地址码（Three-Address-Code）"><a href="#三地址码（Three-Address-Code）" class="headerlink" title="#三地址码（Three-Address Code）"></a>#三地址码（Three-Address Code）</h3><p>是一种简单的中间代码表示形式，每个语句都包含最多三个操作数，用于执行基本的算术和逻辑运算。</p>
<h3 id="控制流语句（Control-Flow-Statements）"><a href="#控制流语句（Control-Flow-Statements）" class="headerlink" title="#控制流语句（Control Flow Statements）"></a>#控制流语句（Control Flow Statements）</h3><p>是指程序中的条件语句和循环语句，用于控制程序的执行流程。在中间代码生成中，需要将这些语句转换为等价的三地址码。</p>
<h3 id="基本块（Basic-Block）"><a href="#基本块（Basic-Block）" class="headerlink" title="#基本块（Basic Block）"></a>#基本块（Basic Block）</h3><p>是指程序中的一段连续的代码，其中只包含一个入口点和一个出口点。在中间代码生成中，基本块通常是由控制流语句或标签语句分割的代码块。</p>
<h3 id="流图（Flow-Graph）"><a href="#流图（Flow-Graph）" class="headerlink" title="#流图（Flow Graph）"></a>#流图（Flow Graph）</h3><p>是指程序中所有基本块之间的控制流关系所组成的图。在中间代码生成中，流图通常用于进行基本块的优化和代码生成。</p>
<h3 id="寄存器分配（Register-Allocation）"><a href="#寄存器分配（Register-Allocation）" class="headerlink" title="#寄存器分配（Register Allocation）"></a>#寄存器分配（Register Allocation）</h3><p>是指将程序中的变量分配到CPU寄存器上，以提高程序的运行效率。在中间代码生成中，需要进行寄存器分配，以便于生成高效的目标代码。</p>
<h3 id="活跃变量分析（Live-Variable-Analysis）"><a href="#活跃变量分析（Live-Variable-Analysis）" class="headerlink" title="#活跃变量分析（Live Variable Analysis）"></a>#活跃变量分析（Live Variable Analysis）</h3><p>是指分析程序中每个变量的生命周期，以确定何时可以释放该变量所占用的内存空间。在中间代码生成中，需要进行活跃变量分析，以便于在生成目标代码时释放不再需要的变量。</p>
<h3 id="常量折叠（Constant-Folding）"><a href="#常量折叠（Constant-Folding）" class="headerlink" title="#常量折叠（Constant Folding）"></a>#常量折叠（Constant Folding）</h3><p>是指在编译器中对程序中的常量表达式进行求值，以减少程序运行时的计算量。在中间代码生成中，可以通过常量折叠来优化程序的性能。</p>
<h3 id="指令选择（Instruction-Selection）"><a href="#指令选择（Instruction-Selection）" class="headerlink" title="#指令选择（Instruction Selection）"></a>#指令选择（Instruction Selection）</h3><p>是指在中间代码和目标代码之间选择合适的指令序列，以满足目标机器的特定需求。在中间代码生成中，需要进行指令选择，以便于生成高效的目标代码。</p>
<h3 id="目标代码生成（Code-Generation）"><a href="#目标代码生成（Code-Generation）" class="headerlink" title="#目标代码生成（Code Generation）"></a>#目标代码生成（Code Generation）</h3><p>是指将中间代码转换为目标机器的机器代码。在中间代码生成的最后阶段，需要进行目标代码生成，以便于生成可执行的目标程序。</p>
<h3 id="活跃变量分析（Live-Variable-Analysis）-1"><a href="#活跃变量分析（Live-Variable-Analysis）-1" class="headerlink" title="#活跃变量分析（Live Variable Analysis）"></a>#活跃变量分析（Live Variable Analysis）</h3><p>在中间代码中，对于每个指令计算出其定义变量在程序控制流到达该指令之前是否被使用，如果被使用则称该变量在该指令处是活跃的，否则是不活跃的。这个分析可以用来优化寄存器的分配，避免不必要的寄存器保存。</p>
<h3 id="常量折叠（Constant-Folding）-1"><a href="#常量折叠（Constant-Folding）-1" class="headerlink" title="#常量折叠（Constant Folding）"></a>#常量折叠（Constant Folding）</h3><p>在中间代码中，将常量表达式在编译时求值，然后将结果作为常量替换原表达式。这个优化可以减少代码的运行时开销。</p>
<h3 id="变量替换（Variable-Substitution）"><a href="#变量替换（Variable-Substitution）" class="headerlink" title="#变量替换（Variable Substitution）"></a>#变量替换（Variable Substitution）</h3><p>在中间代码中，将某些变量用其它变量替换，以减少中间代码的大小和复杂度。例如，可以将一个变量的值替换为另一个变量的值，或者将一个表达式的结果赋给多个变量时，将它们用一个临时变量替换。</p>
<h3 id="常量传播（Constant-Propagation）"><a href="#常量传播（Constant-Propagation）" class="headerlink" title="#常量传播（Constant Propagation）"></a>#常量传播（Constant Propagation）</h3><p>在中间代码中，将某些表达式的变量用其它变量或常量替换，以简化表达式并减少中间代码的大小和复杂度。例如，将一个变量的值替换为一个已知的常量或另一个变量的值，或者将一个变量的值用于只有一个可能的常量值的算术运算时，将表达式简化为常量。</p>
<h3 id="数组和指针引用优化"><a href="#数组和指针引用优化" class="headerlink" title="#数组和指针引用优化"></a>#数组和指针引用优化</h3><p>针对数组和指针的访问，可以进行一些优化，例如使用指针算术运算代替数组索引运算，减少不必要的指针解引用等。</p>
<h3 id="函数内联（Function-Inlining）"><a href="#函数内联（Function-Inlining）" class="headerlink" title="#函数内联（Function Inlining）"></a>#函数内联（Function Inlining）</h3><p>在中间代码中，将函数调用替换为函数体中的代码，以减少函数调用开销。这个优化可以提高程序的执行速度，但会增加代码的大小和复杂度。</p>
<h3 id="循环优化"><a href="#循环优化" class="headerlink" title="#循环优化"></a>#循环优化</h3><p>针对循环结构，可以进行一些优化，例如循环展开、循环不变式外提、循环拆分、循环划分等。这些优化可以减少循环控制的开销和内存访问开销，提高程序的执行速度。</p>
<h2 id="目标代码生成"><a href="#目标代码生成" class="headerlink" title="#目标代码生成"></a>#目标代码生成</h2><h3 id="目标机器"><a href="#目标机器" class="headerlink" title="#目标机器"></a>#目标机器</h3><p>目标代码生成需要针对特定的目标机器，因为不同的机器有不同的指令集和内存结构，所以生成的代码需要适应不同的机器。</p>
<h3 id="目标代码"><a href="#目标代码" class="headerlink" title="#目标代码"></a>#目标代码</h3><p>目标代码是一种可以直接在目标机器上执行的机器语言代码。</p>
<h3 id="寄存器分配"><a href="#寄存器分配" class="headerlink" title="#寄存器分配"></a>#寄存器分配</h3><p>目标代码生成过程中需要考虑如何利用寄存器，将变量和临时值存储在寄存器中可以提高程序的执行效率。寄存器分配算法可以将变量和临时值分配到可用的寄存器中。</p>
<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="#内存分配"></a>#内存分配</h3><p>如果寄存器不够用，那么就需要将变量和临时值存储在内存中。内存分配算法可以将变量和临时值分配到可用的内存位置中。</p>
<h3 id="代码优化-1"><a href="#代码优化-1" class="headerlink" title="#代码优化"></a>#代码优化</h3><p>目标代码生成过程中可以进行一些代码优化，以提高代码的执行效率。代码优化可以在代码生成的过程中进行，也可以在生成的代码上进行。</p>
<h3 id="代码生成算法"><a href="#代码生成算法" class="headerlink" title="#代码生成算法"></a>#代码生成算法</h3><p>代码生成算法是将中间代码转换为目标代码的核心部分，常见的算法有基于栈的代码生成算法、基于寄存器的代码生成算法、线性扫描算法等。</p>
<h3 id="汇编语言-1"><a href="#汇编语言-1" class="headerlink" title="#汇编语言"></a>#汇编语言</h3><p>汇编语言是一种与机器语言密切相关的低级语言，它可以将机器语言代码以易于理解的助记符表示出来。目标代码生成过程中通常会生成汇编语言代码，再由汇编器将其转换为机器语言代码。</p>
<h2 id="目标代码优化"><a href="#目标代码优化" class="headerlink" title="#目标代码优化"></a>#目标代码优化</h2><h3 id="优化策略"><a href="#优化策略" class="headerlink" title="#优化策略"></a>#优化策略</h3><p>目标代码优化的过程中，采用的具体优化手段和算法，包括局部优化和全局优化。</p>
<h3 id="数据流分析-1"><a href="#数据流分析-1" class="headerlink" title="#数据流分析"></a>#数据流分析</h3><p>一种静态分析技术，用于获取程序在执行过程中变量的值和控制流等信息，以便进行优化。</p>
<h3 id="基本块"><a href="#基本块" class="headerlink" title="#基本块"></a>#基本块</h3><p>是一个连续的、没有分支的代码序列，其中只有一个入口和一个出口。基本块是进行优化的基本单位。</p>
<h3 id="控制流图"><a href="#控制流图" class="headerlink" title="#控制流图"></a>#控制流图</h3><p>程序中各个基本块之间的控制流关系的图形表示，可以用于分析和优化程序的执行路径。</p>
<h3 id="活跃变量分析"><a href="#活跃变量分析" class="headerlink" title="#活跃变量分析"></a>#活跃变量分析</h3><p>一种数据流分析技术，用于分析程序执行过程中哪些变量的值会在之后的执行中被使用，以便进行优化。</p>
<h3 id="冗余代码删除"><a href="#冗余代码删除" class="headerlink" title="#冗余代码删除"></a>#冗余代码删除</h3><p>在程序执行中不会对结果产生影响的代码被称为冗余代码。删除冗余代码可以减小目标代码的体积和执行时间。</p>
<h3 id="常量折叠"><a href="#常量折叠" class="headerlink" title="#常量折叠"></a>#常量折叠</h3><p>在编译器优化阶段，将程序中的常量表达式计算出结果，并用结果代替表达式。</p>
<h3 id="循环优化-1"><a href="#循环优化-1" class="headerlink" title="#循环优化"></a>#循环优化</h3><p>循环是程序中重要的控制结构，循环优化可以通过控制循环的执行顺序和次数，来提高程序的效率。</p>
<h3 id="代码调度"><a href="#代码调度" class="headerlink" title="#代码调度"></a>#代码调度</h3><p>将指令重新排序，使得相邻的指令能够共享寄存器和缓存等计算资源，以提高程序的执行效率。</p>
<h3 id="寄存器分配-1"><a href="#寄存器分配-1" class="headerlink" title="#寄存器分配"></a>#寄存器分配</h3><p>在目标代码生成过程中，将程序中需要用到的变量映射到可用的寄存器中，以减少访问内存的次数，提高程序的执行速度。</p>
<h3 id="函数内联"><a href="#函数内联" class="headerlink" title="#函数内联"></a>#函数内联</h3><p>将函数调用的代码直接插入到调用处，减少函数调用的开销，提高程序的执行效率。</p>
<h3 id="代码复用"><a href="#代码复用" class="headerlink" title="#代码复用"></a>#代码复用</h3><p>将程序中重复出现的代码块提取成函数或模块，避免代码重复，提高代码的可维护性。</p>
<h3 id="变量存储优化"><a href="#变量存储优化" class="headerlink" title="#变量存储优化"></a>#变量存储优化</h3><p>优化程序中变量的内存存储方式，例如将全局变量转化为局部变量等，减少内存访问次数，提高程序的执行效率。</p>
<h3 id="并行化优化"><a href="#并行化优化" class="headerlink" title="#并行化优化"></a>#并行化优化</h3><p>利用多核处理器等多种技术，将程序中的计算任务并行化，以提高程序的执行效率。</p>
<h3 id="代码生成"><a href="#代码生成" class="headerlink" title="#代码生成"></a>#代码生成</h3><p>根据中间代码生成目标机器的汇编代码或机器码，需要考虑处理器指令集、内存访问模式等因素，以产生高效的目标代码。</p>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>黑客hacker</title>
    <url>//posts/681d364f/</url>
    <content><![CDATA[<blockquote>
<p>因为有很多人对黑客有误解，同时前不久刚读完《黑客与画家》这本书，对真正的黑客及其文化精神有了一个新的认识，所以作此纪录。</p>
</blockquote>
<h2 id="1-黑客含义"><a href="#1-黑客含义" class="headerlink" title="1. 黑客含义"></a>1. 黑客含义</h2><p><strong>黑客</strong>（英语：Hacker）是指对[设计]、[编程]和[计算机科学]方面具高度理解的人，此群体包含了下列人物：</p>
<ul>
<li>“黑客”一词最早是用来称呼研究如何盗用电话系统的人，这一类人士也被称作“<strong>[飞客]</strong>”（Phreaker）；</li>
<li>在计算机软件方面，“黑客”是对于计算机及计算机网络内部系统运作特别感兴趣并且有深入理解能力的一群人；</li>
<li>在业余计算机[DIY]方面，“黑客”是指研究如何修改计算机相关产品的业余爱好者。从1970年代起，有很多这一类社群聚焦于硬件研究；</li>
<li>在[信息安全]里，“[黑客]”指研究如何智取计算机安全系统的人员。他们利用公共通讯网路，如电话系统和互联网，以非正规手段登录对方系统，掌握操控系统之权力。</li>
</ul>
<p>黑客（Hacker）当中的中文音译“黑”字总使人对黑客有所误解，真实的黑客主要是指技术高超的[程序员]，而“[溃客]”（Cracker）才是专指对计算机系统及网络进行恶意破坏的人。除了精通编程与操作系统运作的人可以被视作黑客，对[硬件]设备进行创新的工程师通常也被认为是黑客，另外现在精通网络入侵的人也被看作是黑客。然而在媒体的推波助澜下，“黑客”这一词早已被污名化，由于影视作品、媒体报导通常描述他们进行违法行为，使主流社会一般把黑客看作为“[计算机犯罪分子]”（Cybercriminal）。</p>
<p>“Hacker”（黑客）一般是指：</p>
<ul>
<li>一个对（某领域内的）[编程语言]有足够了解，可以不需长久思考便创造出有用<a href="https://zh.wikipedia.org/wiki/软件">软件</a>的人；</li>
<li>喜爱[编程]并享受在其中，而变得愈加擅长于编程的人；</li>
<li>他们喜爱[自由]、不易受约束，但假如是为了喜爱的事物，则可以接受被适当地约束。</li>
</ul>
<p>这一群人试图破解某个程序、系统或网络，依目的大致可分为3个类型：[白帽黑客]（White Hat）、[灰帽黑客]（Grey Hat）、[黑帽黑客]（Black Hat），该名称取自美国电影西部片中，正派往往戴白帽，反派往往戴黑帽。</p>
<p>白帽黑客以“改善”为目标，破解某个程序做出（往往是好的）修改，而增强（或改变）该程序之用途，或者透过入侵去提醒设备的系统管理者其安全漏洞，有时甚至主动予以修补，故又称“道德黑客”（Ethical Hacker）。灰帽黑客以“昭告”为目标，透过破解、入侵去炫耀自己拥有高超的技术，或者宣扬某种理念。黑帽黑客以“利欲”为目标，透过破解、入侵去获取不法利益，或者发泄负面情绪。其中，白帽黑客大多是电脑安全公司的雇员，抑或响应招测单位的悬赏，通常是在合法的情况下攻击某系统，而黑帽黑客同时也被称作“Cracker”（溃客）。</p>
<h3 id="溃客"><a href="#溃客" class="headerlink" title="溃客"></a>溃客</h3><p>除了 Hacker 之外，Cracker 一词也常被误译成“黑客”，但实际上 Cracker 应该翻译成“[溃客]”。它之相异其他黑客是在于：</p>
<ul>
<li>一个恶意（一般是非法地）试图破解某个程序、系统或网络，进而窃盗、毁损或使其瘫痪的人；</li>
<li>Cracker 缺乏[道德]标准，也没有“黑客精神”；</li>
<li>狭义上的 Hacker 做建设，而 Cracker 则是做破坏。</li>
</ul>
<p>Hacker 和 Cracker 这两个词，在英文里意思是有所差异的，但在中文里经常被当作同一个概念，共同以“Hacker”进行翻译，于[香港]和[澳门]依[粤语]皆被音译为“黑客”，且[中国大陆]也延用了该译法（但以普通话发音），于[台湾]则皆被音译为“骇客”，而[新加坡]和[马来西亚]所采用的是前者。换言之，“黑客”一词既指对编程语言有足够了解并喜欢编程的人，在误解下也有可能指恶意破坏者。除了有 Hacker 和 Cracker 不分之情形外，在对 Hacker 采用“黑客”之译法的地区，很多人即使将其视为两种概念，也经常错误地把 Hacker 的另一个音译“骇客”当成 Cracker 使用。</p>
<h3 id="脚本小子"><a href="#脚本小子" class="headerlink" title="脚本小子"></a>脚本小子</h3><p>公众通常不知“[脚本小子]”（Script Kiddie）和黑帽黑客的区分。脚本小子是利用他人所撰写的程序发起攻击的网络闹事者。他们通常不懂得攻击目标的设计和攻击程序的原理，不能自己对系统进行[调试]、找出[漏洞]，实际专业知识远远不如他们通常冒充的黑帽黑客。然而，有不少青少年借由网络入侵传播病毒、木马，进行瘫痪、破坏、偷窃，因此犯上[计算机犯罪]。</p>
<h2 id="2-黑客主义"><a href="#2-黑客主义" class="headerlink" title="2. 黑客主义"></a>2. 黑客主义</h2><ul>
<li>对计算机的访问（以及任何可能帮助你认识我们这个世界的事物）应该是不受限制的、完全的，任何人都有动手尝试的权利；</li>
<li>所有的信息都应该可以自由获取；</li>
<li>不迷信权威——促进分权；</li>
<li>评价黑客的标准应该是他们的技术，而不是那些没有实际用途的指标，比如学位、年龄、种族或职位；</li>
<li>你可以在计算机上创造出艺术与美；</li>
<li>计算机技术可以让你的生活更美好。</li>
</ul>
<h2 id="3-黑客精神"><a href="#3-黑客精神" class="headerlink" title="3. 黑客精神"></a>3. 黑客精神</h2><ul>
<li>编写开源软件；</li>
<li>协助对开源软件test（测试）和debug（调试）；</li>
<li>公布有用的资讯；</li>
<li>帮忙维持一些简单的工作；</li>
<li>为黑客文化而努力。</li>
</ul>
<p>在黑客世界里，各组织的精神与文化都是不尽相同的，但有一个共同点，就是对技术的崇拜与对创新的不断追求。于是黑客们最为热爱：推动开源软硬件运动，找出漏洞并通知、协助管理员进行修补，从而缔造完美无暇的软硬件。</p>
<h2 id="4-黑客态度"><a href="#4-黑客态度" class="headerlink" title="4. 黑客态度"></a>4. 黑客态度</h2><ul>
<li>这个世界充满了令人着谜的问题等着我们去解决；</li>
<li>一个问题不应该被解决两次</li>
<li>无聊和乏味的工作是罪恶的</li>
<li>崇尚自由</li>
<li>态度不能代替能力</li>
</ul>
<h2 id="5-黑客的基本技能"><a href="#5-黑客的基本技能" class="headerlink" title="5. 黑客的基本技能"></a>5. 黑客的基本技能</h2><ul>
<li>[英语]：目前世界互联网70%网站都是英文网站，非常多的资源都是由英语撰写的，所以英语是黑客的必须精通的基础之一。</li>
<li>[操作系统]／[网络]：对操作系统熟悉且精通于网络，如[TCP/IP]以及网络原理等，才能更深入学习如何发现当中的漏洞以及入侵它们，并且隐匿行踪和消除痕迹。</li>
<li>[编程语言]：必须精通[汇编语言]、[C语言]等底层语言，以及[Python]、[Ruby]和[数据库]</li>
</ul>
<h2 id="6-提高自己在黑客圈的地位"><a href="#6-提高自己在黑客圈的地位" class="headerlink" title="6. 提高自己在黑客圈的地位"></a>6. 提高自己在黑客圈的地位</h2><ul>
<li>撰写开源软件</li>
<li>帮助测试并调试开源软件</li>
<li>发布有用信息</li>
<li>帮助维护基础设施的运转</li>
<li>为黑客文化本身服务</li>
</ul>
<h2 id="7-不要做这些事情"><a href="#7-不要做这些事情" class="headerlink" title="7. 不要做这些事情"></a>7. 不要做这些事情</h2><ul>
<li>不要使用愚蠢的，哗众取宠的ID或昵称</li>
<li>不要卷入Usenet（或任何其它地方的)骂战</li>
<li>不要自称为“cyberpunk”也不要浪费时间和那些人大家打交道</li>
<li>不要让你的email或者帖子中充满错误的拼写和语法</li>
</ul>
<h2 id="8-一名合格的黑客"><a href="#8-一名合格的黑客" class="headerlink" title="8. 一名合格的黑客"></a>8. 一名合格的黑客</h2><ul>
<li>你能流利地读写代码吗？</li>
<li>你认同黑客社群的目的和价值吗？</li>
<li>黑客社群里有没有资深成员称呼你为黑客？</li>
</ul>
<p>　　顺便给大伙儿介绍几位全球顶级的黑客。这几位老兄要么是技术特别牛，要么是影响力特别大。通过了解这些人的事迹，或许你对【黑客】一词会有更多的体会。<br>　　这个名单仅代表俺个人的喜好，未必足够全面，未必足够客观。<br>　　（<strong>为了避免纠纷，以下按字母序排列</strong>）</p>
<h3 id="Bill-Joy（比尔·乔伊）"><a href="#Bill-Joy（比尔·乔伊）" class="headerlink" title="Bill Joy（比尔·乔伊）"></a>Bill Joy（比尔·乔伊）</h3><p>　　BSD 系统之父（BSD 是目前最有影响力的 UNIX 衍生系统，MAC OS X 也是基于 BSD）。<br>　　Sun 的联合创始人兼首席科学家。<br>　　Solaris 之父（Solaris 是 Sun 推出的 Unix 操作系统）。<br>　　SPARC 之父（SPARC 是 Sun 推出的 CPU）。<br>　　VI 之父。</p>
<p><a href="https://en.wikipedia.org/wiki/Bill_Joy">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/比尔·乔伊">中文维基词条</a></p>
<h3 id="Dennis-Ritchie（丹尼斯·里奇）"><a href="#Dennis-Ritchie（丹尼斯·里奇）" class="headerlink" title="Dennis Ritchie（丹尼斯·里奇）"></a>Dennis Ritchie（丹尼斯·里奇）</h3><p>　　UNIX 之父（和 Ken Thompson 一起）。<br>　　C 语言之父。<br>　　图灵奖得主。<br>　　引申阅读：<br>　　他与 Brian Kernighan 合写了《C 程序设计语言》。此书简称 TCPL，被誉为【C 语言的圣经】</p>
<p><a href="https://en.wikipedia.org/wiki/Dennis_Ritchie">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/丹尼斯·里奇">中文维基词条</a></p>
<h3 id="Eric-Raymond（埃里克·雷蒙德）"><a href="#Eric-Raymond（埃里克·雷蒙德）" class="headerlink" title="Eric Raymond（埃里克·雷蒙德）"></a>Eric Raymond（埃里克·雷蒙德）</h3><p>　　著有多本弘扬黑客文化的著作：<br>　　《如何成为一名黑客》<br>　　《新黑客词典》<br>　　《大教堂与市集》（此书在<a href="https://github.com/programthink/books">俺的网盘</a>上分享了电子版）<br>　　《Unix 编程艺术》（此书在<a href="https://github.com/programthink/books">俺的网盘</a>上分享了电子版）</p>
<p><a href="https://en.wikipedia.org/wiki/Eric_S._Raymond">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/埃里克·雷蒙">中文维基词条</a><br>　　<a href="http://www.catb.org/~esr/">个人网站</a></p>
<h3 id="John-Carmack（约翰·卡马克）"><a href="#John-Carmack（约翰·卡马克）" class="headerlink" title="John Carmack（约翰·卡马克）"></a>John Carmack（约翰·卡马克）</h3><p>　　ID Software 联合创始人，3维射击类游戏的教父。<br>　　独自完成了 Wolfenstein（德军总部）、Doom（毁灭战士）、Quake（雷神之锤) 的 3D 引擎。<br>　　而且他把上述三款游戏都开源了，充分体现了黑客精神。很多射击类游戏是从他写的 3D 引擎衍生出来的。
　</p>
<p><a href="https://en.wikipedia.org/wiki/John_D._Carmack">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/約翰·卡馬克">中文维基词条</a></p>
<h3 id="◇Ken-Thompson（肯·汤普逊）"><a href="#◇Ken-Thompson（肯·汤普逊）" class="headerlink" title="◇Ken Thompson（肯·汤普逊）"></a>◇Ken Thompson（肯·汤普逊）</h3><p>　　B 语言之父（B 语言是 C 语言的前身）。<br>　　UNIX 之父（和 Dennis Ritchie 一起）。<br>　　UTF-8 之父。<br>　　Go 语言之父（和 Robert Griesemer，Rob Pike 一起）。<br>　　图灵奖得主。<br>　　更令人惊奇的是：他年青时还拿过奥运会射箭银牌！</p>
<p><a href="https://en.wikipedia.org/wiki/Ken_Thompson">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/肯·汤普逊">中文维基词条</a></p>
<h3 id="◇Kevin-Mitnick（凯文·米特尼克）"><a href="#◇Kevin-Mitnick（凯文·米特尼克）" class="headerlink" title="◇Kevin Mitnick（凯文·米特尼克）"></a>◇Kevin Mitnick（凯文·米特尼克）</h3><p>号称【头号黑帽黑客】，其经历极具传奇色彩：<br>　　15岁就破解北美防空指挥系统；<br>　　16岁被逮捕，成为了全球第一名网络少年犯；因年龄太小，很快被释放；<br>　　获释之后，他又入侵了当时几乎所有的大公司和大机构。
　</p>
<p><a href="https://en.wikipedia.org/wiki/Kevin_Mitnick">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/凯文·米特尼克">中文维基词条</a><br>　　<a href="http://www.kevinmitnick.com/">个人网站</a></p>
<h3 id="◇Linus-Torvalds（林纳斯·托瓦兹）"><a href="#◇Linus-Torvalds（林纳斯·托瓦兹）" class="headerlink" title="◇Linus Torvalds（林纳斯·托瓦兹）"></a>◇Linus Torvalds（林纳斯·托瓦兹）</h3><p>　　Linux 它爹（Linux 的名气之大，俺就不介绍了）。<br>　　Git 它爹（Git 是目前【占统治地位】的的版本管理系统）。</p>
<p><a href="https://en.wikipedia.org/wiki/Linus_Torvalds">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/林纳斯·托瓦兹">中文维基词条</a><br>　　<a href="http://torvalds-family.blogspot.com/">个人博客</a></p>
<h3 id="◇Paul-Graham（保罗·格雷汉姆）"><a href="#◇Paul-Graham（保罗·格雷汉姆）" class="headerlink" title="◇Paul Graham（保罗·格雷汉姆）"></a>◇Paul Graham（保罗·格雷汉姆）</h3><p>知名的 Lisp 黑客。<br>　　曾经与 Robert Morris 共同创办了 Viaweb（后被 Yahoo 高价收购，成为 Yahoo Store）。<br>　　在 IT 创业界很有影响力，资助了大批技术型创业公司。</p>
<p><a href="https://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer">洋文维基词条</a>)<br>　　<a href="https://zh.wikipedia.org/wiki/保罗·格雷厄姆">中文维基词条</a><br>　　<a href="http://www.paulgraham.com/">个人网站</a></p>
<h3 id="◇Richard-Stallman（理查德·斯托曼）"><a href="#◇Richard-Stallman（理查德·斯托曼）" class="headerlink" title="◇Richard Stallman（理查德·斯托曼）"></a>◇Richard Stallman（理查德·斯托曼）</h3><p>FSF 之父（FSF 是自由软件基金会，最有影响力的开源组织）。<br>　　GCC 之父。<br>　　GDB 之父。<br>　　Emacs 之父。</p>
<p><a href="https://en.wikipedia.org/wiki/Richard_Stallman">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/理查德·斯托曼">中文维基词条</a><br>　　<a href="https://www.stallman.org/">个人网站</a></p>
<h3 id="◇Robert-Morris（罗伯特·莫里斯）"><a href="#◇Robert-Morris（罗伯特·莫里斯）" class="headerlink" title="◇Robert Morris（罗伯特·莫里斯）"></a>◇Robert Morris（罗伯特·莫里斯）</h3><p>　　他的成名作是1988年的“<a href="https://zh.wikipedia.org/wiki/莫里斯蠕虫">莫里斯蠕虫</a>”。这是【第一个】通过网络【实时传播】的病毒，对当时的互联网造成毁灭性打击（大量的互联网主机中招并下线）。<br>　　他与 Paul Graham 共同创办 Viaweb（后被 Yahoo 高价收购，成为 Yahoo Store）。</p>
<p><a href="https://en.wikipedia.org/wiki/Robert_Tappan_Morris">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/罗伯特·泰潘·莫里斯">中文维基词条</a></p>
<h3 id="◇Steve-Wozniak（史蒂文·沃兹尼克）"><a href="#◇Steve-Wozniak（史蒂文·沃兹尼克）" class="headerlink" title="◇Steve Wozniak（史蒂文·沃兹尼克）"></a>◇Steve Wozniak（史蒂文·沃兹尼克）</h3><p>少年时期是知名的 phreaker（飞客，也就是电话黑客，入侵电话交换系统）。<br>　　70年代后期与乔布斯共同创办了苹果<br>　　当年乔布斯负责忽悠，沃兹尼克负责把乔布斯忽悠的东西实现出来。最初几代的苹果机是他独自设计的。</p>
<p><a href="https://en.wikipedia.org/wiki/Steve_Wozniak">洋文维基词条</a><br>　　<a href="https://zh.wikipedia.org/wiki/斯蒂夫·沃兹尼亚克">中文维基词条</a><br>　　<a href="http://www.woz.org/">个人网站</a></p>
<hr>
<p>资料链接：</p>
<p><a href="https://zh.wikipedia.org/wiki/黑客">黑客 - 维基百科，自由的百科全书</a></p>
<p><a href="https://www.ruanyifeng.com/road/2011/2011-04-20-hacker.html">黑客的含义 - 前方的路 - 阮一峰的个人网站</a></p>
<p><a href="http://catb.org/~esr/faqs/hacker-howto.html">How To Become A Hacker</a></p>
<p><a href="https://www.paulgraham.com/gh.html">Great Hackers</a></p>
<p><a href="https://program-think.blogspot.com/2013/01/weekly-share-37.html#head-6">每周转载：关于黑客文化和黑客精神 @ 编程随想的博客</a></p>
<hr>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑必备软件</title>
    <url>//posts/d5062834/</url>
    <content><![CDATA[<hr>
<h2 id="解压软件"><a href="#解压软件" class="headerlink" title="解压软件"></a>解压软件</h2><ul>
<li>Bandizip</li>
</ul>
<blockquote>
<p>Bandizip是一款可靠和快速的压缩软件，它支持WinZip、7-Zip和WinRAR以及其它压缩格式。它拥有非常快速的压缩和解压缩的算法，适用于多核心压缩、快速拖放、高速压缩等功能。</p>
</blockquote>
<ul>
<li>7-Zip</li>
</ul>
<blockquote>
<p>7-Zip是种全新的压缩格式，它拥有极高的压缩比，号称有着现今最高压缩比的压缩软件，它不仅支持独有的7-Zip文件格式，而且还支持各种其它压缩文件格式，较同类软件在压缩比方面高出一大部分。</p>
</blockquote>
<h2 id="媒体播放录屏"><a href="#媒体播放录屏" class="headerlink" title="媒体播放录屏"></a>媒体播放录屏</h2><ul>
<li>PotPlayer</li>
</ul>
<blockquote>
<p>PotPlayer是一款多媒体播放器，具有强大的功能和灵活的定制选项，深受用户喜爱。支持几乎所有常见的视频和音频格式，包括高清视频和流媒体内容。其优秀的解码能力和渲染效果确保了流畅的播放体验，无论是本地视频还是在线视频。</p>
<p>该播放器提供了丰富的调节选项，用户可以根据个人喜好调整视频和音频效果，如亮度、对比度、色彩等。此外，PotPlayer还支持多种字幕格式和音轨选择，满足用户对于字幕和语言的需求。</p>
</blockquote>
<ul>
<li>OBS Studio</li>
</ul>
<blockquote>
<p>一款免费且开源的视频录制和直播推流软件。它广泛用于游戏直播、视频制作、在线教育、网络会议等多种场景。OBS Studio 支持多种视频和音频格式的实时捕获、合成、编码、录制和直播。</p>
<p>适合从初学者到专业人士的各种用户。由于其开源的性质，它拥有一个活跃的社区，不断有新的功能和改进被加入到软件中</p>
</blockquote>
<ul>
<li>班迪录屏</li>
</ul>
<blockquote>
<p>Bandicam (班迪录屏)是一款专业的录屏软件，能录制电脑屏幕上所有操作过程，网络教学，课件制作，在线视频，直播视频等，并且丰富的视频特效，添加水印图片，鼠标点击效果，录制中实时线条，文本，高光等添加注释，令你的视频更酷炫，更生动。</p>
</blockquote>
<h2 id="卸载工具"><a href="#卸载工具" class="headerlink" title="卸载工具"></a>卸载工具</h2><ul>
<li>Uninstall Tool </li>
</ul>
<blockquote>
<p>Uninstall Tool 是款可以用来替代“添加/删除程序”的工具，Uninstall Tool 可显示隐藏的安装程序，按名称过滤已安装程序的列表，强行卸载程序，浏览注册表项目，保存安装程序列表，快速小巧，操作简便。</p>
</blockquote>
<ul>
<li>Geek</li>
</ul>
<blockquote>
<p>卸载软件(GeekUninstaller)带有强制删除功能，所有指定的软件和有关的文件注册表项都会被清理干净，是一款强力的卸载软件。</p>
</blockquote>
<ul>
<li>Wise Force Deleter</li>
</ul>
<blockquote>
<p>Wise Force Deleter是安全易用的文件解锁和强制删除工具，你可以用它删除任何Windows常规手段无法删除的文件。</p>
</blockquote>
<h2 id="桌面整理"><a href="#桌面整理" class="headerlink" title="桌面整理"></a>桌面整理</h2><ul>
<li>Nexus 桌面整理工具</li>
</ul>
<blockquote>
<p>Nexus 桌面整理工具（通常称为 Nexus Dock 或 RocketDock 的继任者）是一款用于 Windows 操作系统的桌面增强软件，它允许用户创建一个类似于 macOS 的 Dock 栏，用于快速访问常用的应用程序、文件夹和文件。一个轻量级且高度可定制的应用程序，适合那些希望提高桌面使用效率和美观度的用户。它可以帮助用户更有效地组织和管理桌面上的快捷方式，同时提供了一种现代化的桌面体验。</p>
</blockquote>
<ul>
<li>Stardock Fences</li>
</ul>
<blockquote>
<p>Stardock Fences一款式用于来分类和组织桌面上的图标。它可以将不同的图标放到不同的半透明“容器”当中，你还可以移动和拉伸这个“容器”。这样将图标分类以后，你的桌面再也不会看起来一团糟了。此外，Fences还提供了一个有趣的功能：双击桌面，隐藏所有图标；再次双击桌面，显示所有图标。</p>
</blockquote>
<ul>
<li>Everything</li>
</ul>
<blockquote>
<p>Everything是一款快速搜索文件的辅助工具，想找某个文件，但是却不记得放在哪个盘哪个文件夹?但是用windows自动搜索要耗费大量的时间,Everything可以轻松帮你解决这个问题，闪电般的速度，让你快速找到文件。</p>
</blockquote>
<h2 id="截图软件"><a href="#截图软件" class="headerlink" title="截图软件"></a>截图软件</h2><ul>
<li>Snipaste</li>
</ul>
<blockquote>
<p>是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上！你还可以将剪贴板里的文字或者颜色信息转化为图片窗口，并且将它们进行缩放、旋转、翻转、设为半透明，甚至让鼠标能穿透它们！如果你是程序员、设计师，或者是大部分工作时间都在电脑前，贴图功能将改变你的工作方式、提升工作效率。</p>
</blockquote>
<ul>
<li>PixPin</li>
</ul>
<blockquote>
<p>PixPin是一款功能强大，专业实用的优秀智能截图工具，由PearOCR作者开发，它拥有长截图、截gif、贴图等游戏功能，操作很简单，而且完全免费使用，同时PixPin还集成了自身的OCR系统。</p>
</blockquote>
<h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><ul>
<li>ToDesk</li>
</ul>
<blockquote>
<p>ToDesk是一款远程控制软件，不仅可以轻松穿透内网和防火墙，支持远程关机、待机，具有录屏、调节分辨率、文件传输、语音视频通讯等功能，无广告并且完全免费，可使用屏幕控制和文件管理功能，非常稳定。</p>
</blockquote>
<ul>
<li>向日葵</li>
</ul>
<blockquote>
<p>向日葵远程控制软件是一款拥有多年远控技术经验的远程控制软件,可远程控制手机,远程桌面连接,远程开机,远程管理等,并深入各行各业提供企业远程办公、企业IT运维、技术支持等企业远程解决方案。</p>
</blockquote>
<h2 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h2><ul>
<li>Draw.io</li>
</ul>
<blockquote>
<p>Draw.io是一款非常出色的免费流程图绘制工具。利用这款工具，您可以轻松地绘制各种图表、图示和图形，涵盖了流程图、UML类图、组织结构图、泳道图、E-R图、文氏图等多种类型，适用于商务、工程、电气、网络设计、软件设计等各个领域的专业绘图需求。</p>
</blockquote>
<ul>
<li>Typora</li>
</ul>
<blockquote>
<p>Typora 是一款轻量级Markdown编辑器，采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。支持 LaTeX 公式、版本控制、流程图等功能，为 Markdown 写作带来丝般顺滑的体验！</p>
</blockquote>
<ul>
<li>Adobe Acrobat</li>
</ul>
<blockquote>
<p>是由Adobe公司开发的一款PDF（Portable Document Format，便携式文档格式）编辑软件。借助它，您可以以PDF格式制作和保存你的文档 ，以便于浏览和打印，或使用更高级的功能。</p>
</blockquote>
<ul>
<li>Zotero</li>
</ul>
<blockquote>
<p>Zotero是一个简洁、强大且开源的文献管理工具，可以收集、整理、引用和分享研究资源，能够高效地整理、引用和同步文献资料。这些特点也使得Zotero成为科研和写作中的重要工具，为研究者和学者提供了非常大的便利。</p>
</blockquote>
<ul>
<li>Sumatra PDF</li>
</ul>
<blockquote>
<p>Sumatra PDF 是一款轻量级、快速、简洁的 PDF 阅读器，适用于 Windows 操作系统。它以其极简的设计和高效的性能而受到用户的喜爱。</p>
</blockquote>
<h2 id="开发编程文本"><a href="#开发编程文本" class="headerlink" title="开发编程文本"></a>开发编程文本</h2><ul>
<li>Sublime Text</li>
</ul>
<blockquote>
<p>Sublime Text 是一个文本编辑器，同时也是一个先进的代码编辑器，主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。</p>
</blockquote>
<ul>
<li>VS Code</li>
</ul>
<blockquote>
<p>Visual Studio Code是微软推出的一个强大的代码编辑器，功能强大，操作简单便捷，还有着良好的用户界面，设计得很人性化，旨在为所有开发者提供一款专注于代码本身的免费的编辑器。</p>
</blockquote>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><ul>
<li>PokeMMO</li>
</ul>
<blockquote>
<p>PokeMMO 是一款基于《精灵宝可梦》（Pokémon）系列游戏的多人线上角色扮演游戏（MMORPG）。它将经典的宝可梦游戏体验与多人在线互动的元素结合在一起，允许玩家在一个共享的世界中探索、捕捉、训练和对战宝可梦。是由粉丝社区开发和维护的。因此，它并没有官方的宝可梦游戏的所有功能和内容，但它提供了一个独特的多人在线体验，吸引了许多宝可梦爱好者。</p>
</blockquote>
<h2 id="其它工具"><a href="#其它工具" class="headerlink" title="其它工具"></a>其它工具</h2><ul>
<li>Bypass</li>
</ul>
<blockquote>
<p>Bypass（绕过）官方网站（<a href="https://www.bypass.cn/）是一个提供抢票软件和服务的平台。Bypass">https://www.bypass.cn/）是一个提供抢票软件和服务的平台。Bypass</a> 是一款知名的抢票工具，主要用于帮助用户在春运、节假日等票务紧张的情况下，快速、高效地抢购火车票。</p>
</blockquote>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>毕业设计-基于Linux的文件管理系统</title>
    <url>//posts/f8da9b56/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>projects</category>
      </categories>
  </entry>
  <entry>
    <title>本地知识库聊天助手（基于DeepSeek模型）</title>
    <url>//posts/3fd23ce3/</url>
    <content><![CDATA[<hr>
<h2 id="本地知识库聊天助手项目文档"><a class="markdownIt-Anchor" href="#本地知识库聊天助手项目文档"></a> <strong>本地知识库聊天助手项目文档</strong></h2>
<hr>
<h1 id=""><a class="markdownIt-Anchor" href="#"></a> </h1>
<h2 id="项目概述"><a class="markdownIt-Anchor" href="#项目概述"></a> 项目概述</h2>
<p>本项目旨在开发一个本地部署的智能知识库聊天助手，用户可以通过上传企业文档（如 PDF、Word 等），并通过自然语言提问来查询文档中的信息。系统使用本地部署的大语言模型 <strong>Ollama</strong> 提供语义理解，结合文档的向量化检索技术（使用 <strong>FAISS</strong>）来提高问答的准确性和效率。整个项目的架构充分考虑了数据隐私与安全，支持离线操作。</p>
<h2 id="项目功能"><a class="markdownIt-Anchor" href="#项目功能"></a> 项目功能</h2>
<ul>
<li><strong>文档上传与处理</strong>：用户可以上传 PDF、Word 等格式的文档，系统会自动解析并提取文本内容。</li>
<li><strong>本地语义理解</strong>：通过 <strong>Ollama</strong> 本地化部署的语言模型，理解用户提问并生成合理的回答。</li>
<li><strong>向量化检索</strong>：文档内容经过<strong>Sentence-BERT</strong>向量化处理后，存储在 <strong>FAISS</strong> 索引中，通过向量相似度检索最相关的答案。</li>
<li><strong>用户交互</strong>：提供一个简单的前端界面，用户可以方便地上传文档、输入问题并查看系统的回答。</li>
</ul>
<h3 id="rag-架构图"><a class="markdownIt-Anchor" href="#rag-架构图"></a> 🧠 RAG 架构图</h3>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><code class="hljs css">css复制编辑                 🧑‍💻 用户输入提问<br>                        │<br>                        ▼<br>          ┌────────────────────────────┐<br>          │      文本向量化模块         │ ← Sentence-BERT <br>          └────────────────────────────┘<br>                        │<br>                        ▼<br>         ┌──────────────────────────────┐<br>         │      FAISS 向量数据库检索      │ ← 本地知识库构建的向量索引<br>         └──────────────────────────────┘<br>                        │<br>           <span class="hljs-attribute">Top</span>-k 相关文档片段返回<br>                        ▼<br>┌────────────────────────────────────────────┐<br>│         构造 Prompt（上下文 + 问题）        │<br>└────────────────────────────────────────────┘<br>                        │<br>                        ▼<br>         ┌──────────────────────────────┐<br>         │   本地部署大模型生成模块（Ollama）<br>         └──────────────────────────────┘<br>                        │<br>                        ▼<br>                  🎯 最终回答输出<br></code></pre></td></tr></tbody></table></figure>
<h2 id="技术选型与详细介绍"><a class="markdownIt-Anchor" href="#技术选型与详细介绍"></a> 技术选型与详细介绍</h2>
<h3 id="1-后端框架python-flask"><a class="markdownIt-Anchor" href="#1-后端框架python-flask"></a> 1. <strong>后端框架：Python + Flask</strong></h3>
<h4 id="flask-框架概述"><a class="markdownIt-Anchor" href="#flask-框架概述"></a> <strong>Flask 框架概述：</strong></h4>
<ul>
<li><strong>Flask</strong> 是一个用 Python 编写的轻量级 Web 框架。它提供了灵活的路由和丰富的扩展，可以快速构建 RESTful API 服务。</li>
<li>Flask 不强制使用特定的数据库或前端框架，能够根据项目需求灵活调整。</li>
</ul>
<h4 id="技术选择原因"><a class="markdownIt-Anchor" href="#技术选择原因"></a> <strong>技术选择原因：</strong></h4>
<ul>
<li><strong>易用性</strong>：Flask 的学习曲线较低，适合小型和中型应用的快速开发。</li>
<li><strong>扩展性</strong>：Flask 可以通过添加第三方库来扩展功能，比如数据库支持、用户认证、CORS 支持等，非常适合我们需要构建的简单且高效的 API 服务。</li>
<li><strong>与 Python 的兼容性</strong>：Flask 与 Python 科学计算库（如 Pandas、NumPy）兼容性好，便于与机器学习模型结合使用。</li>
</ul>
<h4 id="功能应用"><a class="markdownIt-Anchor" href="#功能应用"></a> <strong>功能应用：</strong></h4>
<ul>
<li>提供一个 API 接口，用于接收用户上传的文档文件。</li>
<li>提供 API 接口，接收用户提问并返回通过 <strong>Ollama</strong> 生成的答案。</li>
<li>提供前端页面支持的接口。</li>
</ul>
<h4 id="示例代码"><a class="markdownIt-Anchor" href="#示例代码"></a> <strong>示例代码：</strong></h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> ollama<br><span class="hljs-keyword">import</span> faiss<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>app = Flask(__name__)<br><br><span class="hljs-comment"># 假设已有一个 FAISS 向量索引</span><br>index = faiss.IndexFlatL2(<span class="hljs-number">512</span>)  <span class="hljs-comment"># 512 维的向量索引</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">'/upload'</span>, methods=[<span class="hljs-string">'POST'</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_document</span>():<br>    file = request.files[<span class="hljs-string">'document'</span>]<br>    <span class="hljs-comment"># 处理文件并提取文本（PDF、Word 等）</span><br>    text = process_document(file)<br>    <span class="hljs-comment"># 将文本向量化并存储到 FAISS 索引中</span><br>    vectors = vectorize_text(text)<br>    index.add(vectors)<br>    <span class="hljs-keyword">return</span> jsonify({<span class="hljs-string">"message"</span>: <span class="hljs-string">"Document uploaded successfully!"</span>})<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">'/ask'</span>, methods=[<span class="hljs-string">'POST'</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ask_question</span>():<br>    user_question = request.json.get(<span class="hljs-string">'question'</span>)<br>    question_vector = vectorize_text(user_question)<br>    <span class="hljs-comment"># 在 FAISS 索引中搜索最相似的文档片段</span><br>    _, indices = index.search(np.array([question_vector]), <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 根据索引返回相关文档</span><br>    answer = retrieve_answer_from_index(indices)<br>    <span class="hljs-keyword">return</span> jsonify({<span class="hljs-string">'answer'</span>: answer})<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="2-本地语言模型ollama"><a class="markdownIt-Anchor" href="#2-本地语言模型ollama"></a> 2. <strong>本地语言模型：Ollama</strong></h3>
<h4 id="ollama-概述"><a class="markdownIt-Anchor" href="#ollama-概述"></a> <strong>Ollama 概述：</strong></h4>
<ul>
<li><strong>Ollama</strong> 是一个支持多种大型语言模型的本地推理工具，提供了简易的接口来调用预训练的语言模型。</li>
<li>使用 Ollama 可以方便地在本地机器上部署和运行如 LLaMA、Mistral 等大语言模型，避免了使用云服务的隐私问题。</li>
</ul>
<p>DeepSeek 是由国内团队开源的一系列大语言模型，分为几个方向：</p>
<ul>
<li><strong>DeepSeek-LLM</strong>：通用对话、知识问答</li>
<li><strong>DeepSeek-Coder</strong>：代码理解与生成</li>
<li><strong>DeepSeek-VL</strong>：多模态，支持图文理解</li>
</ul>
<p>具有较强的中文理解能力；本地部署无版权问题；与 ChatGPT 效果相近，但更适合中文和私有化部署</p>
<h4 id="技术选择原因-2"><a class="markdownIt-Anchor" href="#技术选择原因-2"></a> <strong>技术选择原因：</strong></h4>
<ul>
<li><strong>隐私保护</strong>：所有数据和模型都部署在本地，确保用户的文档和问题不会被上传至云端，提升数据隐私性。</li>
<li><strong>高效性</strong>：Ollama 提供简洁的 API，能够高效地调用语言模型进行推理，响应速度快，适合构建问答系统。</li>
<li><strong>支持多种模型</strong>：Ollama 支持多种开源预训练模型，如 LLaMA、Mistral 等，能够根据项目需求选择最合适的模型。</li>
</ul>
<h4 id="功能应用-2"><a class="markdownIt-Anchor" href="#功能应用-2"></a> <strong>功能应用：</strong></h4>
<ul>
<li>使用 Ollama 对用户的提问进行推理，生成合理的回答。</li>
<li>集成 Ollama 模型到 Flask 后端，处理提问并与向量检索结果结合提供精确答案。</li>
</ul>
<h4 id="示例代码-2"><a class="markdownIt-Anchor" href="#示例代码-2"></a> <strong>示例代码：</strong></h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ollama<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_answer_from_ollama</span>(<span class="hljs-params">question</span>):<br>    <span class="hljs-comment"># 调用 Ollama 模型生成回答</span><br>    response = ollama.chat(prompt=question)<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="3-文档处理模块pdf-word-等格式的处理"><a class="markdownIt-Anchor" href="#3-文档处理模块pdf-word-等格式的处理"></a> 3. <strong>文档处理模块：PDF、Word 等格式的处理</strong></h3>
<h4 id="文档处理概述"><a class="markdownIt-Anchor" href="#文档处理概述"></a> <strong>文档处理概述：</strong></h4>
<ul>
<li><strong>文档处理模块</strong>负责从上传的文件（如 PDF、Word）中提取文本，并进行清理和预处理，保证提取的文本可以用于后续的向量化和检索操作。</li>
<li>这一步非常重要，因为清洗后的文本会直接影响后续语义检索的质量。</li>
</ul>
<h4 id="技术选型"><a class="markdownIt-Anchor" href="#技术选型"></a> <strong>技术选型：</strong></h4>
<ul>
<li><strong>pdfminer.six</strong>：用于从 PDF 文件中提取文本。</li>
<li><strong>python-docx</strong>：用于从 Word 文件中提取内容。</li>
<li><strong>pypandoc</strong>：用于转换其他格式文件（如 Markdown、HTML）为纯文本格式。</li>
<li><strong>正则表达式和分段技术</strong>：处理多余的内容（如页码、标题、页眉等），分段或按一定长度切分文档。</li>
</ul>
<h4 id="功能应用-3"><a class="markdownIt-Anchor" href="#功能应用-3"></a> <strong>功能应用：</strong></h4>
<ul>
<li>提取 PDF、Word 等格式的文档内容，清理无关信息，如页码、标题等。</li>
<li>对文档中的内容进行结构化处理，确保文本内容准确，适合向量化处理。</li>
</ul>
<h4 id="示例代码-3"><a class="markdownIt-Anchor" href="#示例代码-3"></a> <strong>示例代码：</strong></h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pdfminer.high_level <span class="hljs-keyword">import</span> extract_text<br><span class="hljs-keyword">from</span> docx <span class="hljs-keyword">import</span> Document<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_text_from_pdf</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">return</span> extract_text(file_path)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_text_from_docx</span>(<span class="hljs-params">file_path</span>):<br>    doc = Document(file_path)<br>    text = <span class="hljs-string">'\n'</span>.join([para.text <span class="hljs-keyword">for</span> para <span class="hljs-keyword">in</span> doc.paragraphs])<br>    <span class="hljs-keyword">return</span> text<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="4-向量化检索faiss"><a class="markdownIt-Anchor" href="#4-向量化检索faiss"></a> 4. <strong>向量化检索：FAISS</strong></h3>
<h4 id="faiss-概述"><a class="markdownIt-Anchor" href="#faiss-概述"></a> <strong>FAISS 概述：</strong></h4>
<ul>
<li><strong>FAISS (Facebook AI Similarity Search)</strong> 是一个由 Facebook AI 研究团队开发的高效相似度搜索库。它是一个用于高维向量数据检索的开源库，专门设计来进行大规模向量搜索任务，能够处理数百万甚至数十亿的向量数据。</li>
<li>FAISS 通过高效的近似最近邻算法（ANN），在大量向量数据中快速找到与查询向量最相似的向量，广泛应用于图像检索、语音识别、文本检索等任务。适用于本项目中的文档检索。</li>
</ul>
<h4 id="技术选择原因-3"><a class="markdownIt-Anchor" href="#技术选择原因-3"></a> <strong>技术选择原因：</strong></h4>
<ul>
<li><strong>高效性</strong>：FAISS 提供高效的相似度搜索算法，能够处理数百万级别的文档向量，支持多维向量索引。</li>
<li><strong>灵活性</strong>：FAISS 支持不同类型的索引结构，如平面索引、倒排索引等，可以根据需求选择最合适的索引方式。</li>
</ul>
<h4 id="功能应用-4"><a class="markdownIt-Anchor" href="#功能应用-4"></a> <strong>功能应用：</strong></h4>
<ul>
<li>对上传的文档内容进行向量化处理，将这些向量添加到 FAISS 索引中，使用 FAISS 建立向量数据库。</li>
<li>当用户提问时，系统会将问题向量化，并在 FAISS 索引中查找最相似的文档内容，提升检索精度。</li>
</ul>
<h4 id="示例代码-4"><a class="markdownIt-Anchor" href="#示例代码-4"></a> <strong>示例代码：</strong></h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> faiss<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sentence_transformers <span class="hljs-keyword">import</span> SentenceTransformer<br><br><span class="hljs-comment"># 使用预训练模型进行文本向量化</span><br>model = SentenceTransformer(<span class="hljs-string">'paraphrase-MiniLM-L6-v2'</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_texts</span>(<span class="hljs-params">texts</span>):<br>    <span class="hljs-keyword">return</span> model.encode(texts)<br><br><span class="hljs-comment"># 构建 FAISS 索引</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_faiss_index</span>(<span class="hljs-params">vectors</span>):<br>    index = faiss.IndexFlatL2(vectors.shape[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 创建一个 L2 距离的索引</span><br>    index.add(vectors)  <span class="hljs-comment"># 向索引添加向量</span><br>    <span class="hljs-keyword">return</span> index<br><br><span class="hljs-comment"># 搜索相似文本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_similar</span>(<span class="hljs-params">query_vector, index, k=<span class="hljs-number">5</span></span>):<br>    _, indices = index.search(np.array([query_vector]), k)<br>    <span class="hljs-keyword">return</span> indices<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="5-前端vue3-element-plus"><a class="markdownIt-Anchor" href="#5-前端vue3-element-plus"></a> 5. <strong>前端：Vue3 + Element Plus</strong></h3>
<h4 id="vue3-和-element-plus-概述"><a class="markdownIt-Anchor" href="#vue3-和-element-plus-概述"></a> <strong>Vue3 和 Element Plus 概述：</strong></h4>
<ul>
<li><strong>Vue3</strong> 是一种现代的 JavaScript 框架，支持组件化开发、响应式数据绑定等特性，适用于构建交互性强的 Web 应用。</li>
<li><strong>Element Plus</strong> 是基于 Vue3 的 UI 组件库，提供了丰富的 UI 元素，如按钮、输入框、表格等，能够帮助快速构建高质量的用户界面。</li>
</ul>
<h4 id="功能应用-5"><a class="markdownIt-Anchor" href="#功能应用-5"></a> <strong>功能应用：</strong></h4>
<ul>
<li>提供用户友好的前端界面，用户可以方便地上传文档、提问问题并查看回答。</li>
<li>支持用户输入问题，后台通过 Flask 调用 Ollama 模型和向量检索返回答案。</li>
</ul>
<h4 id="示例代码-5"><a class="markdownIt-Anchor" href="#示例代码-5"></a> <strong>示例代码：</strong></h4>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-upload<br>      action="/upload"<br>      :on-success="handleUploadSuccess"<br>      :before-upload="beforeUpload"<br>    &gt;<br>      &lt;el-button&gt;上传文档&lt;/el-button&gt;<br>    &lt;/el-upload&gt;<br>    &lt;el-input v-model="question" placeholder="请输入问题"&gt;&lt;/el-input&gt;<br>    &lt;el-button @click="askQuestion"&gt;提问&lt;/el-button&gt;<br>    &lt;el-card v-if="answer"&gt;<br>      &lt;p&gt;{{ answer }}&lt;/p&gt;<br>    &lt;/el-card&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default {<br>  data() {<br>    return {<br>      question: '',<br>      answer: '',<br>    };<br>  },<br>  methods: {<br>    async askQuestion() {<br>      const response = await this.$http.post('/ask', { question: this.question });<br>      this.answer = response.data.answer;<br>    },<br>    handleUploadSuccess() {<br>      this.$message.success('文件上传成功');<br>    },<br>    beforeUpload(file) {<br>      // 检查文件类型<br>      return file.type === 'application/pdf';<br>    }<br>  }<br>};<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="五-应用场景"><a class="markdownIt-Anchor" href="#五-应用场景"></a> 五、应用场景</h3>
<p>为企业内部人员提供了便捷的知识库查询工具，大幅提高了工作效率，减少了人工查询的时间成本。</p>
<p>本地部署方案确保了数据的安全性和隐私性，满足了严格的企业级需求。</p>
<p>提供了灵活的扩展性，系统可根据不同需求进行二次开发和集成，适用于各类行业场景（如企业管理、法律咨询、教育等）。</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>💼 企业内部文档助手</td>
<td>向系统提问公司规章、流程说明、产品文档</td>
</tr>
<tr>
<td>🧑‍🎓 教育知识库助教</td>
<td>学生上传课程资料，快速定位重点、提问复习</td>
</tr>
<tr>
<td>🏛️ 政策法规问答平台</td>
<td>政府机关内部文件语义搜索与问答</td>
</tr>
<tr>
<td>📑 法律/合同文档助手</td>
<td>快速理解长篇合同、政策材料内容含义</td>
</tr>
</tbody>
</table>
<h3 id="六-扩展功能以后"><a class="markdownIt-Anchor" href="#六-扩展功能以后"></a> 六、扩展功能（以后）</h3>
<ul>
<li>✅ 多用户登录系统，支持知识权限管理</li>
<li>✅ 增加 Web 界面（Flask + Vue）支持上传/提问/反馈</li>
<li>✅ 用户提问日志记录与反馈优化模型</li>
<li>✅ 与企业 OA 系统或微信群机器人打通，实现消息集成</li>
</ul>
<h3 id="七-逻辑框架"><a class="markdownIt-Anchor" href="#七-逻辑框架"></a> 七、逻辑框架</h3>
<ol>
<li><strong>项目目标：</strong> 离线构建智能知识问答助手，服务特定用户/企业场景</li>
<li><strong>为何选用本地模型：</strong> 数据私密、可控稳定、无需联网</li>
<li><strong>技术结构：</strong> 文档预处理 ➜ 向量化 ➜ DeepSeek 回答</li>
<li><strong>关键亮点：</strong> 支持多格式文档、中文向量搜索、部署灵活</li>
<li><strong>扩展方向：</strong> 聊天增强、问答评分、语音问答、多用户管理</li>
</ol>
<p>✅ 为什么我们要将文档转成向量？</p>
<p>✅ 本地模型和云端模型相比有什么优势？</p>
<p>✅ RAG 是什么，它比直接问 ChatGPT 好在哪？</p>
<p>✅ FAISS + Embedding 是解决搜索问题的“脑子”</p>
<p>✅ DeepSeek 是我们离线“嘴巴”——懂中文、能回答</p>
<hr>
<h2 id="sentence-bert-详细介绍"><a class="markdownIt-Anchor" href="#sentence-bert-详细介绍"></a> <strong>Sentence-BERT 详细介绍</strong></h2>
<p><strong>Sentence-BERT</strong>（简称 <strong>SBERT</strong>）是一个基于 BERT（Bidirectional Encoder Representations from Transformers）的改进版本，专门用于生成句子的向量表示（即嵌入）。BERT 本身是一个强大的预训练语言模型，可以生成单词的向量表示，但它的设计是为了处理单个单词的上下文，而不是生成句子的整体语义向量。为了有效地对句子进行表示，<strong>Sentence-BERT</strong> 提出了一个改进的方法，通过对 BERT 进行微调，使其可以更好地生成句子的嵌入。</p>
<h4 id="1-背景"><a class="markdownIt-Anchor" href="#1-背景"></a> <strong>1. 背景</strong></h4>
<p>BERT 是通过上下文学习单词的表示，主要关注的是 <strong>Masked Language Modeling (MLM)</strong> 和 <strong>Next Sentence Prediction (NSP)</strong>，这使得 BERT 非常适合处理单词和短文本的上下文。但在实际应用中，我们常常需要对整个句子、段落或文档进行表示。BERT 的默认输出是 <strong>每个 Token（单词或子词）的向量</strong>，而不是对整个句子的语义进行编码。</p>
<p>为了解决这个问题，<strong>Sentence-BERT</strong> 通过以下方式对 BERT 进行优化：</p>
<ol>
<li><strong>句子对微调（Siamese Network 或 Triplet Network）：</strong>
<ul>
<li><strong>Siamese Network</strong> 采用双塔结构，将同一文本的两个版本（如原始句子和修改过的句子）输入到 BERT 中，通过相似度来训练模型，使得模型学习到能将语义相似的句子映射到相近的向量空间。</li>
<li><strong>Triplet Network</strong> 则使用三元组训练，增加了一个负样本，进一步提升句子表示的区分度。</li>
</ul>
</li>
<li><strong>通过特定任务进行微调：</strong>
<ul>
<li>例如，Sentence-BERT 通常通过 <strong>自然语言推理（NLI）</strong> 和 <strong>对比学习任务</strong>（比如通过训练相似句子的对比）进行优化，从而提高生成句子向量时的准确性。</li>
</ul>
</li>
<li><strong>输出固定维度的句子向量：</strong>
<ul>
<li>在传统的 BERT 中，输入的是词或子词的向量，输出的是 <strong>Token Embeddings</strong>。而 Sentence-BERT 将句子转化为一个固定维度的向量（通常是 768 或 512 维），便于后续的相似度计算、检索等任务。</li>
</ul>
</li>
</ol>
<h4 id="2-sentence-bert-的优势"><a class="markdownIt-Anchor" href="#2-sentence-bert-的优势"></a> <strong>2. Sentence-BERT 的优势</strong></h4>
<ul>
<li><strong>高效的句子表示：</strong> 在原始 BERT 中，为了获得句子嵌入，通常需要对整个句子进行 [CLS] token 以及其他 tokens 的向量处理，而 <strong>Sentence-BERT</strong> 通过微调提供了更简洁高效的生成句子向量的方法。</li>
<li><strong>适合文本匹配：</strong> <strong>Sentence-BERT</strong> 特别适用于句子对任务（如文本匹配、语义相似度计算），能够高效地对句子进行编码并进行对比。</li>
<li><strong>高效的相似度检索：</strong> 由于 Sentence-BERT 输出的是固定维度的向量，因此可以用来构建向量检索系统，利用如 FAISS 等工具快速进行检索。</li>
</ul>
<h4 id="3-sentence-bert-的应用场景"><a class="markdownIt-Anchor" href="#3-sentence-bert-的应用场景"></a> <strong>3. Sentence-BERT 的应用场景</strong></h4>
<ul>
<li><strong>语义文本相似度计算：</strong> 判断两段文本之间的语义相似度，广泛应用于搜索引擎、问答系统、推荐系统等领域。</li>
<li><strong>文本匹配任务：</strong> 比如句子对分类任务、语义相似度评分、翻译质量评估等。</li>
<li><strong>信息检索：</strong> 用于基于文本向量进行文档检索，如根据问题查询最相关的文档或答案。</li>
<li><strong>聚类分析：</strong> 将文本转换为向量后，可以利用聚类算法对相似的文本进行分组。</li>
</ul>
<hr>
<h3 id="4-sentence-bert-使用"><a class="markdownIt-Anchor" href="#4-sentence-bert-使用"></a> <strong>4. Sentence-BERT 使用</strong></h3>
<h4 id="安装-sentence-bert"><a class="markdownIt-Anchor" href="#安装-sentence-bert"></a> <strong>安装 Sentence-BERT</strong></h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">pip install sentence-transformers<br></code></pre></td></tr></tbody></table></figure>
<h4 id="基本用法"><a class="markdownIt-Anchor" href="#基本用法"></a> <strong>基本用法：</strong></h4>
<ol>
<li><strong>加载模型：</strong> 可以加载 <code>Sentence-BERT</code> 提供的多个预训练模型，也可以使用自己的数据进行微调。</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sentence_transformers <span class="hljs-keyword">import</span> SentenceTransformer<br><br><span class="hljs-comment"># 加载预训练模型</span><br>model = SentenceTransformer(<span class="hljs-string">'paraphrase-MiniLM-L6-v2'</span>)<br></code></pre></td></tr></tbody></table></figure>
<ol>
<li><strong>文本向量化：</strong></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例句子</span><br>sentences = [<span class="hljs-string">"我喜欢自然语言处理"</span>, <span class="hljs-string">"深度学习在AI领域应用广泛"</span>]<br><br><span class="hljs-comment"># 使用 Sentence-BERT 将文本转化为向量</span><br>sentence_embeddings = model.encode(sentences)<br><br><span class="hljs-comment"># 输出句子嵌入</span><br><span class="hljs-keyword">for</span> i, sentence <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(sentences):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"Sentence: <span class="hljs-subst">{sentence}</span>"</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"Embedding: <span class="hljs-subst">{sentence_embeddings[i]}</span>"</span>)<br></code></pre></td></tr></tbody></table></figure>
<ol>
<li><strong>文本相似度计算：</strong>
<ul>
<li>通过计算两个句子向量的 <strong>余弦相似度</strong> 来判断它们的相似度。</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics.pairwise <span class="hljs-keyword">import</span> cosine_similarity<br><br><span class="hljs-comment"># 计算相似度</span><br>similarity = cosine_similarity([sentence_embeddings[<span class="hljs-number">0</span>]], [sentence_embeddings[<span class="hljs-number">1</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f"Cosine similarity: <span class="hljs-subst">{similarity[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]}</span>"</span>)<br></code></pre></td></tr></tbody></table></figure>
<ol>
<li><strong>保存与加载模型：</strong>
<ul>
<li><strong>保存模型：</strong></li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">model.save(<span class="hljs-string">'my_model'</span>)<br></code></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>加载已保存的模型：</strong></li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">model = SentenceTransformer(<span class="hljs-string">'my_model'</span>)<br></code></pre></td></tr></tbody></table></figure>
<h4 id="5-微调-sentence-bert"><a class="markdownIt-Anchor" href="#5-微调-sentence-bert"></a> <strong>5. 微调 Sentence-BERT</strong></h4>
<p>Sentence-BERT 还可以通过特定的数据集进行微调。比如，您可以使用一个包含成对句子及其相似度标签的数据集来微调模型，使得模型生成的句子向量更加符合您的需求。</p>
<ol>
<li><strong>准备数据：</strong> 你需要准备一对句子和它们的相似度标签。
<ul>
<li>数据格式如下：每对句子有一个标签，通常是一个 0 到 1 之间的值，表示这对句子的相似度。</li>
</ul>
</li>
<li><strong>使用 <code>SentenceTransformer</code> 进行微调：</strong></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sentence_transformers <span class="hljs-keyword">import</span> SentenceTransformer, SentencesDataset, losses<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 加载预训练模型</span><br>model = SentenceTransformer(<span class="hljs-string">'paraphrase-MiniLM-L6-v2'</span>)<br><br><span class="hljs-comment"># 准备微调数据</span><br>train_samples = [<br>    (<span class="hljs-string">'我喜欢自然语言处理'</span>, <span class="hljs-string">'自然语言处理非常有趣'</span>, <span class="hljs-number">0.9</span>),<br>    (<span class="hljs-string">'我喜欢看电影'</span>, <span class="hljs-string">'我喜欢阅读书籍'</span>, <span class="hljs-number">0.3</span>),<br>    <span class="hljs-comment"># 更多的句子对和相似度</span><br>]<br><br><span class="hljs-comment"># 创建数据集</span><br>train_data = SentencesDataset(train_samples, model)<br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">16</span>, shuffle=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 使用对比损失进行训练</span><br>train_loss = losses.CosineSimilarityLoss(model)<br>model.fit(train_objectives=[(train_dataloader, train_loss)], epochs=<span class="hljs-number">1</span>, warmup_steps=<span class="hljs-number">100</span>)<br></code></pre></td></tr></tbody></table></figure>
<ol>
<li><strong>评估与推理：</strong></li>
</ol>
<p>微调后的模型可以通过 <code>encode</code> 方法生成句子向量，适用于相似度计算、文本检索等任务。</p>
<hr>
]]></content>
      <categories>
        <category>projects</category>
      </categories>
  </entry>
  <entry>
    <title>高校招生数据分析与可视化平台</title>
    <url>//posts/97171005/</url>
    <content><![CDATA[<hr>
<p>太好了！下面是你请求的关于「高校招生数据分析平台」的完整内容，包括项目文档、简历描述、项目讲解稿，以及核心技术模块讲解。</p>
<hr>
<h2 id="一-完整项目文档高校招生数据分析与可视化平台"><a class="markdownIt-Anchor" href="#一-完整项目文档高校招生数据分析与可视化平台"></a> 📄 一、完整项目文档：《高校招生数据分析与可视化平台》</h2>
<h3 id="1-项目简介"><a class="markdownIt-Anchor" href="#1-项目简介"></a> ✅ 1. 项目简介</h3>
<p>本项目旨在通过自动化方式爬取全国各高校近年录取分数线、招生计划等公开数据，对数据进行清洗、存储与分析，并通过可视化图表形式展示不同高校、不同专业的录取趋势，为考生与家长提供数据支持和参考。</p>
<hr>
<h3 id="2-项目目标与功能模块"><a class="markdownIt-Anchor" href="#2-项目目标与功能模块"></a> ✅ 2. 项目目标与功能模块</h3>
<h4 id="项目目标"><a class="markdownIt-Anchor" href="#项目目标"></a> 🎯 项目目标：</h4>
<ul>
<li>聚合各省市高校历年录取数据</li>
<li>提供高校/专业/地区多维度查询分析</li>
<li>可视化展示趋势、对比、分布图表</li>
</ul>
<h4 id="功能模块划分"><a class="markdownIt-Anchor" href="#功能模块划分"></a> 🧩 功能模块划分：</h4>
<table>
<thead>
<tr>
<th>模块</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据爬取</td>
<td>从阳光高考、各省教育考试院官网等抓取历年招生录取数据</td>
</tr>
<tr>
<td>数据处理</td>
<td>清洗、格式统一、缺失填补、异常值处理</td>
</tr>
<tr>
<td>数据分析</td>
<td>分数线趋势、招生人数变化、专业热度等分析</td>
</tr>
<tr>
<td>数据可视化</td>
<td>地图分布、折线图、柱状图、词云等形式展示分析结果</td>
</tr>
<tr>
<td>查询接口</td>
<td>支持通过高校、地区、专业、年份进行查询</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="3-技术架构图"><a class="markdownIt-Anchor" href="#3-技术架构图"></a> ✅ 3. 技术架构图</h3>
<figure class="highlight sas"><table><tbody><tr><td class="code"><pre><code class="hljs SAS">          ┌────────────┐<br>          │  爬虫模块   │ ← requests + lxml<br>          └────┬───────┘<br>               ↓<br>        ┌──────────────┐<br>        │ 数据清洗处理 │ ← pandas<br>        └────┬─────────┘<br>             ↓<br>      ┌────────────┐<br>      │ 数据存储层 │ ← SQLite / CSV（轻量级）<br>      └────┬───────┘<br>           ↓<br> ┌───────────────────────┐<br> │ Flask 后端API服务     │<br> └────┬──────────────────┘<br>      ↓<br>┌────────────┐     ┌─────────────────────┐<br>│ 前端页面展示 │ ← HTML+JS+Echarts/Folium │<br>└────────────┘     └─────────────────────┘<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="4-技术栈详解"><a class="markdownIt-Anchor" href="#4-技术栈详解"></a> ✅ 4. 技术栈详解</h3>
<table>
<thead>
<tr>
<th>技术</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>requests</code></td>
<td>发送网络请求，抓取网页HTML</td>
</tr>
<tr>
<td><code>lxml / re</code></td>
<td>页面解析，提取目标数据</td>
</tr>
<tr>
<td><code>pandas</code></td>
<td>数据清洗、统计分析</td>
</tr>
<tr>
<td><code>Flask</code></td>
<td>提供API与数据接口</td>
</tr>
<tr>
<td><code>Echarts</code></td>
<td>折线图、柱状图、词云展示</td>
</tr>
<tr>
<td><code>Folium</code></td>
<td>地理地图可视化（省份录取对比）</td>
</tr>
<tr>
<td><code>SQLite/CSV</code></td>
<td>存储结构化招生信息</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="5-示例可视化效果"><a class="markdownIt-Anchor" href="#5-示例可视化效果"></a> ✅ 5. 示例可视化效果</h3>
<ul>
<li>折线图：某高校某专业5年录取分数线趋势</li>
<li>柱状图：省内各高校招生计划对比</li>
<li>地图热力图：全国各省录取分数平均值</li>
<li>词云图：热门专业词频展示</li>
</ul>
<hr>
<h2 id="️-二-项目描述含技术亮点"><a class="markdownIt-Anchor" href="#️-二-项目描述含技术亮点"></a> ✍️ 二、项目描述（含技术亮点）</h2>
<p><strong>项目概述：</strong><br>
通过爬虫抓取全国各高校近年录取数据，构建数据分析与可视化平台，帮助用户快速了解不同学校和专业的录取趋势。</p>
<p><strong>技术要点：</strong></p>
<ul>
<li>使用 <code>requests + lxml</code> 构建爬虫模块，抓取阳光高考等权威平台数据</li>
<li>基于 <code>pandas</code> 完成数据清洗与趋势分析</li>
<li>使用 <code>Flask</code> 搭建后端服务，提供数据接口</li>
<li>通过 <code>Echarts</code> 和 <code>Folium</code> 实现分数趋势、地理分布等可视化展示</li>
<li>支持根据高校、专业、地区等多条件组合查询</li>
</ul>
<p><strong>项目亮点：</strong></p>
<ul>
<li>数据多维度对比：支持按省、校、专业、年份等维度分析</li>
<li>可视化丰富：集成地图、趋势图、柱状图、词云等交互式图表</li>
<li>技术栈清晰，模块解耦，便于后期拓展与维护</li>
</ul>
<hr>
<hr>
<h2 id="三-核心技术模块原理讲解"><a class="markdownIt-Anchor" href="#三-核心技术模块原理讲解"></a> 🧠 三、核心技术模块原理讲解</h2>
<h3 id="数据爬虫模块requests-lxml"><a class="markdownIt-Anchor" href="#数据爬虫模块requests-lxml"></a> 🔧 数据爬虫模块（requests + lxml）</h3>
<p>从各省考试院、高校官网、阳光高考网等公开网站中自动化抓取包含<strong>录取分数线、招生计划、专业信息等</strong>结构化数据。</p>
<ul>
<li>利用 <code>requests</code> 发送 GET 请求获取高校招生网页内容</li>
<li>使用 <code>lxml.etree</code> 中的 XPath 提取表格数据（如年份、分数线、专业）</li>
<li>针对各省结构不同，编写差异化解析器</li>
<li>保存为结构化 CSV 或写入数据库</li>
</ul>
<h3 id="数据清洗与分析模块pandas"><a class="markdownIt-Anchor" href="#数据清洗与分析模块pandas"></a> 🔧 数据清洗与分析模块（pandas）</h3>
<ul>
<li>缺失值处理、字段标准化（如“软件工程”与“软件工程（本科）”统一）</li>
<li>分数转化（如按文理科、一本二本划分）</li>
<li>分析处理如：
<ul>
<li>按年份平均分趋势</li>
<li>专业热度词频统计</li>
<li>招生计划增长率分析等</li>
</ul>
</li>
</ul>
<h3 id="可视化模块echarts-folium"><a class="markdownIt-Anchor" href="#可视化模块echarts-folium"></a> 🔧 可视化模块（Echarts + Folium）</h3>
<ul>
<li>折线图：分析趋势（年份 vs 分数）</li>
<li>柱状图：高校/专业对比展示</li>
<li>地图热力图：不同省市录取分数平均值展示（Folium 支持 GeoJSON）</li>
<li>词云：热门专业关键词可视化</li>
</ul>
<hr>
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>
<p>爬虫模块优化是确保数据抓取更高效、稳定并避免封禁的重要环节。通过以下几种优化策略，可以提高爬虫的性能和健壮性。下面是对爬虫模块优化的详细介绍，涵盖了不同技术和策略的应用：</p>
<hr>
<h2 id="爬虫模块优化方法"><a class="markdownIt-Anchor" href="#爬虫模块优化方法"></a> 🔧 爬虫模块优化方法</h2>
<h3 id="1-请求头伪装与反爬机制绕过"><a class="markdownIt-Anchor" href="#1-请求头伪装与反爬机制绕过"></a> 1. <strong>请求头伪装与反爬机制绕过</strong></h3>
<p>为了避免因频繁请求导致 IP 被封禁，或者爬虫被识别为非正常访问，爬虫请求需要伪装成正常用户的浏览行为。</p>
<ul>
<li><strong>User-Agent伪装</strong>：使用常见的浏览器 User-Agent 来模拟浏览器请求。</li>
<li><strong>Referer与Origin伪装</strong>：模拟页面访问的来源，避免因缺少<code>Referer</code>或者<code>Origin</code>信息而被识别为爬虫。</li>
<li><strong>Cookies与Session保持</strong>：很多网站通过 Cookie 判断用户是否为人类。模拟浏览器行为，维护请求会话（<code>requests.Session</code>），每次请求带上 Cookie 和 Session 信息，模拟长期浏览器会话。</li>
</ul>
<h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例：</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span>,<br>    <span class="hljs-string">'Referer'</span>: <span class="hljs-string">'https://example.com'</span>,<br>    <span class="hljs-string">'Origin'</span>: <span class="hljs-string">'https://example.com'</span><br>}<br>session = requests.Session()<br>response = session.get(<span class="hljs-string">'https://example.com'</span>, headers=headers)<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="2-增加请求间隔与随机延时"><a class="markdownIt-Anchor" href="#2-增加请求间隔与随机延时"></a> 2. <strong>增加请求间隔与随机延时</strong></h3>
<p>爬虫的请求频率过高容易导致服务器拒绝服务或封锁 IP。通过设置合理的间隔时间以及随机延时，可以降低爬虫被识别为攻击行为的风险。</p>
<ul>
<li><strong>静态延时</strong>：每次请求之间加上固定时间（如 1 秒）。</li>
<li><strong>动态延时</strong>：根据一定范围随机延时（例如在 1 到 3 秒之间随机等待）。</li>
</ul>
<h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例：</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><br>time.sleep(random.uniform(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 每次请求之间随机延时1到3秒</span><br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="3-代理池的使用"><a class="markdownIt-Anchor" href="#3-代理池的使用"></a> 3. <strong>代理池的使用</strong></h3>
<p>为了避免爬虫 IP 被封禁，可以使用代理池技术。代理池通过切换不同的代理 IP 进行请求，可以有效分散请求的来源，降低单一 IP 被封禁的风险。</p>
<ul>
<li><strong>代理池的构建</strong>：可以通过第三方 API 提供的代理池，或者自建代理池。</li>
<li><strong>代理池的轮换</strong>：定期或按需更换代理，避免频繁使用同一个 IP。</li>
</ul>
<h4 id="示例使用-requests-和代理池"><a class="markdownIt-Anchor" href="#示例使用-requests-和代理池"></a> 示例（使用 <code>requests</code> 和代理池）：</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>proxies = [<br>    <span class="hljs-string">'http://proxy1.com'</span>,<br>    <span class="hljs-string">'http://proxy2.com'</span>,<br>    <span class="hljs-string">'http://proxy3.com'</span><br>]<br><br>proxy = {<span class="hljs-string">'http'</span>: random.choice(proxies), <span class="hljs-string">'https'</span>: random.choice(proxies)}<br>response = requests.get(<span class="hljs-string">'https://example.com'</span>, proxies=proxy)<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="4-使用异步爬虫与并发请求"><a class="markdownIt-Anchor" href="#4-使用异步爬虫与并发请求"></a> 4. <strong>使用异步爬虫与并发请求</strong></h3>
<p>对于大量数据的抓取，传统的同步爬虫可能效率较低。使用异步请求（如 <code>aiohttp</code> 或 <code>requests-futures</code>）和并发请求可以显著提高抓取速度。</p>
<ul>
<li><strong>异步爬虫</strong>：使用 <code>asyncio</code> 和 <code>aiohttp</code> 来并发请求，避免阻塞等待。</li>
<li><strong>并发请求</strong>：通过多线程或多进程（如 <code>concurrent.futures</code> 或 <code>multiprocessing</code>）进行并行抓取。</li>
</ul>
<h4 id="示例使用-aiohttp-异步请求"><a class="markdownIt-Anchor" href="#示例使用-aiohttp-异步请求"></a> 示例（使用 <code>aiohttp</code> 异步请求）：</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.text()<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    url = <span class="hljs-string">'https://example.com'</span><br>    html = <span class="hljs-keyword">await</span> fetch(url)<br>    <span class="hljs-built_in">print</span>(html)<br><br>loop = asyncio.get_event_loop()<br>loop.run_until_complete(main())<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="5-捕获异常与重试机制"><a class="markdownIt-Anchor" href="#5-捕获异常与重试机制"></a> 5. <strong>捕获异常与重试机制</strong></h3>
<p>爬虫请求过程中，可能会因为网络问题、服务器问题等导致请求失败。通过异常处理和重试机制，可以提高爬虫的健壮性。</p>
<ul>
<li><strong>捕获异常</strong>：通过 <code>try...except</code> 捕获请求错误（如 <code>Timeout</code>, <code>ConnectionError</code>）。</li>
<li><strong>重试机制</strong>：对于失败的请求，进行定时重试，并限制最大重试次数，避免死循环。</li>
</ul>
<h4 id="示例重试机制"><a class="markdownIt-Anchor" href="#示例重试机制"></a> 示例（重试机制）：</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_page</span>(<span class="hljs-params">url, retries=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(retries):<br>        <span class="hljs-keyword">try</span>:<br>            response = requests.get(url, timeout=<span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">except</span> requests.exceptions.RequestException <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f"Error occurred: <span class="hljs-subst">{e}</span>"</span>)<br>            sleep(<span class="hljs-number">3</span>)  <span class="hljs-comment"># 等待3秒后重试</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>url = <span class="hljs-string">'https://example.com'</span><br>response = get_page(url)<br><span class="hljs-keyword">if</span> response:<br>    <span class="hljs-built_in">print</span>(response.content)<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="6-防止重复抓取与数据去重"><a class="markdownIt-Anchor" href="#6-防止重复抓取与数据去重"></a> 6. <strong>防止重复抓取与数据去重</strong></h3>
<p>爬虫过程中，经常会碰到重复抓取相同网页或内容的情况。使用数据去重机制避免无意义的重复请求。</p>
<ul>
<li><strong>URL去重</strong>：可以使用 <code>set</code> 数据结构，去除已访问过的 URL。</li>
<li><strong>内容去重</strong>：对于页面内容相似的情况（如动态加载的内容），可以通过内容的哈希值判断是否已抓取过。</li>
</ul>
<h4 id="示例去重"><a class="markdownIt-Anchor" href="#示例去重"></a> 示例（去重）：</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">visited_urls = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crawl</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">if</span> url <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited_urls:<br>        visited_urls.add(url)<br>        <span class="hljs-comment"># 执行爬取操作</span><br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="7-动态页面数据抓取"><a class="markdownIt-Anchor" href="#7-动态页面数据抓取"></a> 7. <strong>动态页面数据抓取</strong></h3>
<p>许多网站使用 JavaScript 动态加载数据，这种情况下直接抓取 HTML 代码将无法获取实际数据。可以使用 <code>selenium</code> 或 <code>playwright</code> 模拟浏览器行为，抓取动态生成的数据。</p>
<ul>
<li><strong>Selenium</strong>：自动化操作浏览器，支持抓取 JavaScript 渲染后的内容。</li>
<li><strong>Playwright</strong>：比 <code>selenium</code> 更轻量、高效的自动化浏览器工具。</li>
</ul>
<h4 id="示例使用-selenium"><a class="markdownIt-Anchor" href="#示例使用-selenium"></a> 示例（使用 <code>selenium</code>）：</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">"https://example.com"</span>)<br>page_source = driver.page_source  <span class="hljs-comment"># 获取渲染后的页面内容</span><br>driver.quit()<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="8-爬虫调度与分布式抓取"><a class="markdownIt-Anchor" href="#8-爬虫调度与分布式抓取"></a> 8. <strong>爬虫调度与分布式抓取</strong></h3>
<p>对于大规模数据抓取，可以考虑将爬虫分布式化，提升爬取速度和覆盖面。可以使用调度框架如 <code>Celery</code>、<code>Scrapy</code> 的分布式功能来调度任务。</p>
<ul>
<li><strong>分布式爬虫</strong>：通过多台机器并行抓取，提高数据采集的速度。</li>
<li><strong>任务调度</strong>：定期爬取最新数据，并可以对爬取过程进行监控与日志记录。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>projects</category>
      </categories>
  </entry>
  <entry>
    <title>办公自动化PyQt</title>
    <url>//posts/e9498842/</url>
    <content><![CDATA[<hr>
<p>下面是一个围绕 <strong>PyQt 实现图形界面开发的自动化办公应用</strong> 的完整项目描述，包括项目介绍、技术栈、功能模块、技术亮点和简历描述：</p>
<hr>
<h2 id="项目名称办公自动化助手系统基于-pyqt-的图形界面应用"><a class="markdownIt-Anchor" href="#项目名称办公自动化助手系统基于-pyqt-的图形界面应用"></a> 📌 项目名称：办公自动化助手系统（基于 PyQt 的图形界面应用）</h2>
<h3 id="项目简介"><a class="markdownIt-Anchor" href="#项目简介"></a> 🧾 项目简介：</h3>
<p>本项目基于 <code>PyQt</code> 实现一个桌面图形界面应用，用于提高日常办公效率，整合多个常用功能，如批量Excel处理、PDF转换、文件重命名、邮件群发等，面向行政人员、人事、财务等岗位需求，简洁高效。</p>
<hr>
<h3 id="技术栈"><a class="markdownIt-Anchor" href="#技术栈"></a> 🧱 技术栈：</h3>
<table>
<thead>
<tr>
<th>技术</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PyQt5</strong></td>
<td>图形界面开发</td>
</tr>
<tr>
<td><strong>Python</strong></td>
<td>核心业务逻辑编写</td>
</tr>
<tr>
<td><strong>Pandas</strong></td>
<td>Excel数据处理与分析</td>
</tr>
<tr>
<td><strong>OpenPyXL / xlrd</strong></td>
<td>Excel 文件读写</td>
</tr>
<tr>
<td><strong>Python-docx / PyPDF2</strong></td>
<td>Word 和 PDF 文档处理</td>
</tr>
<tr>
<td><strong>Smtplib + email.mime</strong></td>
<td>自动化邮件发送模块</td>
</tr>
<tr>
<td><strong>OS / shutil / pathlib</strong></td>
<td>文件批量操作与路径管理</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="️-核心功能模块"><a class="markdownIt-Anchor" href="#️-核心功能模块"></a> 🛠️ 核心功能模块：</h3>
<h4 id="1-批量-excel-数据处理"><a class="markdownIt-Anchor" href="#1-批量-excel-数据处理"></a> 1. <strong>批量 Excel 数据处理</strong></h4>
<ul>
<li>读取多个 Excel 表格进行合并、筛选、统计。</li>
<li>一键生成报表并导出新 Excel。</li>
<li>使用 <code>pandas</code> 进行数据清洗、去重、分类统计。</li>
</ul>
<h4 id="2-pdf-与-word-工具"><a class="markdownIt-Anchor" href="#2-pdf-与-word-工具"></a> 2. <strong>PDF 与 Word 工具</strong></h4>
<ul>
<li>支持 PDF 分页、合并、转图片。</li>
<li>Word 批量替换模板中的占位符自动生成合同/通知（邮件模板功能）。</li>
</ul>
<h4 id="3-邮件群发工具"><a class="markdownIt-Anchor" href="#3-邮件群发工具"></a> 3. <strong>邮件群发工具</strong></h4>
<ul>
<li>通过导入 Excel 联系人名单实现批量邮件发送。</li>
<li>支持附件上传、邮件模板和自动格式填充。</li>
<li>发送成功失败记录保存。</li>
</ul>
<h4 id="4-文件自动重命名与分类管理"><a class="markdownIt-Anchor" href="#4-文件自动重命名与分类管理"></a> 4. <strong>文件自动重命名与分类管理</strong></h4>
<ul>
<li>批量修改文件名（按编号、时间戳等）。</li>
<li>根据文件类型自动分类至指定文件夹（如PDF、Word、图片分组存放）。</li>
</ul>
<h4 id="5-图形用户界面gui"><a class="markdownIt-Anchor" href="#5-图形用户界面gui"></a> 5. <strong>图形用户界面（GUI）</strong></h4>
<ul>
<li>使用 PyQt5 构建模块化界面。</li>
<li>支持文件拖拽、进度条、错误提示、弹窗交互。</li>
<li>设计简洁美观，易于上手。</li>
</ul>
<hr>
<h3 id="技术亮点"><a class="markdownIt-Anchor" href="#技术亮点"></a> 🚀 技术亮点：</h3>
<table>
<thead>
<tr>
<th>模块</th>
<th>技术亮点</th>
</tr>
</thead>
<tbody>
<tr>
<td>PyQt 界面</td>
<td>拖拽上传、实时状态提示、模块化布局（QTabWidget / QStackedWidget）</td>
</tr>
<tr>
<td>Excel 自动处理</td>
<td>自动表头识别、按条件统计、动态透视表生成功能</td>
</tr>
<tr>
<td>邮件群发</td>
<td>支持占位符替换（如 ）、发送日志生成、SMTP连接错误处理</td>
</tr>
<tr>
<td>PDF 功能</td>
<td>文件页数识别、分页合并、PDF转图片</td>
</tr>
<tr>
<td>多线程优化</td>
<td>任务分离线程避免界面卡顿（QThread + 信号槽）</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="简历项目描述推荐简洁表达"><a class="markdownIt-Anchor" href="#简历项目描述推荐简洁表达"></a> 📄 简历项目描述（推荐简洁表达）：</h3>
<p><strong>办公自动化助手系统（PyQt5 + Python）</strong></p>
<blockquote>
<p>独立开发一款基于 PyQt 的本地办公自动化桌面应用，集成 Excel 统计、PDF/Word 批处理、邮件群发等功能。采用 <code>pandas</code> 实现高效数据处理，结合 <code>PyPDF2</code> 和 <code>smtplib</code> 构建常用办公工具集，通过 <code>QThread</code> 实现前后台分离，提升交互流畅度。支持非技术人员一键操作，大幅提升行政办公效率。</p>
</blockquote>
<p><strong>技术亮点：</strong></p>
<ul>
<li>基于 PyQt 自定义 GUI，支持文件拖拽与模块切换；</li>
<li>使用 <code>pandas</code> 实现千行级 Excel 表合并与分析；</li>
<li>邮件模块支持 Excel 动态模板+附件批量群发；</li>
<li>PDF 支持多文档合并与拆分操作；</li>
<li>多线程任务避免主线程阻塞，提升用户体验。</li>
</ul>
<hr>
<h2 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h2>
<p>当然有，虽然这个 PyQt 自动化办公助手项目已经具备较完整的功能，但如果从<strong>用户体验、可维护性、性能、安全性、扩展性</strong>等角度考虑，仍有不少可以优化或提升的空间。下面是几个维度的优化建议，每一项都能为项目增加技术深度与实用价值：</p>
<hr>
<h3 id="一-用户体验优化uxui"><a class="markdownIt-Anchor" href="#一-用户体验优化uxui"></a> ✅ 一、用户体验优化（UX/UI）</h3>
<h3 id="1-界面美化"><a class="markdownIt-Anchor" href="#1-界面美化"></a> 1. <strong>界面美化</strong></h3>
<ul>
<li>使用 <code>QSS（Qt样式表）</code> 优化界面风格（可模仿 Office 风格）</li>
<li>支持深色/浅色主题切换</li>
<li>增加图标按钮、悬浮提示、动画加载（QMovie）</li>
</ul>
<h3 id="2-操作引导"><a class="markdownIt-Anchor" href="#2-操作引导"></a> 2. <strong>操作引导</strong></h3>
<ul>
<li>新用户提示操作步骤（“开始引导页”）</li>
<li>每个功能模块提供“小问号”帮助按钮</li>
</ul>
<h3 id="3-进度与日志可视化"><a class="markdownIt-Anchor" href="#3-进度与日志可视化"></a> 3. <strong>进度与日志可视化</strong></h3>
<ul>
<li>任务进度条 + 状态提示（如“邮件发送中…”）</li>
<li>实时输出日志到右侧窗口，供用户查看</li>
</ul>
<hr>
<h3 id="二-功能与性能优化"><a class="markdownIt-Anchor" href="#二-功能与性能优化"></a> ✅ 二、功能与性能优化</h3>
<h3 id="1-多线程优化已部分实现"><a class="markdownIt-Anchor" href="#1-多线程优化已部分实现"></a> 1. <strong>多线程优化（已部分实现）</strong></h3>
<ul>
<li>所有批处理操作均使用 <code>QThread</code> + 信号槽机制</li>
<li>避免界面卡顿，提升操作流畅度</li>
</ul>
<h3 id="2-任务队列系统"><a class="markdownIt-Anchor" href="#2-任务队列系统"></a> 2. <strong>任务队列系统</strong></h3>
<ul>
<li>支持任务排队执行</li>
<li>可暂停/恢复任务、查看排队任务状态（适用于大批量操作）</li>
</ul>
<h3 id="3-日志系统完善"><a class="markdownIt-Anchor" href="#3-日志系统完善"></a> 3. <strong>日志系统完善</strong></h3>
<ul>
<li>记录每一次执行操作的详细信息（文件名、时间、成功/失败）</li>
<li>使用日志库 <code>logging</code> 保存至文件（可配置）</li>
</ul>
<hr>
<h3 id="三-可扩展性提升"><a class="markdownIt-Anchor" href="#三-可扩展性提升"></a> ✅ 三、可扩展性提升</h3>
<h3 id="1-插件化设计"><a class="markdownIt-Anchor" href="#1-插件化设计"></a> 1. <strong>插件化设计</strong></h3>
<ul>
<li>每个功能模块拆分为插件，可独立添加/禁用</li>
<li>例如通过 <code>config.json</code> 控制哪些功能开启，方便后期扩展</li>
</ul>
<h3 id="2-配置管理"><a class="markdownIt-Anchor" href="#2-配置管理"></a> 2. <strong>配置管理</strong></h3>
<ul>
<li>提供“设置中心”：SMTP账号、默认保存路径、自动命名规则等</li>
<li>配置项使用 <code>configparser</code> 或 <code>json</code> 存储，便于用户自定义</li>
</ul>
<hr>
<h3 id="四-数据与文件处理优化"><a class="markdownIt-Anchor" href="#四-数据与文件处理优化"></a> ✅ 四、数据与文件处理优化</h3>
<h3 id="1-excel容错处理"><a class="markdownIt-Anchor" href="#1-excel容错处理"></a> 1. <strong>Excel容错处理</strong></h3>
<ul>
<li>处理异常格式表格（无表头、多Sheet等）</li>
<li>自动识别编码、格式、空白行等，增加 <code>try-except</code> 捕获</li>
</ul>
<h3 id="2-模板填充增强"><a class="markdownIt-Anchor" href="#2-模板填充增强"></a> 2. <strong>模板填充增强</strong></h3>
<ul>
<li>使用 <code>Jinja2</code> 结合 Word 文本，提供更灵活的模板填充</li>
<li>支持嵌套替换、条件语句等（如：“如果工龄&gt;5年，则写‘资深’…”）</li>
</ul>
<hr>
<h3 id="五-安全性优化"><a class="markdownIt-Anchor" href="#五-安全性优化"></a> ✅ 五、安全性优化</h3>
<h3 id="1-邮件发送安全"><a class="markdownIt-Anchor" href="#1-邮件发送安全"></a> 1. <strong>邮件发送安全</strong></h3>
<ul>
<li>使用 SSL 方式连接 SMTP，避免账号密码泄露</li>
<li>支持 OAuth2 登录邮箱（避免存明文密码）</li>
</ul>
<h3 id="2-日志与敏感信息脱敏"><a class="markdownIt-Anchor" href="#2-日志与敏感信息脱敏"></a> 2. <strong>日志与敏感信息脱敏</strong></h3>
<ul>
<li>邮箱、文件名日志中部分脱敏处理</li>
<li>自动检查邮件是否缺附件/标题是否为空，减少低级错误</li>
</ul>
<hr>
<h3 id="六-高级功能扩展可选"><a class="markdownIt-Anchor" href="#六-高级功能扩展可选"></a> ✅ 六、高级功能扩展（可选）</h3>
<h3 id="1-ocr-功能集成"><a class="markdownIt-Anchor" href="#1-ocr-功能集成"></a> 1. <strong>OCR 功能集成</strong></h3>
<ul>
<li>通过 <code>Tesseract</code> 实现图片/PDF 中的文字识别，辅助报销、发票录入等场景</li>
</ul>
<h3 id="2-语音识别语音播报"><a class="markdownIt-Anchor" href="#2-语音识别语音播报"></a> 2. <strong>语音识别/语音播报</strong></h3>
<ul>
<li>语音读出操作状态（<code>pyttsx3</code>）</li>
<li>用语音命令控制办公流程（更具未来感）</li>
</ul>
<h3 id="3-版本升级检查"><a class="markdownIt-Anchor" href="#3-版本升级检查"></a> 3. <strong>版本升级检查</strong></h3>
<ul>
<li>项目支持联网检查是否有新版本，并下载更新</li>
</ul>
<hr>
<h3 id="总结高质量项目的提升维度"><a class="markdownIt-Anchor" href="#总结高质量项目的提升维度"></a> 🏁 总结：高质量项目的提升维度</h3>
<table>
<thead>
<tr>
<th>优化维度</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户体验</td>
<td>主题切换、操作引导、日志可视化</td>
</tr>
<tr>
<td>性能优化</td>
<td>多线程、任务队列、并发执行</td>
</tr>
<tr>
<td>安全性</td>
<td>邮件加密、日志脱敏、错误捕获</td>
</tr>
<tr>
<td>可扩展性</td>
<td>插件系统、配置中心、模块解耦</td>
</tr>
<tr>
<td>功能深度</td>
<td>OCR、模板引擎、自动格式检查</td>
</tr>
</tbody>
</table>
<hr>
<p>将基于 <code>Python + PyQt</code> 的办公自动化应用项目打包成 <code>.exe</code> 文件，可以让你在<strong>没有 Python 环境的电脑上直接运行</strong>。这个过程通常使用 <code>PyInstaller</code> 来完成，以下是完整的步骤与常见问题说明：</p>
<hr>
<h2 id="打包"><a class="markdownIt-Anchor" href="#打包"></a> 打包</h2>
<h3 id="一-所需工具"><a class="markdownIt-Anchor" href="#一-所需工具"></a> 🧰 一、所需工具</h3>
<table>
<thead>
<tr>
<th>工具</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>PyInstaller</strong></td>
<td>Python 脚本打包为独立可执行文件（.exe）</td>
</tr>
<tr>
<td>Python 环境</td>
<td>建议使用 Python 3.9 或 3.10（兼容性更好）</td>
</tr>
<tr>
<td>Windows 系统</td>
<td>推荐在 Windows 下打包 <code>.exe</code>（跨平台不稳定）</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="二-打包步骤"><a class="markdownIt-Anchor" href="#二-打包步骤"></a> 📦 二、打包步骤</h3>
<h3 id="step-1安装-pyinstaller"><a class="markdownIt-Anchor" href="#step-1安装-pyinstaller"></a> ✅ Step 1：安装 PyInstaller</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">pip install pyinstaller<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="step-2打包命令"><a class="markdownIt-Anchor" href="#step-2打包命令"></a> ✅ Step 2：打包命令</h3>
<p>假设你的主程序文件是 <code>main.py</code>，可以用以下命令打包：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">pyinstaller -F -w -i icon.ico main.py<br></code></pre></td></tr></tbody></table></figure>
<h3 id="参数解释"><a class="markdownIt-Anchor" href="#参数解释"></a> 参数解释：</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-F</code></td>
<td>打包为单个 <code>.exe</code> 文件</td>
</tr>
<tr>
<td><code>-w</code></td>
<td>去掉命令行窗口（GUI 程序用）</td>
</tr>
<tr>
<td><code>-i icon.ico</code></td>
<td>可选，给 <code>.exe</code> 添加图标</td>
</tr>
<tr>
<td><code>main.py</code></td>
<td>主程序入口文件（PyQt主窗口）</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="step-3打包完成后的文件路径"><a class="markdownIt-Anchor" href="#step-3打包完成后的文件路径"></a> ✅ Step 3：打包完成后的文件路径</h3>
<p>执行完后，PyInstaller 会生成以下目录：</p>
<figure class="highlight nix"><table><tbody><tr><td class="code"><pre><code class="hljs nix">📂 dist<span class="hljs-symbol">/</span><br>   └── main.exe      ← 你的最终可执行文件<br>📂 build<span class="hljs-symbol">/</span><br>📂 __pycache__<span class="hljs-symbol">/</span><br>main.spec<br></code></pre></td></tr></tbody></table></figure>
<p>你只需要将 <code>dist/main.exe</code> 拷贝出去即可运行。</p>
<hr>
<h3 id="️-三-如果项目结构较复杂怎么办"><a class="markdownIt-Anchor" href="#️-三-如果项目结构较复杂怎么办"></a> 🛠️ 三、如果项目结构较复杂怎么办？</h3>
<p>假如你有资源文件（如 <code>.ui</code>, <code>.xlsx</code>, <code>.png</code>，模板等），你需要：</p>
<h3 id="方法1使用-add-data-参数添加资源"><a class="markdownIt-Anchor" href="#方法1使用-add-data-参数添加资源"></a> ✅ 方法1：使用 <code>--add-data</code> 参数添加资源</h3>
<p>举例：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">pyinstaller -F -w --add-data <span class="hljs-string">"templates/*;templates"</span> --add-data <span class="hljs-string">"assets/*;assets"</span> main.py<br></code></pre></td></tr></tbody></table></figure>
<p>注意格式：</p>
<ul>
<li>Windows：路径之间用分号 <code>;</code></li>
<li>mac/Linux：路径之间用冒号 <code>:</code></li>
</ul>
<hr>
<h3 id="方法2使用-spec-文件打包"><a class="markdownIt-Anchor" href="#方法2使用-spec-文件打包"></a> ✅ 方法2：使用 <code>.spec</code> 文件打包</h3>
<p>第一次打包时生成了 <code>main.spec</code> 文件，你可以修改它来更灵活地添加数据文件、路径等，然后运行：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">pyinstaller main.spec<br></code></pre></td></tr></tbody></table></figure>
<hr>
<h3 id="四-常见问题与解决方案"><a class="markdownIt-Anchor" href="#四-常见问题与解决方案"></a> ❗ 四、常见问题与解决方案</h3>
<h3 id="1-打包后程序无法运行-崩溃"><a class="markdownIt-Anchor" href="#1-打包后程序无法运行-崩溃"></a> 1. <strong>打包后程序无法运行 / 崩溃</strong></h3>
<ul>
<li>原因：缺少依赖或路径写死</li>
<li>解决：使用 <code>os.path.join(sys._MEIPASS, ...)</code> 获取打包后资源路径</li>
</ul>
<h3 id="2-界面资源无法加载图片-图标"><a class="markdownIt-Anchor" href="#2-界面资源无法加载图片-图标"></a> 2. <strong>界面资源无法加载（图片、图标）</strong></h3>
<ul>
<li>
<p>打包时资源路径错误或未包含</p>
</li>
<li>
<p>加资源时使用 <code>--add-data</code>，程序中路径改为：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys, os<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">getattr</span>(sys, <span class="hljs-string">'frozen'</span>, <span class="hljs-literal">False</span>):<br>    base_path = sys._MEIPASS<br><span class="hljs-keyword">else</span>:<br>    base_path = os.path.dirname(__file__)<br></code></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h3 id="3-打包文件太大几十-mb"><a class="markdownIt-Anchor" href="#3-打包文件太大几十-mb"></a> 3. <strong>打包文件太大（几十 MB）</strong></h3>
<ul>
<li>PyInstaller 会把所有依赖库打进去，正常现象</li>
<li>可以用 <code>UPX</code> 压缩（进阶用法）</li>
</ul>
<hr>
<h3 id="小技巧打包时用-bat-脚本方便重用"><a class="markdownIt-Anchor" href="#小技巧打包时用-bat-脚本方便重用"></a> 🎁 小技巧：打包时用 <code>.bat</code> 脚本方便重用</h3>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>pyinstaller -F -w -i icon.ico --add-data "templates/*;templates" main.py<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></tbody></table></figure>
<p>保存为 <code>build.bat</code>，以后双击就能快速打包。</p>
<hr>
<h3 id="打包完成后测试建议"><a class="markdownIt-Anchor" href="#打包完成后测试建议"></a> ✅ 打包完成后测试建议：</h3>
<ul>
<li>拿去另一个<strong>没有 Python 环境的 Windows 电脑上运行</strong></li>
<li>检查是否能：
<ul>
<li>正常打开界面</li>
<li>执行 Excel、PDF、邮件等功能</li>
<li>日志是否记录正常</li>
<li>错误提示是否有弹窗</li>
</ul>
</li>
</ul>
<hr>
<p>需要我为你生成一个 <code>PyInstaller</code> 的 <code>.spec</code> 文件模板，或打包脚本 <code>.bat</code> 吗？可以帮你一步到位！</p>
]]></content>
      <categories>
        <category>projects</category>
      </categories>
  </entry>
  <entry>
    <title>python</title>
    <url>//posts/a4d4b8b8/</url>
    <content><![CDATA[<h1 id="python基础"><a class="markdownIt-Anchor" href="#python基础"></a> Python基础</h1>
<h2 id="基础语法"><a class="markdownIt-Anchor" href="#基础语法"></a> 基础语法</h2>
<h3 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h3>
<p>默认情况下，Python3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串。也可以为源码文件指定不同的编码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: cp-1252 -*-</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h3>
<ul>
<li>标识符由字母、数字和下划线组成，第一个字符不能是数字；</li>
<li>标识符对大小写敏感，count 和 Count 是不同的标识符。</li>
<li>标识符对长度无硬性限制，但建议保持简洁（一般不超过 20 个字符）。</li>
<li>禁止使用保留关键字</li>
</ul>
<p>Python 3 允许使用 Unicode 字符作为标识符，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">姓名 = <span class="hljs-string">"张三"</span>  <span class="hljs-comment"># 合法</span><br>π = <span class="hljs-number">3.14159</span>   <span class="hljs-comment"># 合法</span><br></code></pre></td></tr></tbody></table></figure>
<p>测试标识符是否合法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid_identifier</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">exec</span>(<span class="hljs-string">f"<span class="hljs-subst">{name}</span> = None"</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-built_in">print</span>(is_valid_identifier(<span class="hljs-string">"2var"</span>))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(is_valid_identifier(<span class="hljs-string">"var2"</span>))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="python保留字"><a class="markdownIt-Anchor" href="#python保留字"></a> python保留字</h3>
<p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> keyword<br><span class="hljs-meta">&gt;&gt;&gt; </span>keyword.kwlist<br>[<span class="hljs-string">'False'</span>, <span class="hljs-string">'None'</span>, <span class="hljs-string">'True'</span>, <span class="hljs-string">'and'</span>, <span class="hljs-string">'as'</span>, <span class="hljs-string">'assert'</span>, <span class="hljs-string">'async'</span>, <span class="hljs-string">'await'</span>, <span class="hljs-string">'break'</span>, <span class="hljs-string">'class'</span>, <span class="hljs-string">'continue'</span>, <span class="hljs-string">'def'</span>, <span class="hljs-string">'del'</span>, <span class="hljs-string">'elif'</span>, <span class="hljs-string">'else'</span>, <span class="hljs-string">'except'</span>, <span class="hljs-string">'finally'</span>, <span class="hljs-string">'for'</span>, <span class="hljs-string">'from'</span>, <span class="hljs-string">'global'</span>, <span class="hljs-string">'if'</span>, <span class="hljs-string">'import'</span>, <span class="hljs-string">'in'</span>, <span class="hljs-string">'is'</span>, <span class="hljs-string">'lambda'</span>, <span class="hljs-string">'nonlocal'</span>, <span class="hljs-string">'not'</span>, <span class="hljs-string">'or'</span>, <span class="hljs-string">'pass'</span>, <span class="hljs-string">'raise'</span>, <span class="hljs-string">'return'</span>, <span class="hljs-string">'try'</span>, <span class="hljs-string">'while'</span>, <span class="hljs-string">'with'</span>, <span class="hljs-string">'yield'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><br></code></pre></td></tr></tbody></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>类别</strong></th>
<th style="text-align:left"><strong>关键字</strong></th>
<th style="text-align:left"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>逻辑值</strong></td>
<td style="text-align:left"><code>True</code></td>
<td style="text-align:left">布尔真值</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>False</code></td>
<td style="text-align:left">布尔假值</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>None</code></td>
<td style="text-align:left">表示空值或无值</td>
</tr>
<tr>
<td style="text-align:left"><strong>逻辑运算</strong></td>
<td style="text-align:left"><code>and</code></td>
<td style="text-align:left">逻辑与运算</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>or</code></td>
<td style="text-align:left">逻辑或运算</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>not</code></td>
<td style="text-align:left">逻辑非运算</td>
</tr>
<tr>
<td style="text-align:left"><strong>条件控制</strong></td>
<td style="text-align:left"><code>if</code></td>
<td style="text-align:left">条件判断语句</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>elif</code></td>
<td style="text-align:left">否则如果（else if 的缩写）</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>else</code></td>
<td style="text-align:left">否则分支</td>
</tr>
<tr>
<td style="text-align:left"><strong>循环控制</strong></td>
<td style="text-align:left"><code>for</code></td>
<td style="text-align:left">迭代循环</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>while</code></td>
<td style="text-align:left">条件循环</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>break</code></td>
<td style="text-align:left">跳出循环</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>continue</code></td>
<td style="text-align:left">跳过当前循环的剩余部分，进入下一次迭代</td>
</tr>
<tr>
<td style="text-align:left"><strong>异常处理</strong></td>
<td style="text-align:left"><code>try</code></td>
<td style="text-align:left">尝试执行代码块</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>except</code></td>
<td style="text-align:left">捕获异常</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>finally</code></td>
<td style="text-align:left">无论是否发生异常都会执行的代码块</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>raise</code></td>
<td style="text-align:left">抛出异常</td>
</tr>
<tr>
<td style="text-align:left"><strong>函数定义</strong></td>
<td style="text-align:left"><code>def</code></td>
<td style="text-align:left">定义函数</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>return</code></td>
<td style="text-align:left">从函数返回值</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>lambda</code></td>
<td style="text-align:left">创建匿名函数</td>
</tr>
<tr>
<td style="text-align:left"><strong>类与对象</strong></td>
<td style="text-align:left"><code>class</code></td>
<td style="text-align:left">定义类</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>del</code></td>
<td style="text-align:left">删除对象引用</td>
</tr>
<tr>
<td style="text-align:left"><strong>模块导入</strong></td>
<td style="text-align:left"><code>import</code></td>
<td style="text-align:left">导入模块</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>from</code></td>
<td style="text-align:left">从模块导入特定部分</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>as</code></td>
<td style="text-align:left">为导入的模块或对象创建别名</td>
</tr>
<tr>
<td style="text-align:left"><strong>作用域</strong></td>
<td style="text-align:left"><code>global</code></td>
<td style="text-align:left">声明全局变量</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>nonlocal</code></td>
<td style="text-align:left">声明非局部变量（用于嵌套函数）</td>
</tr>
<tr>
<td style="text-align:left"><strong>异步编程</strong></td>
<td style="text-align:left"><code>async</code></td>
<td style="text-align:left">声明异步函数</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>await</code></td>
<td style="text-align:left">等待异步操作完成</td>
</tr>
<tr>
<td style="text-align:left"><strong>其他</strong></td>
<td style="text-align:left"><code>assert</code></td>
<td style="text-align:left">断言，用于测试条件是否为真</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>in</code></td>
<td style="text-align:left">检查成员关系</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>is</code></td>
<td style="text-align:left">检查对象身份（是否是同一个对象）</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>pass</code></td>
<td style="text-align:left">空语句，用于占位</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>with</code></td>
<td style="text-align:left">上下文管理器，用于资源管理</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"><code>yield</code></td>
<td style="text-align:left">从生成器函数返回值</td>
</tr>
</tbody>
</table>
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<p>Python中单行注释以 <strong>#</strong> 开头，如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment"># 第一个注释</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"Hello, Python!"</span>) <span class="hljs-comment"># 第二个注释</span><br></code></pre></td></tr></tbody></table></figure>
<p>多行注释：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment"># 第一个注释</span><br><span class="hljs-comment"># 第二个注释</span><br> <br><span class="hljs-string">'''</span><br><span class="hljs-string">第三注释</span><br><span class="hljs-string">第四注释</span><br><span class="hljs-string">'''</span><br> <br><span class="hljs-string">"""</span><br><span class="hljs-string">第五注释</span><br><span class="hljs-string">第六注释</span><br><span class="hljs-string">"""</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"Hello, Python!"</span>)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="行与缩进"><a class="markdownIt-Anchor" href="#行与缩进"></a> 行与缩进</h3>
<p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p>
<p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>
<h3 id="多行语句"><a class="markdownIt-Anchor" href="#多行语句"></a> 多行语句</h3>
<p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 <strong>\</strong> 来实现多行语句，例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">total = item_one + \<br>        item_two + \<br>        item_three<br><br></code></pre></td></tr></tbody></table></figure>
<p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 <strong>\</strong>，</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">total = [<span class="hljs-string">'item_one'</span>, <span class="hljs-string">'item_two'</span>, <span class="hljs-string">'item_three'</span>,<br>        <span class="hljs-string">'item_four'</span>, <span class="hljs-string">'item_five'</span>]<br><br></code></pre></td></tr></tbody></table></figure>
<h3 id="数字number类型"><a class="markdownIt-Anchor" href="#数字number类型"></a> 数字(Number)类型</h3>
<p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<ul>
<li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>
<li><strong>bool</strong> (布尔), 如 True。</li>
<li><strong>float</strong> (浮点数), 如 1.23、3E-2</li>
<li><strong>complex</strong> (复数) - 复数由实部和虚部组成，形式为 a + bj，其中 a 是实部，b 是虚部，j 表示虚数单位。如 1 + 2j、 1.1 + 2.2j</li>
</ul>
<h3 id="字符串string"><a class="markdownIt-Anchor" href="#字符串string"></a> 字符串(String)</h3>
<ul>
<li>Python 中单引号 <strong>’</strong> 和双引号 <strong>"</strong> 使用完全相同。</li>
<li>使用三引号(<strong>‘’’</strong> 或 <strong>“”"</strong>)可以指定一个多行字符串。</li>
<li>转义符 <strong>\</strong>。</li>
<li>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。  raw string如 <strong>r"this is a line with \n"</strong> 则 <strong>\n</strong> 会显示，并不是换行。</li>
<li>按字面意义级联字符串，如 <strong>"this " "is " “string”</strong> 会被自动转换为 <strong>this is string</strong>。</li>
<li>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复。</li>
<li>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</li>
<li>Python 中的字符串不能改变。</li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>
<li>字符串切片 <strong>str[start:end]</strong>，其中 start（包含）是切片开始的索引，end（不包含）是切片结束的索引。</li>
<li>字符串的切片可以加上步长参数 step，语法格式如下：<strong>str[start<span class="github-emoji"><span>🔚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>step]</strong></li>
</ul>
<p>😄</p>
<h3 id="空行"><a class="markdownIt-Anchor" href="#空行"></a> 空行</h3>
<p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>
<blockquote>
<p>空行也是程序代码的一部分。</p>
</blockquote>
<h3 id="等待用户输入"><a class="markdownIt-Anchor" href="#等待用户输入"></a> 等待用户输入</h3>
<p>执行下面的程序在按回车键后就会等待用户输入：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-built_in">input</span>(<span class="hljs-string">"\n\n按下 enter 键后退出。"</span>)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="同一行显示多条语句"><a class="markdownIt-Anchor" href="#同一行显示多条语句"></a> 同一行显示多条语句</h3>
<p>Python 可以在同一行中使用多条语句，语句之间使用分号 <strong>;</strong> 分割，以下是一个简单的实例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> sys; x = <span class="hljs-string">'runoob'</span>; sys.stdout.write(x + <span class="hljs-string">'\n'</span>)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="多个语句构成代码组"><a class="markdownIt-Anchor" href="#多个语句构成代码组"></a> 多个语句构成代码组</h3>
<p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>
<p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p>
<p>我们将首行及后面的代码组称为一个子句(clause)。</p>
<p>如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression : <br>   suite<br><span class="hljs-keyword">elif</span> expression : <br>   suite <br><span class="hljs-keyword">else</span> : <br>   suite<br><br></code></pre></td></tr></tbody></table></figure>
<h3 id="print-输出"><a class="markdownIt-Anchor" href="#print-输出"></a> print 输出</h3>
<p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end=“”</strong>：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>x=<span class="hljs-string">"a"</span><br>y=<span class="hljs-string">"b"</span><br><span class="hljs-comment"># 换行输出</span><br><span class="hljs-built_in">print</span>( x )<br><span class="hljs-built_in">print</span>( y )<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">'---------'</span>)<br><span class="hljs-comment"># 不换行输出</span><br><span class="hljs-built_in">print</span>( x, end=<span class="hljs-string">" "</span> )<br><span class="hljs-built_in">print</span>( y, end=<span class="hljs-string">" "</span> )<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></tbody></table></figure>
<h3 id="import-与-fromimport"><a class="markdownIt-Anchor" href="#import-与-fromimport"></a> import 与 from…import</h3>
<p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p>
<p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p>
<p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p>
<p>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></p>
<blockquote>
<p><strong><code>import module</code></strong>：</p>
<ul>
<li>导入整个模块。模块中的所有对象都可用。</li>
<li>模块中的对象通过 <code>module.name</code> 访问，不会与当前命名空间中的其他对象冲突。</li>
<li>代码中明确知道哪些对象来自哪个模块，因为总是使用模块名前缀。</li>
<li>提高代码可读性和可维护性。</li>
</ul>
<p><strong><code>from module import name</code></strong>：</p>
<ul>
<li>从模块中导入特定的对象（函数、类、变量等）。节省内存。</li>
<li>使用时直接引用导入的对象，不需模块名前缀。</li>
<li>可能会与当前命名空间中的其他对象发生命名冲突。</li>
<li>代码中直接使用对象名，可能难以看出这些对象来自哪个模块。</li>
<li>需要对代码进行更多注释或文档说明，以保持清晰。</li>
</ul>
<p><strong><code>from module import \*</code></strong>：尽量避免使用，可能导致命名冲突和代码混淆。</p>
</blockquote>
<h3 id="命令行参数"><a class="markdownIt-Anchor" href="#命令行参数"></a> 命令行参数</h3>
<p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python -h</span><br>usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...<br>Options and arguments (and corresponding environment variables):<br>-c cmd : program passed in as string (terminates option list)<br>-d     : debug output from parser (also PYTHONDEBUG=x)<br>-E     : ignore environment variables (such as PYTHONPATH)<br>-h     : print this help message and exit<br><br>[ etc. ]<br><br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3基本数据类型"><a class="markdownIt-Anchor" href="#python3基本数据类型"></a> Python3基本数据类型</h2>
<p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<p>在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。</p>
<p>等号（=）用来给变量赋值。</p>
<p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br>counter = <span class="hljs-number">100</span>          <span class="hljs-comment"># 整型变量</span><br>miles   = <span class="hljs-number">1000.0</span>       <span class="hljs-comment"># 浮点型变量</span><br>name    = <span class="hljs-string">"runoob"</span>     <span class="hljs-comment"># 字符串</span><br><br><span class="hljs-built_in">print</span> (counter)<br><span class="hljs-built_in">print</span> (miles)<br><span class="hljs-built_in">print</span> (name)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="多个变量赋值"><a class="markdownIt-Anchor" href="#多个变量赋值"></a> 多个变量赋值</h3>
<p>Python允许你同时为多个变量赋值。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a = b = c = <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure>
<p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p>
<p>您也可以为多个对象指定多个变量。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">"runoob"</span><br></code></pre></td></tr></tbody></table></figure>
<p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “runoob” 分配给变量 c。</p>
<p>可以通过 <strong>type()</strong> 函数查看变量的类型：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 变量定义</span><br>x = <span class="hljs-number">10</span>          <span class="hljs-comment"># 整数</span><br>y = <span class="hljs-number">3.14</span>         <span class="hljs-comment"># 浮点数</span><br>name = <span class="hljs-string">"Alice"</span>   <span class="hljs-comment"># 字符串</span><br>is_active = <span class="hljs-literal">True</span> <span class="hljs-comment"># 布尔值</span><br><br><span class="hljs-comment"># 多变量赋值</span><br>a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">"three"</span><br><br><span class="hljs-comment"># 查看数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))        <span class="hljs-comment"># &lt;class 'int'&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))        <span class="hljs-comment"># &lt;class 'float'&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(name))     <span class="hljs-comment"># &lt;class 'str'&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(is_active)) <span class="hljs-comment"># &lt;class 'bool'&gt;</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="标准数据类型"><a class="markdownIt-Anchor" href="#标准数据类型"></a> 标准数据类型</h3>
<p>Python3 中常见的数据类型有：</p>
<ul>
<li>Number（数字）</li>
<li>String（字符串）</li>
<li>bool（布尔类型）</li>
<li>Tuple（元组）</li>
<li>List（列表）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<p>Python3 的六个标准数据类型中：</p>
<ul>
<li>**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；</li>
<li>**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。</li>
</ul>
<p>此外还有一些高级的数据类型，如: 字节数组类型(bytes)。</p>
<h3 id="number数字"><a class="markdownIt-Anchor" href="#number数字"></a> Number（数字）</h3>
<p>Python3 支持 <strong>int、float、bool、complex（复数）</strong>。</p>
<p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p>
<p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p>
<p>内置的 type() 函数可以用来查询变量所指的对象类型。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a, b, c, d = <span class="hljs-number">20</span>, <span class="hljs-number">5.5</span>, <span class="hljs-literal">True</span>, <span class="hljs-number">4</span>+<span class="hljs-number">3j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a), <span class="hljs-built_in">type</span>(b), <span class="hljs-built_in">type</span>(c), <span class="hljs-built_in">type</span>(d))<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'int'</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'float'</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'bool'</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'complex'</span>&gt;<br></code></pre></td></tr></tbody></table></figure>
<p>此外还可以用 isinstance 来判断：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">111</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">isinstance</span>(a, <span class="hljs-built_in">int</span>)<br><span class="hljs-literal">True</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></tbody></table></figure>
<p>isinstance 和 type 的区别在于：</p>
<ul>
<li>type()不会认为子类是一种父类类型。</li>
<li>isinstance()会认为子类是一种父类类型。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">isinstance</span>(A(), A)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(A()) == A <br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">isinstance</span>(B(), A)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(B()) == A<br><span class="hljs-literal">False</span><br></code></pre></td></tr></tbody></table></figure>
<p>**注意：<em><em><em>Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加，</em> <strong>True==1、False==0</strong> <em>会返回</em> <strong>True</strong></em>，但可以通过</em> <strong>is</strong> <em>来判断类型。</em></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">issubclass</span>(<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">int</span>) <br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">True</span>==<span class="hljs-number">1</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">False</span>==<span class="hljs-number">0</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">True</span>+<span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-literal">False</span>+<span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span><br>&lt;python-<span class="hljs-built_in">input</span>-<span class="hljs-number">12</span>&gt;:<span class="hljs-number">1</span>: SyntaxWarning: <span class="hljs-string">"is"</span> <span class="hljs-keyword">with</span> <span class="hljs-string">'int'</span> literal. Did you mean <span class="hljs-string">"=="</span>?<br>  <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span><br>&lt;python-<span class="hljs-built_in">input</span>-<span class="hljs-number">13</span>&gt;:<span class="hljs-number">1</span>: SyntaxWarning: <span class="hljs-string">"is"</span> <span class="hljs-keyword">with</span> <span class="hljs-string">'int'</span> literal. Did you mean <span class="hljs-string">"=="</span>?<br>  <span class="hljs-number">0</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span><br><span class="hljs-literal">False</span><br><span class="hljs-string">"""什么会出现 SyntaxWarning？</span><br><span class="hljs-string"></span><br><span class="hljs-string">Python 检测到你在用 is 比较一个字面量整数（如 1）和 True，这通常是代码错误（因为 is 比较的是身份，而不是值）。</span><br><span class="hljs-string"></span><br><span class="hljs-string">Python 建议你使用 == 来比较值是否相等，除非你确实想检查是否是同一个对象。</span><br><span class="hljs-string"></span><br><span class="hljs-string">在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>当你指定一个值时，Number 对象就会被创建：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">var1 = <span class="hljs-number">1</span><br>var2 = <span class="hljs-number">10</span><br></code></pre></td></tr></tbody></table></figure>
<p>您也可以使用del语句删除一些对象引用。</p>
<p><strong>del</strong> 语句的语法是：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> var1[, var2[, var3[...., varN]]]<br></code></pre></td></tr></tbody></table></figure>
<p>您可以通过使用 <strong>del</strong> 语句删除单个或多个对象。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> var<br><span class="hljs-keyword">del</span> var_a, var_b<br></code></pre></td></tr></tbody></table></figure>
<p><em>数值运算</em></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">5</span> + <span class="hljs-number">4</span>  <span class="hljs-comment"># 加法</span><br><span class="hljs-number">9</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">4.3</span> - <span class="hljs-number">2</span> <span class="hljs-comment"># 减法</span><br><span class="hljs-number">2.3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> * <span class="hljs-number">7</span>  <span class="hljs-comment"># 乘法</span><br><span class="hljs-number">21</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> / <span class="hljs-number">4</span>  <span class="hljs-comment"># 除法，得到一个浮点数</span><br><span class="hljs-number">0.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> // <span class="hljs-number">4</span> <span class="hljs-comment"># 除法，得到一个整数</span><br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">17</span> % <span class="hljs-number">3</span> <span class="hljs-comment"># 取余 </span><br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> ** <span class="hljs-number">5</span> <span class="hljs-comment"># 乘方</span><br><span class="hljs-number">32</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li>
<li>2、一个变量可以通过赋值指向不同类型的对象。</li>
<li>3、数值的除法包含两个运算符：<strong>/</strong> 返回一个浮点数，<strong>//</strong> 返回一个整数。</li>
<li>4、在混合计算时，Python会把整型转换成为浮点数。</li>
</ul>
<p><em>数值类型实例</em></p>
<table>
<thead>
<tr>
<th style="text-align:left">int</th>
<th style="text-align:left">float</th>
<th style="text-align:left">complex</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">0.0</td>
<td style="text-align:left">3.14j</td>
</tr>
<tr>
<td style="text-align:left">100</td>
<td style="text-align:left">15.20</td>
<td style="text-align:left">45.j</td>
</tr>
<tr>
<td style="text-align:left">-786</td>
<td style="text-align:left">-21.9</td>
<td style="text-align:left">9.322e-36j</td>
</tr>
<tr>
<td style="text-align:left">080</td>
<td style="text-align:left">32.3e+18</td>
<td style="text-align:left">.876j</td>
</tr>
<tr>
<td style="text-align:left">-0490</td>
<td style="text-align:left">-90.</td>
<td style="text-align:left">-.6545+0J</td>
</tr>
<tr>
<td style="text-align:left">-0x260</td>
<td style="text-align:left">-32.54e100</td>
<td style="text-align:left">3e+26J</td>
</tr>
<tr>
<td style="text-align:left">0x69</td>
<td style="text-align:left">70.2E-12</td>
<td style="text-align:left">4.53e-7j</td>
</tr>
</tbody>
</table>
<p>Python 还支持复数，复数由实数部分和虚数部分构成，可以用 <strong>a + bj</strong>，或者 <strong>complex(a,b)</strong> 表示， 复数的实部 <strong>a</strong> 和虚部 <strong>b</strong> 都是浮点型。</p>
<h4 id="数学函数"><a class="markdownIt-Anchor" href="#数学函数"></a> 数学函数</h4>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">返回值 ( 描述 )</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs(x)</a></td>
<td style="text-align:left">返回数字的绝对值，如abs(-10) 返回 10</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-ceil.html">ceil(x)</a></td>
<td style="text-align:left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td>
</tr>
<tr>
<td style="text-align:left">cmp(x, y)</td>
<td style="text-align:left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html">exp(x)</a></td>
<td style="text-align:left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html">fabs(x)</a></td>
<td style="text-align:left">以浮点数形式返回数字的绝对值，如math.fabs(-10) 返回10.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html">floor(x)</a></td>
<td style="text-align:left">返回数字的下舍整数，如math.floor(4.9)返回 4</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-log.html">log(x)</a></td>
<td style="text-align:left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html">log10(x)</a></td>
<td style="text-align:left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-max.html">max(x1, x2,…)</a></td>
<td style="text-align:left">返回给定参数的最大值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-min.html">min(x1, x2,…)</a></td>
<td style="text-align:left">返回给定参数的最小值，参数可以为序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html">modf(x)</a></td>
<td style="text-align:left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow(x, y)</a></td>
<td style="text-align:left">x**y 运算后的值。</td>
</tr>
<tr>
<td style="text-align:left">[round(x <a href="https://www.runoob.com/python3/python3-func-number-round.html">,n])</a></td>
<td style="text-align:left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html">sqrt(x)</a></td>
<td style="text-align:left">返回数字x的平方根。</td>
</tr>
</tbody>
</table>
<h4 id="随机数函数"><a class="markdownIt-Anchor" href="#随机数函数"></a> 随机数函数</h4>
<p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p>
<p>Python包含以下常用随机数函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html">choice(seq)</a></td>
<td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td>
</tr>
<tr>
<td style="text-align:left">[randrange (<a href="https://www.runoob.com/python3/python3-func-number-randrange.html">start,] stop [,step])</a></td>
<td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-random.html">random()</a></td>
<td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td>
</tr>
<tr>
<td style="text-align:left">[seed(<a href="https://www.runoob.com/python3/python3-func-number-seed.html">x])</a></td>
<td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html">shuffle(lst)</a></td>
<td style="text-align:left">将序列的所有元素随机排序</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html">uniform(x, y)</a></td>
<td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td>
</tr>
</tbody>
</table>
<h4 id="三角函数"><a class="markdownIt-Anchor" href="#三角函数"></a> 三角函数</h4>
<p>Python包括以下三角函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html">acos(x)</a></td>
<td style="text-align:left">返回x的反余弦弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html">asin(x)</a></td>
<td style="text-align:left">返回x的反正弦弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html">atan(x)</a></td>
<td style="text-align:left">返回x的反正切弧度值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html">atan2(y, x)</a></td>
<td style="text-align:left">返回给定的 X 及 Y 坐标值的反正切值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html">cos(x)</a></td>
<td style="text-align:left">返回x的弧度的余弦值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html">hypot(x, y)</a></td>
<td style="text-align:left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html">sin(x)</a></td>
<td style="text-align:left">返回的x弧度的正弦值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html">tan(x)</a></td>
<td style="text-align:left">返回x弧度的正切值。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html">degrees(x)</a></td>
<td style="text-align:left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html">radians(x)</a></td>
<td style="text-align:left">将角度转换为弧度</td>
</tr>
</tbody>
</table>
<h4 id="数学常量"><a class="markdownIt-Anchor" href="#数学常量"></a> 数学常量</h4>
<table>
<thead>
<tr>
<th style="text-align:left">常量</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">pi</td>
<td style="text-align:left">数学常量 pi（圆周率，一般以π来表示）</td>
</tr>
<tr>
<td style="text-align:left">e</td>
<td style="text-align:left">数学常量 e，e即自然常数（自然常数）。</td>
</tr>
</tbody>
</table>
<h3 id="string字符串"><a class="markdownIt-Anchor" href="#string字符串"></a> String（字符串）</h3>
<p>Python中的字符串用单引号 <strong>’</strong> 或双引号 <strong>"</strong> 括起来，同时使用反斜杠 <strong>\</strong> 转义特殊字符。</p>
<p>字符串的截取的语法格式如下：</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><code class="hljs markdown">变量[头下标:尾下标]<br></code></pre></td></tr></tbody></table></figure>
<p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p>
<p><img src="https://static.jyshare.com/wp-content/uploads/123456-20200923-1.svg" alt="11"></p>
<p>加号 <strong>+</strong> 是字符串的连接符， 星号 ***** 表示复制当前字符串，与之结合的数字为复制的次数。实例如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">'helloworld'</span>  <span class="hljs-comment"># 定义一个字符串变量</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)           <span class="hljs-comment"># 打印整个字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])     <span class="hljs-comment"># 打印字符串第一个到倒数第二个字符（不包含倒数第一个字符）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])        <span class="hljs-comment"># 打印字符串的第一个字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])      <span class="hljs-comment"># 打印字符串第三到第五个字符（不包含索引为 5 的字符）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:])       <span class="hljs-comment"># 打印字符串从第三个字符开始到末尾</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> * <span class="hljs-number">2</span>)       <span class="hljs-comment"># 打印字符串两次</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> + <span class="hljs-string">"TEST"</span>)  <span class="hljs-comment"># 打印字符串和"TEST"拼接在一起</span><br></code></pre></td></tr></tbody></table></figure>
<p>Python 使用反斜杠 <strong>\</strong> 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <strong>r</strong>，表示原始字符串</p>
<p>另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong>“”“…”“”</strong> 或者 <strong>‘’‘…’‘’</strong> 跨越多行。</p>
<p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</p>
<p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如 <strong>word[0] = ‘m’</strong> 会导致错误。</p>
<h4 id="python-转义字符"><a class="markdownIt-Anchor" href="#python-转义字符"></a> Python 转义字符</h4>
<p>在需要在字符中使用特殊字符时，python 用反斜杠 *<em>*</em> 转义字符。如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">转义字符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">(在行尾时)</td>
<td style="text-align:left">续行符</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("line1 \ ... line2 \ ... line3") line1 line2 line3 &gt;&gt;&gt; </code></td>
</tr>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left">反斜杠符号</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("\\") \</code></td>
</tr>
<tr>
<td style="text-align:left">'</td>
<td style="text-align:left">单引号</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print('\'') '</code></td>
</tr>
<tr>
<td style="text-align:left">"</td>
<td style="text-align:left">双引号</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("\"") "</code></td>
</tr>
<tr>
<td style="text-align:left">\a</td>
<td style="text-align:left">响铃</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("\a")</code>执行后电脑有响声。</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">退格(Backspace)</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("Hello \b World!") Hello World!</code></td>
</tr>
<tr>
<td style="text-align:left">\000</td>
<td style="text-align:left">空</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("\000") &gt;&gt;&gt; </code></td>
</tr>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:left">换行</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("\n")  &gt;&gt;&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">\v</td>
<td style="text-align:left">纵向制表符</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("Hello \v World!") Hello        World! &gt;&gt;&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:left">横向制表符</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("Hello \t World!") Hello    World! &gt;&gt;&gt;</code></td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:left">回车，将 <strong>\r</strong> 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 <strong>\r</strong> 后面的内容完全替换完成。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("Hello\rWorld!") World! &gt;&gt;&gt; print('google runoob taobao\r123456') 123456 runoob taobao</code></td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:left">换页</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("Hello \f World!") Hello        World! &gt;&gt;&gt; </code></td>
</tr>
<tr>
<td style="text-align:left">\yyy</td>
<td style="text-align:left">八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("\110\145\154\154\157\40\127\157\162\154\144\41") Hello World!</code></td>
</tr>
<tr>
<td style="text-align:left">\xyy</td>
<td style="text-align:left">十六进制数，以 \x 开头，y 代表的字符，例如：\x0a 代表换行</td>
<td style="text-align:left"><code>&gt;&gt;&gt; print("\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21") Hello World!</code></td>
</tr>
<tr>
<td style="text-align:left">\other</td>
<td style="text-align:left">其它的字符以普通格式输出</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>使用 <strong>\r</strong> 实现百分比进度：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>): <span class="hljs-comment"># 添加进度条图形和百分比</span><br>    bar = <span class="hljs-string">'['</span> + <span class="hljs-string">'='</span> * (i // <span class="hljs-number">2</span>) + <span class="hljs-string">' '</span> * (<span class="hljs-number">50</span> - i // <span class="hljs-number">2</span>) + <span class="hljs-string">']'</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"\r<span class="hljs-subst">{bar}</span> <span class="hljs-subst">{i:<span class="hljs-number">3</span>}</span>%"</span>, end=<span class="hljs-string">''</span>, flush=<span class="hljs-literal">True</span>)<br>    time.sleep(<span class="hljs-number">0.05</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></tbody></table></figure>
<p>以下实例，我们使用了不同的转义字符来演示单引号、换行符、制表符、退格符、换页符、ASCII、二进制、八进制数和十六进制数的效果：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">'\'Hello, world!\''</span>)  <span class="hljs-comment"># 输出：'Hello, world!'</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello, world!\nHow are you?"</span>)  <span class="hljs-comment"># 输出：Hello, world!</span><br>                                        <span class="hljs-comment">#       How are you?</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello, world!\tHow are you?"</span>)  <span class="hljs-comment"># 输出：Hello, world!    How are you?</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello,\b world!"</span>)  <span class="hljs-comment"># 输出：Hello world!</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello,\f world!"</span>)  <span class="hljs-comment"># 输出：</span><br>                           <span class="hljs-comment"># Hello,</span><br>                           <span class="hljs-comment">#  world!</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"A 对应的 ASCII 值为："</span>, <span class="hljs-built_in">ord</span>(<span class="hljs-string">'A'</span>))  <span class="hljs-comment"># 输出：A 对应的 ASCII 值为： 65</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"\x41 为 A 的 ASCII 代码"</span>)  <span class="hljs-comment"># 输出：A 为 A 的 ASCII 代码</span><br><br>decimal_number = <span class="hljs-number">42</span><br>binary_number = <span class="hljs-built_in">bin</span>(decimal_number)  <span class="hljs-comment"># 十进制转换为二进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'转换为二进制:'</span>, binary_number)  <span class="hljs-comment"># 转换为二进制: 0b101010</span><br><br>octal_number = <span class="hljs-built_in">oct</span>(decimal_number)  <span class="hljs-comment"># 十进制转换为八进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'转换为八进制:'</span>, octal_number)  <span class="hljs-comment"># 转换为八进制: 0o52</span><br><br>hexadecimal_number = <span class="hljs-built_in">hex</span>(decimal_number)  <span class="hljs-comment"># 十进制转换为十六进制</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">'转换为十六进制:'</span>, hexadecimal_number) <span class="hljs-comment"># 转换为十六进制: 0x2a</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="python-字符串运算符"><a class="markdownIt-Anchor" href="#python-字符串运算符"></a> Python 字符串运算符</h4>
<p>下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”：</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">字符串连接</td>
<td style="text-align:left">a + b 输出结果： HelloPython</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">重复输出字符串</td>
<td style="text-align:left">a*2 输出结果：HelloHello</td>
</tr>
<tr>
<td style="text-align:left">[]</td>
<td style="text-align:left">通过索引获取字符串中字符</td>
<td style="text-align:left">a[1] 输出结果 <strong>e</strong></td>
</tr>
<tr>
<td style="text-align:left">[ : ]</td>
<td style="text-align:left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</td>
<td style="text-align:left">a[1:4] 输出结果 <strong>ell</strong></td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">成员运算符 - 如果字符串中包含给定的字符返回 True</td>
<td style="text-align:left"><strong>‘H’ in a</strong> 输出结果 True</td>
</tr>
<tr>
<td style="text-align:left">not in</td>
<td style="text-align:left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td>
<td style="text-align:left"><strong>‘M’ not in a</strong> 输出结果 True</td>
</tr>
<tr>
<td style="text-align:left">r/R</td>
<td style="text-align:left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td>
<td style="text-align:left"><code>print( r'\n' ) print( R'\n' )</code></td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">格式字符串</td>
<td style="text-align:left">请看下一节内容。</td>
</tr>
</tbody>
</table>
<h4 id="python-字符串格式化"><a class="markdownIt-Anchor" href="#python-字符串格式化"></a> Python 字符串格式化</h4>
<p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p>
<p>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"我叫 %s 今年 %d 岁!"</span> % (<span class="hljs-string">'小明'</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></tbody></table></figure>
<p>python字符串格式化符号:</p>
<table>
<thead>
<tr>
<th style="text-align:left">符  号</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%c</td>
<td style="text-align:left">格式化字符及其ASCII码</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">格式化字符串</td>
</tr>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">格式化整数</td>
</tr>
<tr>
<td style="text-align:left">%u</td>
<td style="text-align:left">格式化无符号整型</td>
</tr>
<tr>
<td style="text-align:left">%o</td>
<td style="text-align:left">格式化无符号八进制数</td>
</tr>
<tr>
<td style="text-align:left">%x</td>
<td style="text-align:left">格式化无符号十六进制数</td>
</tr>
<tr>
<td style="text-align:left">%X</td>
<td style="text-align:left">格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td style="text-align:left">%f</td>
<td style="text-align:left">格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr>
<td style="text-align:left">%e</td>
<td style="text-align:left">用科学计数法格式化浮点数</td>
</tr>
<tr>
<td style="text-align:left">%E</td>
<td style="text-align:left">作用同%e，用科学计数法格式化浮点数</td>
</tr>
<tr>
<td style="text-align:left">%g</td>
<td style="text-align:left">%f和%e的简写</td>
</tr>
<tr>
<td style="text-align:left">%G</td>
<td style="text-align:left">%f 和 %E 的简写</td>
</tr>
<tr>
<td style="text-align:left">%p</td>
<td style="text-align:left">用十六进制数格式化变量的地址</td>
</tr>
</tbody>
</table>
<p>格式化操作符辅助指令:</p>
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">定义宽度或者小数点精度</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">用做左对齐</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">在正数前面显示加号( + )</td>
</tr>
<tr>
<td style="text-align:left"><sp></sp></td>
<td style="text-align:left">在正数前面显示空格</td>
</tr>
<tr>
<td style="text-align:left">#</td>
<td style="text-align:left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">显示的数字前面填充’0’而不是默认的空格</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">‘%%‘输出一个单一的’%’</td>
</tr>
<tr>
<td style="text-align:left">(var)</td>
<td style="text-align:left">映射变量(字典参数)</td>
</tr>
<tr>
<td style="text-align:left">m.n.</td>
<td style="text-align:left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>
</tr>
</tbody>
</table>
<p>Python2.6 开始，新增了一种格式化字符串的函数 <a href="https://www.runoob.com/python/att-string-format.html">str.format()</a>，它增强了字符串格式化的功能。</p>
<h4 id="format-格式化函数"><a class="markdownIt-Anchor" href="#format-格式化函数"></a> format 格式化函数</h4>
<p>它增强了字符串格式化的功能。基本语法是通过 <strong>{}</strong> 和 <strong>:</strong> 来代替以前的 <strong>%</strong> 。</p>
<p>format 函数可以接受不限个参数，位置可以不按顺序。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-string">"{} {}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"hello"</span>, <span class="hljs-string">"world"</span>)    <span class="hljs-comment"># 不设置指定位置，按默认顺序</span><br><span class="hljs-string">'hello world'</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">"{0} {1}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"hello"</span>, <span class="hljs-string">"world"</span>)  <span class="hljs-comment"># 设置指定位置</span><br><span class="hljs-string">'hello world'</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">"{1} {0} {1}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"hello"</span>, <span class="hljs-string">"world"</span>)  <span class="hljs-comment"># 设置指定位置</span><br><span class="hljs-string">'world hello world'</span><br></code></pre></td></tr></tbody></table></figure>
<p>也可以设置参数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">"网站名：{name}, 地址 {url}"</span>.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">"菜鸟教程"</span>, url=<span class="hljs-string">"www.runoob.com"</span>))<br> <br><span class="hljs-comment"># 通过字典设置参数</span><br>site = {<span class="hljs-string">"name"</span>: <span class="hljs-string">"菜鸟教程"</span>, <span class="hljs-string">"url"</span>: <span class="hljs-string">"www.runoob.com"</span>}<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"网站名：{name}, 地址 {url}"</span>.<span class="hljs-built_in">format</span>(**site))<br> <br><span class="hljs-comment"># 通过列表索引设置参数</span><br>my_list = [<span class="hljs-string">'菜鸟教程'</span>, <span class="hljs-string">'www.runoob.com'</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"网站名：{0[0]}, 地址 {0[1]}"</span>.<span class="hljs-built_in">format</span>(my_list))  <span class="hljs-comment"># "0" 是必须的</span><br><span class="hljs-string">"""</span><br><span class="hljs-string">网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="hljs-string">网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="hljs-string">网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>也可以向 <strong>str.format()</strong> 传入对象：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignValue</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-variable language_">self</span>.value = value<br>my_value = AssignValue(<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'value 为: {0.value}'</span>.<span class="hljs-built_in">format</span>(my_value))  <span class="hljs-comment"># "0" 是可选的</span><br><span class="hljs-string">'''</span><br><span class="hljs-string">value 为: 6</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>下表展示了 str.format() 格式化数字的多种方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left">数字</th>
<th style="text-align:left">格式</th>
<th style="text-align:left">输出</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">3.1415926</td>
<td style="text-align:left">{:.2f}</td>
<td style="text-align:left">3.14</td>
<td style="text-align:left">保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">3.1415926</td>
<td style="text-align:left">{:+.2f}</td>
<td style="text-align:left">+3.14</td>
<td style="text-align:left">带符号保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">-1</td>
<td style="text-align:left">{:-.2f}</td>
<td style="text-align:left">-1.00</td>
<td style="text-align:left">带符号保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">2.71828</td>
<td style="text-align:left">{:.0f}</td>
<td style="text-align:left">3</td>
<td style="text-align:left">不带小数</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{:0&gt;2d}</td>
<td style="text-align:left">05</td>
<td style="text-align:left">数字补零 (填充左边, 宽度为2)</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{:x&lt;4d}</td>
<td style="text-align:left">5xxx</td>
<td style="text-align:left">数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">{:x&lt;4d}</td>
<td style="text-align:left">10xx</td>
<td style="text-align:left">数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td style="text-align:left">1000000</td>
<td style="text-align:left">{:,}</td>
<td style="text-align:left">1,000,000</td>
<td style="text-align:left">以逗号分隔的数字格式</td>
</tr>
<tr>
<td style="text-align:left">0.25</td>
<td style="text-align:left">{:.2%}</td>
<td style="text-align:left">25.00%</td>
<td style="text-align:left">百分比格式</td>
</tr>
<tr>
<td style="text-align:left">1000000000</td>
<td style="text-align:left">{:.2e}</td>
<td style="text-align:left">1.00e+09</td>
<td style="text-align:left">指数记法</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:&gt;10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">右对齐 (默认, 宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:&lt;10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">左对齐 (宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:^10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">中间对齐 (宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><code>'{:b}'.format(11) '{:d}'.format(11) '{:o}'.format(11) '{:x}'.format(11) '{:#x}'.format(11) '{:#X}'.format(11)</code></td>
<td style="text-align:left"><code>1011 11 13 b 0xb 0XB</code></td>
<td style="text-align:left">进制</td>
</tr>
</tbody>
</table>
<p><strong>^</strong>, <strong>&lt;</strong>, <strong>&gt;</strong> 分别是居中、左对齐、右对齐，后面带宽度， <strong>:</strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p>
<p><strong>+</strong> 表示在正数前显示 <strong>+</strong>，负数前显示 <strong>-</strong>； （空格）表示在正数前加空格</p>
<p>b、d、o、x 分别是二进制、十进制、八进制、十六进制。</p>
<p>此外我们可以使用大括号 <strong>{}</strong> 来转义大括号，如下实例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"{} 对应的位置是 {{0}}"</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">"runoob"</span>))<br><span class="hljs-string">"""</span><br><span class="hljs-string">runoob 对应的位置是 {0}</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="python三引号"><a class="markdownIt-Anchor" href="#python三引号"></a> Python三引号</h4>
<p>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>para_str = <span class="hljs-string">"""这是一个多行字符串的实例</span><br><span class="hljs-string">多行字符串可以使用制表符</span><br><span class="hljs-string">TAB ( \t )。</span><br><span class="hljs-string">也可以使用换行符 [ \n ]。</span><br><span class="hljs-string">"""</span><br><span class="hljs-built_in">print</span> (para_str)<br><br>--------------------<br><span class="hljs-string">"""</span><br><span class="hljs-string">这是一个多行字符串的实例</span><br><span class="hljs-string">多行字符串可以使用制表符</span><br><span class="hljs-string">TAB (    )。</span><br><span class="hljs-string">也可以使用换行符 [ </span><br><span class="hljs-string"> ]。</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。</p>
<p>一个典型的用例是，当你需要一块HTML或者SQL时，这时用字符串组合，特殊字符串转义将会非常的繁琐。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">errHTML = <span class="hljs-string">'''</span><br><span class="hljs-string">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class="hljs-string">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="hljs-string">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class="hljs-string">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span><br><span class="hljs-string">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class="hljs-string">ONCLICK="window.history.back()"&gt;&lt;/FORM&gt;</span><br><span class="hljs-string">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="hljs-string">'''</span><br>cursor.execute(<span class="hljs-string">'''</span><br><span class="hljs-string">CREATE TABLE users (  </span><br><span class="hljs-string">login VARCHAR(8), </span><br><span class="hljs-string">uid INTEGER,</span><br><span class="hljs-string">prid INTEGER)</span><br><span class="hljs-string">'''</span>)<br></code></pre></td></tr></tbody></table></figure>
<h4 id="f-string"><a class="markdownIt-Anchor" href="#f-string"></a> f-string</h4>
<p>f-string 是 python3.6 之后版本添加的，称之为字面量格式化字符串，是新的格式化字符串的语法。</p>
<p>之前我们习惯用百分号 (%):</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>name = <span class="hljs-string">'Runoob'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'Hello %s'</span> % name<br><span class="hljs-string">'Hello Runoob'</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>f-string</strong> 格式化字符串以 <strong>f</strong> 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去，实例如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>name = <span class="hljs-string">'Runoob'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f'Hello <span class="hljs-subst">{name}</span>'</span>  <span class="hljs-comment"># 替换变量</span><br><span class="hljs-string">'Hello Runoob'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f'<span class="hljs-subst">{<span class="hljs-number">1</span>+<span class="hljs-number">2</span>}</span>'</span>         <span class="hljs-comment"># 使用表达式</span><br><span class="hljs-string">'3'</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>w = {<span class="hljs-string">'name'</span>: <span class="hljs-string">'Runoob'</span>, <span class="hljs-string">'url'</span>: <span class="hljs-string">'www.runoob.com'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f'<span class="hljs-subst">{w[<span class="hljs-string">"name"</span>]}</span>: <span class="hljs-subst">{w[<span class="hljs-string">"url"</span>]}</span>'</span><br><span class="hljs-string">'Runoob: www.runoob.com'</span><br></code></pre></td></tr></tbody></table></figure>
<p>用了这种方式明显更简单了，不用再去判断使用 %s，还是 %d。</p>
<p>在 Python 3.8 的版本中可以使用 <strong>=</strong> 符号来拼接运算表达式与结果：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{x+<span class="hljs-number">1</span>}</span>'</span>)   <span class="hljs-comment"># Python 3.6</span><br><span class="hljs-number">2</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f'<span class="hljs-subst">{x+<span class="hljs-number">1</span>=}</span>'</span>)   <span class="hljs-comment"># Python 3.8</span><br>x+<span class="hljs-number">1</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="unicode-字符串"><a class="markdownIt-Anchor" href="#unicode-字符串"></a> Unicode 字符串</h4>
<p>在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 <strong>u</strong>。</p>
<p>在Python3中，所有的字符串都是Unicode字符串。</p>
<h4 id="python-的字符串内建函数"><a class="markdownIt-Anchor" href="#python-的字符串内建函数"></a> Python 的字符串内建函数</h4>
<p>Python 的字符串常用内建函数如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-capitalize.html">capitalize()</a> 将字符串的第一个字符转换为大写</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-center.html">center(width, fillchar)</a>返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-count.html">count(str, beg= 0,end=len(string))</a> 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-decode.html">bytes.decode(encoding=“utf-8”, errors=“strict”)</a> Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-encode.html">encode(encoding=‘UTF-8’,errors=‘strict’)</a> 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-endswith.html">endswith(suffix, beg=0, end=len(string))</a> 检查字符串是否以 suffix 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 suffix 结束，如果是，返回 True,否则返回 False。</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-expandtabs.html">expandtabs(tabsize=8)</a> 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-find.html">find(str, beg=0, end=len(string))</a> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-index.html">index(str, beg=0, end=len(string))</a> 跟find()方法一样，只不过如果str不在字符串中会报一个异常。</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-isalnum.html">isalnum()</a> 检查字符串是否由字母和数字组成，即字符串中的所有字符都是字母或数字。如果字符串至少有一个字符，并且所有字符都是字母或数字，则返回 True；否则返回 False。</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-isalpha.html">isalpha()</a> 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-isdigit.html">isdigit()</a> 如果字符串只包含数字则返回 True 否则返回 False…</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-islower.html">islower()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-isnumeric.html">isnumeric()</a> 如果字符串中只包含数字字符，则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">15</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-isspace.html">isspace()</a> 如果字符串中只包含空白，则返回 True，否则返回 False.</td>
</tr>
<tr>
<td style="text-align:left">16</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-istitle.html">istitle()</a> 如果字符串是标题化的(见 title())则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">17</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-isupper.html">isupper()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">18</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-join.html">join(seq)</a> 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td>
</tr>
<tr>
<td style="text-align:left">19</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-len.html">len(string)</a> 返回字符串长度</td>
</tr>
<tr>
<td style="text-align:left">20</td>
<td style="text-align:left">[ljust(width<a href="https://www.runoob.com/python3/python3-string-ljust.html">, fillchar])</a> 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td>
</tr>
<tr>
<td style="text-align:left">21</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-lower.html">lower()</a> 转换字符串中所有大写字符为小写.</td>
</tr>
<tr>
<td style="text-align:left">22</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-lstrip.html">lstrip()</a> 截掉字符串左边的空格或指定字符。</td>
</tr>
<tr>
<td style="text-align:left">23</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-maketrans.html">maketrans()</a> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>
</tr>
<tr>
<td style="text-align:left">24</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-max.html">max(str)</a> 返回字符串 str 中最大的字母。</td>
</tr>
<tr>
<td style="text-align:left">25</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-min.html">min(str)</a> 返回字符串 str 中最小的字母。</td>
</tr>
<tr>
<td style="text-align:left">26</td>
<td style="text-align:left">[replace(old, new <a href="https://www.runoob.com/python3/python3-string-replace.html">, max])</a> 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。</td>
</tr>
<tr>
<td style="text-align:left">27</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-rfind.html">rfind(str, beg=0,end=len(string))</a> 类似于 find()函数，不过是从右边开始查找.</td>
</tr>
<tr>
<td style="text-align:left">28</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-rindex.html">rindex( str, beg=0, end=len(string))</a> 类似于 index()，不过是从右边开始.</td>
</tr>
<tr>
<td style="text-align:left">29</td>
<td style="text-align:left">[rjust(width,<a href="https://www.runoob.com/python3/python3-string-rjust.html">, fillchar])</a> 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td>
</tr>
<tr>
<td style="text-align:left">30</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-rstrip.html">rstrip()</a> 删除字符串末尾的空格或指定字符。</td>
</tr>
<tr>
<td style="text-align:left">31</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-split.html">split(str=“”, num=string.count(str))</a> 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td>
</tr>
<tr>
<td style="text-align:left">32</td>
<td style="text-align:left">[splitlines(<a href="https://www.runoob.com/python3/python3-string-splitlines.html">keepends])</a> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td>
</tr>
<tr>
<td style="text-align:left">33</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-startswith.html">startswith(substr, beg=0,end=len(string))</a> 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td>
</tr>
<tr>
<td style="text-align:left">34</td>
<td style="text-align:left">[strip(<a href="https://www.runoob.com/python3/python3-string-strip.html">chars])</a> 在字符串上执行 lstrip()和 rstrip()</td>
</tr>
<tr>
<td style="text-align:left">35</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-swapcase.html">swapcase()</a> 将字符串中大写转换为小写，小写转换为大写</td>
</tr>
<tr>
<td style="text-align:left">36</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-title.html">title()</a> 返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td>
</tr>
<tr>
<td style="text-align:left">37</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-translate.html">translate(table, deletechars=“”)</a> 根据 table 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td>
</tr>
<tr>
<td style="text-align:left">38</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-upper.html">upper()</a> 转换字符串中的小写字母为大写</td>
</tr>
<tr>
<td style="text-align:left">39</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-zfill.html">zfill (width)</a> 返回长度为 width 的字符串，原字符串右对齐，前面填充0</td>
</tr>
<tr>
<td style="text-align:left">40</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-isdecimal.html">isdecimal()</a> 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td>
</tr>
</tbody>
</table>
<h3 id="bool布尔类型"><a class="markdownIt-Anchor" href="#bool布尔类型"></a> bool（布尔类型）</h3>
<p>布尔类型即 True 或 False。</p>
<p>在 Python 中，True 和 False 都是关键字，表示布尔值。</p>
<p>布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。</p>
<p>布尔类型特点：</p>
<ul>
<li>布尔类型只有两个值：True 和 False。</li>
<li>bool 是 int 的子类，因此布尔值可以被看作整数来使用，其中 True 等价于 1。</li>
<li>布尔类型可以和其他数据类型进行比较，比如数字、字符串等。在比较时，Python 会将 True 视为 1，False 视为 0。</li>
<li>布尔类型可以和逻辑运算符一起使用，包括 and、or 和 not。这些运算符可以用来组合多个布尔表达式，生成一个新的布尔值。</li>
<li>布尔类型也可以被转换成其他数据类型，比如整数、浮点数和字符串。在转换时，True 会被转换成 1，False 会被转换成 0。</li>
<li>可以使用 <code>bool()</code> 函数将其他类型的值转换为布尔值。以下值在转换为布尔值时为 <code>False</code>：<code>None</code>、<code>False</code>、零 (<code>0</code>、<code>0.0</code>、<code>0j</code>)、空序列（如 <code>''</code>、<code>()</code>、<code>[]</code>）和空映射（如 <code>{}</code>）。其他所有值转换为布尔值时均为 <code>True</code>。</li>
</ul>
<h3 id="list列表"><a class="markdownIt-Anchor" href="#list列表"></a> List（列表）</h3>
<p>List（列表） 是 Python 中使用最频繁的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p>
<p>列表是写在方括号 <strong>[ ]</strong> 之间、用逗号分隔开的元素列表。</p>
<p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p>
<p>列表截取的语法格式如下：变量[头下标:尾下标:步长]</p>
<p>加号 <strong>+</strong> 是列表连接运算符，星号 ***** 是重复操作。</p>
<p>列表中的元素是可以改变的</p>
<h4 id="删除列表元素"><a class="markdownIt-Anchor" href="#删除列表元素"></a> 删除列表元素</h4>
<p>可以使用 del 语句来删除列表中的元素，如下实例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-built_in">list</span> = [<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Runoob'</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">2000</span>]<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"原始列表 : "</span>, <span class="hljs-built_in">list</span>)<br><span class="hljs-keyword">del</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"删除第三个元素 : "</span>, <span class="hljs-built_in">list</span>)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">原始列表 :  ['Google', 'Runoob', 1997, 2000]</span><br><span class="hljs-string">删除第三个元素 :  ['Google', 'Runoob', 2000]</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="python列表脚本操作符"><a class="markdownIt-Anchor" href="#python列表脚本操作符"></a> Python列表脚本操作符</h4>
<p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p>
<p>如下所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Python 表达式</th>
<th style="text-align:left">结果</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">len([1, 2, 3])</td>
<td style="text-align:left">3</td>
<td style="text-align:left">长度</td>
</tr>
<tr>
<td style="text-align:left">[1, 2, 3] + [4, 5, 6]</td>
<td style="text-align:left">[1, 2, 3, 4, 5, 6]</td>
<td style="text-align:left">组合</td>
</tr>
<tr>
<td style="text-align:left">[‘Hi!’] * 4</td>
<td style="text-align:left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>
<td style="text-align:left">重复</td>
</tr>
<tr>
<td style="text-align:left">3 in [1, 2, 3]</td>
<td style="text-align:left">True</td>
<td style="text-align:left">元素是否存在于列表中</td>
</tr>
<tr>
<td style="text-align:left">for x in [1, 2, 3]: print(x, end=" ")</td>
<td style="text-align:left">1 2 3</td>
<td style="text-align:left">迭代</td>
</tr>
</tbody>
</table>
<h4 id="列表比较"><a class="markdownIt-Anchor" href="#列表比较"></a> 列表比较</h4>
<p>列表比较需要引入 <strong>operator</strong> 模块的 <strong>eq</strong> 方法</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入 operator 模块</span><br><span class="hljs-keyword">import</span> operator<br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>b = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>c = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"operator.eq(a,b): "</span>, operator.eq(a,b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"operator.eq(c,b): "</span>, operator.eq(c,b))<br><span class="hljs-string">"""</span><br><span class="hljs-string">operator.eq(a,b):  False</span><br><span class="hljs-string">operator.eq(c,b):  True</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="python列表函数方法"><a class="markdownIt-Anchor" href="#python列表函数方法"></a> Python列表函数&amp;方法</h4>
<p>Python包含以下函数:</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">函数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-len.html">len(list)</a> 列表元素个数</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-max.html">max(list)</a> 返回列表元素最大值</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-min.html">min(list)</a> 返回列表元素最小值</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(seq)</a> 将元组转换为列表</td>
</tr>
</tbody>
</table>
<p>Python包含以下方法:</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">[list.pop(<a href="https://www.runoob.com/python3/python3-att-list-pop.html">index=-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html">list.reverse()</a> 反向列表中元素</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html">list.sort( key=None, reverse=False)</a> 对原列表进行排序</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html">list.clear()</a> 清空列表</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html">list.copy()</a> 复制列表</td>
</tr>
</tbody>
</table>
<h3 id="tuple元组"><a class="markdownIt-Anchor" href="#tuple元组"></a> Tuple（元组）</h3>
<p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <strong>( )</strong> 里，元素之间用逗号隔开。</p>
<p>元组中的元素类型也可以不相同：</p>
<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>
<p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">tup1 = ()    <span class="hljs-comment"># 空元组</span><br>tup2 = (<span class="hljs-number">20</span>,) <span class="hljs-comment"># 一个元素，需要在元素后添加逗号</span><br></code></pre></td></tr></tbody></table></figure>
<p>如果你想创建只有一个元素的元组，需要注意在元素后面添加一个逗号，以区分它是一个元组而不是一个普通的值，这是因为在没有逗号的情况下，Python会将括号解释为数学运算中的括号，而不是元组的表示。</p>
<blockquote>
<p>string、list 和 tuple 都属于 sequence（序列）。</p>
</blockquote>
<h4 id="修改元组"><a class="markdownIt-Anchor" href="#修改元组"></a> 修改元组</h4>
<p>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>tup1 = (<span class="hljs-number">12</span>, <span class="hljs-number">34.56</span>)<br>tup2 = (<span class="hljs-string">'abc'</span>, <span class="hljs-string">'xyz'</span>)<br> <br><span class="hljs-comment"># 以下修改元组元素操作是非法的。</span><br><span class="hljs-comment"># tup1[0] = 100</span><br> <br><span class="hljs-comment"># 创建一个新的元组</span><br>tup3 = tup1 + tup2<br><span class="hljs-built_in">print</span> (tup3)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">(12, 34.56, 'abc', 'xyz')</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="删除元组"><a class="markdownIt-Anchor" href="#删除元组"></a> 删除元组</h4>
<p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>tup = (<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Runoob'</span>, <span class="hljs-number">1997</span>, <span class="hljs-number">2000</span>)<br> <br><span class="hljs-built_in">print</span> (tup)<br><span class="hljs-keyword">del</span> tup<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"删除后的元组 tup : "</span>)<br><span class="hljs-built_in">print</span> (tup)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">删除后的元组 tup : </span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File "test.py", line 8, in &lt;module&gt;</span><br><span class="hljs-string">    print (tup)</span><br><span class="hljs-string">NameError: name 'tup' is not defined</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="元组内置函数"><a class="markdownIt-Anchor" href="#元组内置函数"></a> 元组内置函数</h4>
<p>Python元组包含了以下内置函数</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法及描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">len(tuple) 计算元组元素个数。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; tuple1 = ('Google', 'Runoob', 'Taobao') &gt;&gt;&gt; len(tuple1) 3 &gt;&gt;&gt; </code></td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">max(tuple) 返回元组中元素最大值。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; tuple2 = ('5', '4', '8') &gt;&gt;&gt; max(tuple2) '8' &gt;&gt;&gt; </code></td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">min(tuple) 返回元组中元素最小值。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; tuple2 = ('5', '4', '8') &gt;&gt;&gt; min(tuple2) '4' &gt;&gt;&gt; </code></td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">tuple(iterable) 将可迭代系列转换为元组。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; list1= ['Google', 'Taobao', 'Runoob', 'Baidu'] &gt;&gt;&gt; tuple1=tuple(list1) &gt;&gt;&gt; tuple1 ('Google', 'Taobao', 'Runoob', 'Baidu')</code></td>
</tr>
</tbody>
</table>
<h4 id="关于元组是不可变的"><a class="markdownIt-Anchor" href="#关于元组是不可变的"></a> 关于元组是不可变的</h4>
<p>所谓元组的不可变指的是元组所指向的内存中的内容不可变。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>tup = (<span class="hljs-string">'r'</span>, <span class="hljs-string">'u'</span>, <span class="hljs-string">'n'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'o'</span>, <span class="hljs-string">'b'</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tup[<span class="hljs-number">0</span>] = <span class="hljs-string">'g'</span>     <span class="hljs-comment"># 不支持修改元素</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: <span class="hljs-string">'tuple'</span> <span class="hljs-built_in">object</span> does <span class="hljs-keyword">not</span> support item assignment<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(tup)     <span class="hljs-comment"># 查看内存地址</span><br><span class="hljs-number">4440687904</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tup = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">id</span>(tup)<br><span class="hljs-number">4441088800</span>    <span class="hljs-comment"># 内存地址不一样了</span><br></code></pre></td></tr></tbody></table></figure>
<p>从以上实例可以看出，重新赋值的元组 tup，绑定到新的对象了，不是修改了原来的对象。</p>
<h3 id="set集合"><a class="markdownIt-Anchor" href="#set集合"></a> Set（集合）</h3>
<p>Python 中的集合（Set）是一种无序、可变的数据类型，用于存储<strong>唯一</strong>的元素。</p>
<p>集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作。</p>
<p>在 Python 中，集合使用大括号 <strong>{}</strong> 表示，元素之间用逗号 <strong>,</strong> 分隔。</p>
<p>另外，也可以使用 <strong>set()</strong> 函数创建集合。</p>
<p>**注意：**创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>
<p>创建格式：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">parame = {value01,value02,...}<br>或者<br><span class="hljs-built_in">set</span>(value)<br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br>sites = {<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Taobao'</span>, <span class="hljs-string">'Runoob'</span>, <span class="hljs-string">'Facebook'</span>, <span class="hljs-string">'Zhihu'</span>, <span class="hljs-string">'Baidu'</span>}<br><br><span class="hljs-built_in">print</span>(sites)   <span class="hljs-comment"># 输出集合，重复的元素被自动去掉</span><br><br><span class="hljs-comment"># 成员测试</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">'Runoob'</span> <span class="hljs-keyword">in</span> sites :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Runoob 在集合中'</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'Runoob 不在集合中'</span>)<br><br><br><span class="hljs-comment"># set可以进行集合运算</span><br>a = <span class="hljs-built_in">set</span>(<span class="hljs-string">'abracadabra'</span>)<br>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">'alacazam'</span>)<br><br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-built_in">print</span>(a - b)     <span class="hljs-comment"># a 和 b 的差集</span><br><br><span class="hljs-built_in">print</span>(a | b)     <span class="hljs-comment"># a 和 b 的并集</span><br><br><span class="hljs-built_in">print</span>(a &amp; b)     <span class="hljs-comment"># a 和 b 的交集</span><br><br><span class="hljs-built_in">print</span>(a ^ b)     <span class="hljs-comment"># a 和 b 中不同时存在的元素</span><br><span class="hljs-string">"""</span><br><span class="hljs-string">以上输出</span><br><span class="hljs-string">{'Zhihu', 'Baidu', 'Taobao', 'Runoob', 'Google', 'Facebook'}</span><br><span class="hljs-string">Runoob 在集合中</span><br><span class="hljs-string">{'b', 'c', 'a', 'r', 'd'}</span><br><span class="hljs-string">{'r', 'b', 'd'}</span><br><span class="hljs-string">{'b', 'c', 'a', 'z', 'm', 'r', 'l', 'd'}</span><br><span class="hljs-string">{'c', 'a'}</span><br><span class="hljs-string">{'z', 'b', 'm', 'r', 'l', 'd'}</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="集合内置方法完整列表"><a class="markdownIt-Anchor" href="#集合内置方法完整列表"></a> 集合内置方法完整列表</h3>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td>
<td style="text-align:left">为集合添加元素</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td>
<td style="text-align:left">移除集合中的所有元素</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td>
<td style="text-align:left">拷贝一个集合</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td>
<td style="text-align:left">返回多个集合的差集</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td>
<td style="text-align:left">移除集合中的元素，该元素在指定的集合也存在。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td>
<td style="text-align:left">删除集合中指定的元素</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td>
<td style="text-align:left">返回集合的交集</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></td>
<td style="text-align:left">返回集合的交集。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td>
<td style="text-align:left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td>
<td style="text-align:left">判断指定集合是否为该方法参数集合的子集。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td>
<td style="text-align:left">判断该方法的参数集合是否为指定集合的子集</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td>
<td style="text-align:left">随机移除元素</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></td>
<td style="text-align:left">移除指定元素</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td>
<td style="text-align:left">返回两个集合中不重复的元素集合。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td>
<td style="text-align:left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td>
<td style="text-align:left">返回两个集合的并集</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></td>
<td style="text-align:left">给集合添加元素</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-string-len.html">len()</a></td>
<td style="text-align:left">计算集合元素个数</td>
</tr>
</tbody>
</table>
<h3 id="dictionary字典"><a class="markdownIt-Anchor" href="#dictionary字典"></a> Dictionary（字典）</h3>
<p>字典（dictionary）字典是另一种可变容器模型，且可存储任意类型对象。</p>
<p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p>
<p>键(key)必须使用不可变类型。</p>
<p>在同一个字典中，键(key)必须是唯一的。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-built_in">dict</span> = {}<br><span class="hljs-built_in">dict</span>[<span class="hljs-string">'one'</span>] = <span class="hljs-string">"1 - 菜鸟教程"</span><br><span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>]     = <span class="hljs-string">"2 - 菜鸟工具"</span><br><br>tinydict = {<span class="hljs-string">'name'</span>: <span class="hljs-string">'runoob'</span>,<span class="hljs-string">'code'</span>:<span class="hljs-number">1</span>, <span class="hljs-string">'site'</span>: <span class="hljs-string">'www.runoob.com'</span>}<br><br><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">dict</span>[<span class="hljs-string">'one'</span>])       <span class="hljs-comment"># 输出键为 'one' 的值</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>])           <span class="hljs-comment"># 输出键为 2 的值</span><br><span class="hljs-built_in">print</span> (tinydict)          <span class="hljs-comment"># 输出完整的字典</span><br><span class="hljs-built_in">print</span> (tinydict.keys())   <span class="hljs-comment"># 输出所有键</span><br><span class="hljs-built_in">print</span> (tinydict.values()) <span class="hljs-comment"># 输出所有值</span><br><span class="hljs-string">'''</span><br><span class="hljs-string">1 - 菜鸟教程</span><br><span class="hljs-string">2 - 菜鸟工具</span><br><span class="hljs-string">{'name': 'runoob', 'code': 1, 'site': 'www.runoob.com'}</span><br><span class="hljs-string">dict_keys(['name', 'code', 'site'])</span><br><span class="hljs-string">dict_values(['runoob', 1, 'www.runoob.com'])</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>([(<span class="hljs-string">'Runoob'</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">'Google'</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">'Taobao'</span>, <span class="hljs-number">3</span>)])<br>{<span class="hljs-string">'Runoob'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'Google'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'Taobao'</span>: <span class="hljs-number">3</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>{x: x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)}<br>{<span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">4</span>: <span class="hljs-number">16</span>, <span class="hljs-number">6</span>: <span class="hljs-number">36</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>(Runoob=<span class="hljs-number">1</span>, Google=<span class="hljs-number">2</span>, Taobao=<span class="hljs-number">3</span>)<br>{<span class="hljs-string">'Runoob'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'Google'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'Taobao'</span>: <span class="hljs-number">3</span>}<br></code></pre></td></tr></tbody></table></figure>
<h4 id="修改字典"><a class="markdownIt-Anchor" href="#修改字典"></a> 修改字典</h4>
<p>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>tinydict = {<span class="hljs-string">'Name'</span>: <span class="hljs-string">'Runoob'</span>, <span class="hljs-string">'Age'</span>: <span class="hljs-number">7</span>, <span class="hljs-string">'Class'</span>: <span class="hljs-string">'First'</span>}<br> <br>tinydict[<span class="hljs-string">'Age'</span>] = <span class="hljs-number">8</span>               <span class="hljs-comment"># 更新 Age</span><br>tinydict[<span class="hljs-string">'School'</span>] = <span class="hljs-string">"菜鸟教程"</span>  <span class="hljs-comment"># 添加信息</span><br> <br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"tinydict['Age']: "</span>, tinydict[<span class="hljs-string">'Age'</span>])<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"tinydict['School']: "</span>, tinydict[<span class="hljs-string">'School'</span>])<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">tinydict['Age']:  8</span><br><span class="hljs-string">tinydict['School']:  菜鸟教程</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="删除字典元素"><a class="markdownIt-Anchor" href="#删除字典元素"></a> 删除字典元素</h4>
<p>能删单一的元素也能清空字典，清空只需一项操作。</p>
<p>显式删除一个字典用del命令，如下实例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>tinydict = {<span class="hljs-string">'Name'</span>: <span class="hljs-string">'Runoob'</span>, <span class="hljs-string">'Age'</span>: <span class="hljs-number">7</span>, <span class="hljs-string">'Class'</span>: <span class="hljs-string">'First'</span>}<br> <br><span class="hljs-keyword">del</span> tinydict[<span class="hljs-string">'Name'</span>] <span class="hljs-comment"># 删除键 'Name'</span><br>tinydict.clear()     <span class="hljs-comment"># 清空字典</span><br><span class="hljs-keyword">del</span> tinydict         <span class="hljs-comment"># 删除字典</span><br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"tinydict['Age']: "</span>, tinydict[<span class="hljs-string">'Age'</span>])<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"tinydict['School']: "</span>, tinydict[<span class="hljs-string">'School'</span>])<br></code></pre></td></tr></tbody></table></figure>
<p>但这会引发一个异常，因为用执行 del 操作后字典不再存在：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">"/runoob-test/test.py"</span>, line <span class="hljs-number">9</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">"tinydict['Age']: "</span>, tinydict[<span class="hljs-string">'Age'</span>])<br>NameError: name <span class="hljs-string">'tinydict'</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></tbody></table></figure>
<h4 id="字典键的特性"><a class="markdownIt-Anchor" href="#字典键的特性"></a> 字典键的特性</h4>
<p>字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。</p>
<p>两个重要的点需要记住：</p>
<p>1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，</p>
<p>2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，</p>
<h4 id="字典内置函数方法"><a class="markdownIt-Anchor" href="#字典内置函数方法"></a> 字典内置函数&amp;方法</h4>
<p>Python字典包含了以下内置函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">函数及描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">len(dict) 计算字典元素个数，即键的总数。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} &gt;&gt;&gt; len(tinydict) 3</code></td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">str(dict) 输出字典，可以打印的字符串表示。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} &gt;&gt;&gt; str(tinydict) "{'Name': 'Runoob', 'Class': 'First', 'Age': 7}"</code></td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。</td>
<td style="text-align:left"><code>&gt;&gt;&gt; tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} &gt;&gt;&gt; type(tinydict) &lt;class 'dict'&gt;</code></td>
</tr>
</tbody>
</table>
<p>Python字典包含了以下内置方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">函数及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-clear.html">dict.clear()</a> 删除字典内所有元素</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-copy.html">dict.copy()</a> 返回一个字典的浅复制</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html">dict.fromkeys()</a> 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-get.html">dict.get(key, default=None)</a> 返回指定键的值，如果键不在字典中返回 default 设置的默认值</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-in.html">key in dict</a> 如果键在字典dict里返回true，否则返回false</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-items.html">dict.items()</a> 以列表返回一个视图对象</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-keys.html">dict.keys()</a> 返回一个视图对象</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-setdefault.html">dict.setdefault(key, default=None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-update.html">dict.update(dict2)</a> 把字典dict2的键/值对更新到dict里</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-values.html">dict.values()</a> 返回一个视图对象</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">[dict.pop(key<a href="https://www.runoob.com/python3/python3-att-dictionary-pop.html">,default])</a> 删除字典 key（键）所对应的值，返回被删除的值。</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-dictionary-popitem.html">dict.popitem()</a> 返回并删除字典中的最后一对键和值。</td>
</tr>
</tbody>
</table>
<h3 id="bytes-类型"><a class="markdownIt-Anchor" href="#bytes-类型"></a> bytes 类型</h3>
<p>在 Python3 中，bytes 类型表示的是不可变的二进制序列（byte sequence）。</p>
<p>与字符串类型不同的是，bytes 类型中的元素是整数值（0 到 255 之间的整数），而不是 Unicode 字符。</p>
<p>bytes 类型通常用于处理二进制数据，比如图像文件、音频文件、视频文件等等。在网络编程中，也经常使用 bytes 类型来传输二进制数据。</p>
<p>创建 bytes 对象的方式有多种，最常见的方式是使用 b 前缀：</p>
<p>此外，也可以使用 bytes() 函数将其他类型的对象转换为 bytes 类型。bytes() 函数的第一个参数是要转换的对象，第二个参数是编码方式，如果省略第二个参数，则默认使用 UTF-8 编码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">"hello"</span>, encoding=<span class="hljs-string">"utf-8"</span>)<br></code></pre></td></tr></tbody></table></figure>
<p>与字符串类型类似，bytes 类型也支持许多操作和方法，如切片、拼接、查找、替换等等。同时，由于 bytes 类型是不可变的，因此在进行修改操作时需要创建一个新的 bytes 对象。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">b"hello"</span><br>y = x[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]  <span class="hljs-comment"># 切片操作，得到 b"el"</span><br>z = x + <span class="hljs-string">b"world"</span>  <span class="hljs-comment"># 拼接操作，得到 b"helloworld"</span><br></code></pre></td></tr></tbody></table></figure>
<p>需要注意的是，bytes 类型中的元素是整数值，因此在进行比较操作时需要使用相应的整数值。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-string">b"hello"</span><br><span class="hljs-keyword">if</span> x[<span class="hljs-number">0</span>] == <span class="hljs-built_in">ord</span>(<span class="hljs-string">"h"</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"The first element is 'h'"</span>)<br><span class="hljs-comment"># 其中 ord() 函数用于将字符转换为相应的整数值。</span><br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3-数据类型转换"><a class="markdownIt-Anchor" href="#python3-数据类型转换"></a> Python3 数据类型转换</h2>
<p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，一般情况下你只需要将数据类型作为函数名即可。</p>
<p>Python 数据类型转换可以分为两种：</p>
<ul>
<li>隐式类型转换 - 自动完成</li>
<li>显式类型转换 - 需要使用类型函数来转换</li>
</ul>
<h3 id="隐式类型转换"><a class="markdownIt-Anchor" href="#隐式类型转换"></a> 隐式类型转换</h3>
<p>在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。</p>
<p>以下实例中，我们对两种不同类型的数据进行运算，较低数据类型（整数）就会转换为较高数据类型（浮点数）以避免数据丢失。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">num_int = <span class="hljs-number">123</span><br>num_flo = <span class="hljs-number">1.23</span><br><br>num_new = num_int + num_flo<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"num_int 数据类型为:"</span>,<span class="hljs-built_in">type</span>(num_int))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"num_flo 数据类型为:"</span>,<span class="hljs-built_in">type</span>(num_flo))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"num_new 值为:"</span>,num_new)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"num_new 数据类型为:"</span>,<span class="hljs-built_in">type</span>(num_new))<br><span class="hljs-string">"""</span><br><span class="hljs-string">num_int 数据类型为: &lt;class 'int'&gt;</span><br><span class="hljs-string">num_flo 数据类型为: &lt;class 'float'&gt;</span><br><span class="hljs-string">num_new: 值为: 124.23</span><br><span class="hljs-string">num_new 数据类型为: &lt;class 'float'&gt;</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>再看一个实例，整型数据与字符串类型的数据进行相加：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">num_int = <span class="hljs-number">123</span><br>num_str = <span class="hljs-string">"456"</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"num_int 数据类型为:"</span>,<span class="hljs-built_in">type</span>(num_int))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"num_str 数据类型为:"</span>,<span class="hljs-built_in">type</span>(num_str))<br><br><span class="hljs-built_in">print</span>(num_int+num_str)<br><span class="hljs-string">"""</span><br><span class="hljs-string">num_int 数据类型为: &lt;class 'int'&gt;</span><br><span class="hljs-string">num_str 数据类型为: &lt;class 'str'&gt;</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File "/runoob-test/test.py", line 7, in &lt;module&gt;</span><br><span class="hljs-string">    print(num_int+num_str)</span><br><span class="hljs-string">TypeError: unsupported operand type(s) for +: 'int' and 'str'</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>从输出中可以看出，整型和字符串类型运算结果会报错，输出 TypeError。 Python 在这种情况下无法使用隐式转换。</p>
<p>但是，Python 为这些类型的情况提供了一种解决方案，称为显式转换。</p>
<h3 id="显式类型转换"><a class="markdownIt-Anchor" href="#显式类型转换"></a> 显式类型转换</h3>
<p>在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。</p>
<p><strong>int()</strong> 强制转换为整型：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)   <span class="hljs-comment"># x 输出结果为 1</span><br>y = <span class="hljs-built_in">int</span>(<span class="hljs-number">2.8</span>) <span class="hljs-comment"># y 输出结果为 2</span><br>z = <span class="hljs-built_in">int</span>(<span class="hljs-string">"3"</span>) <span class="hljs-comment"># z 输出结果为 3</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>float()</strong> 强制转换为浮点型：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>)     <span class="hljs-comment"># x 输出结果为 1.0</span><br>y = <span class="hljs-built_in">float</span>(<span class="hljs-number">2.8</span>)   <span class="hljs-comment"># y 输出结果为 2.8</span><br>z = <span class="hljs-built_in">float</span>(<span class="hljs-string">"3"</span>)   <span class="hljs-comment"># z 输出结果为 3.0</span><br>w = <span class="hljs-built_in">float</span>(<span class="hljs-string">"4.2"</span>) <span class="hljs-comment"># w 输出结果为 4.2</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>str()</strong> 强制转换为字符串类型：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">str</span>(<span class="hljs-string">"s1"</span>) <span class="hljs-comment"># x 输出结果为 's1'</span><br>y = <span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>)    <span class="hljs-comment"># y 输出结果为 '2'</span><br>z = <span class="hljs-built_in">str</span>(<span class="hljs-number">3.0</span>)  <span class="hljs-comment"># z 输出结果为 '3.0'</span><br></code></pre></td></tr></tbody></table></figure>
<p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[int(x <a href="https://www.runoob.com/python3/python-func-int.html">,base])</a></td>
<td style="text-align:left">将x转换为一个整数</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-float.html">float(x)</a></td>
<td style="text-align:left">将x转换到一个浮点数</td>
</tr>
<tr>
<td style="text-align:left">[complex(real <a href="https://www.runoob.com/python3/python-func-complex.html">,imag])</a></td>
<td style="text-align:left">创建一个复数</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-str.html">str(x)</a></td>
<td style="text-align:left">将对象 x 转换为字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-repr.html">repr(x)</a></td>
<td style="text-align:left">将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-eval.html">eval(str)</a></td>
<td style="text-align:left">用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple(s)</a></td>
<td style="text-align:left">将序列 s 转换为一个元组</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(s)</a></td>
<td style="text-align:left">将序列 s 转换为一个列表</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-set.html">set(s)</a></td>
<td style="text-align:left">转换为可变集合</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-dict.html">dict(d)</a></td>
<td style="text-align:left">创建一个字典。d 必须是一个 (key, value)元组序列。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-frozenset.html">frozenset(s)</a></td>
<td style="text-align:left">转换为不可变集合</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-chr.html">chr(x)</a></td>
<td style="text-align:left">将一个整数转换为一个字符</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-ord.html">ord(x)</a></td>
<td style="text-align:left">将一个字符转换为它的整数值</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-hex.html">hex(x)</a></td>
<td style="text-align:left">将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python-func-oct.html">oct(x)</a></td>
<td style="text-align:left">将一个整数转换为一个八进制字符串</td>
</tr>
</tbody>
</table>
<h2 id="python3-解释器"><a class="markdownIt-Anchor" href="#python3-解释器"></a> Python3 解释器</h2>
<p>Linux/Unix的系统上，一般默认的 python 版本为 2.x，我们可以将 python3.x 安装在 <strong>/usr/local/python3</strong> 目录中。</p>
<p>安装完成后，我们可以将路径 <strong>/usr/local/python3/bin</strong> 添加到您的 Linux/Unix 操作系统的环境变量中，这样您就可以通过 shell 终端输入下面的命令来启动 Python3 。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">PATH=<span class="hljs-variable">$PATH</span>:/usr/local/python3/bin/python3    <span class="hljs-comment"># 设置环境变量</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3 --version</span><br>Python 3.4.0<br></code></pre></td></tr></tbody></table></figure>
<p>在Window系统下你可以通过以下命令来设置Python的环境变量，假设你的Python安装在 C:\Python34 下:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> path=%path%;C:\python34<br></code></pre></td></tr></tbody></table></figure>
<h3 id="交互式编程"><a class="markdownIt-Anchor" href="#交互式编程"></a> 交互式编程</h3>
<p>我们可以在命令提示符中输入"Python"命令来启动Python解释器：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><code class="hljs bash">$ python3<br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">python3</span><br>Python 3.4.0 (default, Apr 11 2014, 13:05:11) <br>[GCC 4.8.2] on linux<br>Type "help", "copyright", "credits" or "license" for more information.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span> <br></code></pre></td></tr></tbody></table></figure>
<p>在 python 提示符中输入以下语句，然后按回车键查看运行效果：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (<span class="hljs-string">"Hello, Python!"</span>);<br></code></pre></td></tr></tbody></table></figure>
<p>以上命令执行结果如下：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">Hello, Python!<br></code></pre></td></tr></tbody></table></figure>
<p>当键入一个多行结构时，续行是必须的。我们可以看下如下 if 语句：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; flag = True</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="hljs-keyword">if</span> flag :</span><br>...     print("flag 条件为 True!")<br>... <br>flag 条件为 True!<br></code></pre></td></tr></tbody></table></figure>
<h3 id="脚本式编程"><a class="markdownIt-Anchor" href="#脚本式编程"></a> 脚本式编程</h3>
<p>将如下代码拷贝至 <strong><a href="http://hello.py">hello.py</a></strong>文件中：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (<span class="hljs-string">"Hello, Python!"</span>);<br></code></pre></td></tr></tbody></table></figure>
<p>通过以下命令执行该脚本：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">python3 hello.py<br></code></pre></td></tr></tbody></table></figure>
<p>输出结果为：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">Hello, Python!<br></code></pre></td></tr></tbody></table></figure>
<p>在Linux/Unix系统中，你可以在脚本顶部添加以下命令让Python脚本可以像SHELL脚本一样可直接执行：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/env python3</span><br></code></pre></td></tr></tbody></table></figure>
<p>然后修改脚本权限，使其有执行权限，命令如下：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x hello.py</span><br></code></pre></td></tr></tbody></table></figure>
<p>执行以下命令：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">./hello.py<br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3-注释"><a class="markdownIt-Anchor" href="#python3-注释"></a> Python3 注释</h2>
<p>在 Python3 中，注释不会影响程序的执行，但是会使代码更易于阅读和理解。</p>
<p>Python 中的注释有<strong>单行注释</strong>和<strong>多行注释</strong>。</p>
<p><strong>Python 中单行注释以 *<em>#*</em> 开头</strong>，例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这是一个注释</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello, World!"</span>)<br></code></pre></td></tr></tbody></table></figure>
<p><strong>#</strong> 符号后面的所有文本都被视为注释，不会被解释器执行。</p>
<h3 id="多行注释"><a class="markdownIt-Anchor" href="#多行注释"></a> 多行注释</h3>
<p>在 Python中，多行字符串（由三个单引号 <strong>‘’’</strong> 或三个双引号 <strong>“”"</strong> 包围的文本块）在某些情况下可以被视为一种实现多行注释的技巧。</p>
<p>**多行注释用三个单引号 **<code>'''</code><strong>或者三个双引号</strong> <code>"""</code><strong>将注释括起来</strong>，例如:</p>
<p>1、单引号（‘’'）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 </span><br><span class="hljs-string">'''</span><br><span class="hljs-string">这是多行注释，用三个单引号</span><br><span class="hljs-string">这是多行注释，用三个单引号 </span><br><span class="hljs-string">这是多行注释，用三个单引号</span><br><span class="hljs-string">'''</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello, World!"</span>)<br></code></pre></td></tr></tbody></table></figure>
<p>2、双引号（“”"）</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3 </span><br><span class="hljs-string">"""</span><br><span class="hljs-string">这是多行注释（字符串），用三个双引号</span><br><span class="hljs-string">这是多行注释（字符串），用三个双引号 </span><br><span class="hljs-string">这是多行注释（字符串），用三个双引号</span><br><span class="hljs-string">"""</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello, World!"</span>)<br></code></pre></td></tr></tbody></table></figure>
<p><strong>注意</strong>：虽然多行字符串在这里被当作多行注释使用，但它实际上是一个字符串，我们只要不使用它，它不会影响程序的运行。</p>
<p>这些字符串在代码中可以被放置在一些位置，而不引起实际的执行，从而达到注释的效果。</p>
<h3 id="拓展说明"><a class="markdownIt-Anchor" href="#拓展说明"></a> 拓展说明</h3>
<p>在 Python 中，多行注释是由三个单引号 <strong>‘’’</strong> 或三个双引号 <strong>“”"</strong> 来定义的，而且这种注释方式并不能嵌套使用。</p>
<p>当你开始一个多行注释块时，Python 会一直将后续的行都当作注释，直到遇到另一组三个单引号或三个双引号。</p>
<p><strong>嵌套多行注释会导致语法错误。</strong></p>
<p>例如，下面的示例是不合法的：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">'''</span><br><span class="hljs-string">这是外部的多行注释</span><br><span class="hljs-string">可以包含一些描述性的内容</span><br><span class="hljs-string"></span><br><span class="hljs-string">    '''</span><br>    这是尝试嵌套的多行注释<br>    会导致语法错误<br>    <span class="hljs-string">'''</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>在这个例子中，内部的三个单引号并没有被正确识别为多行注释的结束，而是被解释为普通的字符串。</p>
<p>这将导致代码结构不正确，最终可能导致语法错误。</p>
<p>如果你需要在注释中包含嵌套结构，推荐使用单行注释（以#开头）而不是多行注释。</p>
<p>单行注释可以嵌套在多行注释中，而且不会引起语法错误。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">'''</span><br><span class="hljs-string">这是外部的多行注释</span><br><span class="hljs-string">可以包含一些描述性的内容</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 这是内部的单行注释</span><br><span class="hljs-string"># 可以嵌套在多行注释中</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>这样的结构是合法的，并且通常能够满足文档化和注释的需求。</p>
<h2 id="python3-运算符"><a class="markdownIt-Anchor" href="#python3-运算符"></a> Python3 运算符</h2>
<hr>
<h3 id="什么是运算符"><a class="markdownIt-Anchor" href="#什么是运算符"></a> 什么是运算符？</h3>
<p>举个简单的例子:4 + 5 = 9</p>
<p>例子中，<strong>4</strong> 和 <strong>5</strong> 被称为<strong>操作数</strong>，<strong>+</strong> 称为<strong>运算符</strong>。</p>
<p>Python 语言支持以下类型的运算符:</p>
<ul>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf1">算术运算符</a></li>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf2">比较（关系）运算符</a></li>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf3">赋值运算符</a></li>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf4">逻辑运算符</a></li>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf5">位运算符</a></li>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf6">成员运算符</a></li>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf7">身份运算符</a></li>
<li><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf8">运算符优先级</a></li>
</ul>
<p>接下来让我们一个个来学习Python的运算符。</p>
<h3 id="python算术运算符"><a class="markdownIt-Anchor" href="#python算术运算符"></a> Python算术运算符</h3>
<p>以下假设变量 <strong>a=10</strong>，变量 <strong>b=21</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">加 - 两个对象相加</td>
<td style="text-align:left">a + b 输出结果 31</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">减 - 得到负数或是一个数减去另一个数</td>
<td style="text-align:left">a - b 输出结果 -11</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td style="text-align:left">a * b 输出结果 210</td>
</tr>
<tr>
<td style="text-align:left">/</td>
<td style="text-align:left">除 - x 除以 y</td>
<td style="text-align:left">b / a 输出结果 2.1</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">取模 - 返回除法的余数</td>
<td style="text-align:left">b % a 输出结果 1</td>
</tr>
<tr>
<td style="text-align:left">**</td>
<td style="text-align:left">幂 - 返回x的y次幂</td>
<td style="text-align:left">a**b 为10的21次方</td>
</tr>
<tr>
<td style="text-align:left">//</td>
<td style="text-align:left">取整除 - 往小的方向取整数</td>
<td style="text-align:left"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td>
</tr>
</tbody>
</table>
<p>以下实例演示了Python所有算术运算符的操作：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>a = <span class="hljs-number">21</span><br>b = <span class="hljs-number">10</span><br>c = <span class="hljs-number">0</span><br> <br>c = a + b<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - c 的值为："</span>, c)<br> <br>c = a - b<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - c 的值为："</span>, c)<br> <br>c = a * b<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - c 的值为："</span>, c)<br> <br>c = a / b<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - c 的值为："</span>, c)<br> <br>c = a % b<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"5 - c 的值为："</span>, c)<br> <br><span class="hljs-comment"># 修改变量 a 、b 、c</span><br>a = <span class="hljs-number">2</span><br>b = <span class="hljs-number">3</span><br>c = a**b <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"6 - c 的值为："</span>, c)<br> <br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">5</span><br>c = a//b <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"7 - c 的值为："</span>, c)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">1 - c 的值为： 31</span><br><span class="hljs-string">2 - c 的值为： 11</span><br><span class="hljs-string">3 - c 的值为： 210</span><br><span class="hljs-string">4 - c 的值为： 2.1</span><br><span class="hljs-string">5 - c 的值为： 1</span><br><span class="hljs-string">6 - c 的值为： 8</span><br><span class="hljs-string">7 - c 的值为： 2</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="python-比较运算符"><a class="markdownIt-Anchor" href="#python-比较运算符"></a> Python 比较运算符</h3>
<p>以下假设变量 a 为 10，变量 b 为20：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">==</td>
<td style="text-align:left">等于 - 比较对象是否相等</td>
<td style="text-align:left">(a == b) 返回 False。</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">不等于 - 比较两个对象是否不相等</td>
<td style="text-align:left">(a != b) 返回 True。</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">大于 - 返回x是否大于y</td>
<td style="text-align:left">(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>
<td style="text-align:left">(a &lt; b) 返回 True。</td>
</tr>
<tr>
<td style="text-align:left">&gt;=</td>
<td style="text-align:left">大于等于 - 返回x是否大于等于y。</td>
<td style="text-align:left">(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td style="text-align:left">&lt;=</td>
<td style="text-align:left">小于等于 - 返回x是否小于等于y。</td>
<td style="text-align:left">(a &lt;= b) 返回 True。</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>a = <span class="hljs-number">21</span><br>b = <span class="hljs-number">10</span><br>c = <span class="hljs-number">0</span><br> <br><span class="hljs-keyword">if</span> ( a == b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - a 等于 b"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - a 不等于 b"</span>)<br> <br><span class="hljs-keyword">if</span> ( a != b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - a 不等于 b"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - a 等于 b"</span>)<br> <br><span class="hljs-keyword">if</span> ( a &lt; b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - a 小于 b"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - a 大于等于 b"</span>)<br> <br><span class="hljs-keyword">if</span> ( a &gt; b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - a 大于 b"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - a 小于等于 b"</span>)<br> <br><span class="hljs-comment"># 修改变量 a 和 b 的值</span><br>a = <span class="hljs-number">5</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> ( a &lt;= b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"5 - a 小于等于 b"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"5 - a 大于  b"</span>)<br> <br><span class="hljs-keyword">if</span> ( b &gt;= a ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"6 - b 大于等于 a"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"6 - b 小于 a"</span>)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">1 - a 不等于 b</span><br><span class="hljs-string">2 - a 不等于 b</span><br><span class="hljs-string">3 - a 大于等于 b</span><br><span class="hljs-string">4 - a 大于 b</span><br><span class="hljs-string">5 - a 小于等于 b</span><br><span class="hljs-string">6 - b 大于等于 a</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="python赋值运算符"><a class="markdownIt-Anchor" href="#python赋值运算符"></a> Python赋值运算符</h3>
<p>以下假设变量a为10，变量b为20：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">简单的赋值运算符</td>
<td style="text-align:left">c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td style="text-align:left">+=</td>
<td style="text-align:left">加法赋值运算符</td>
<td style="text-align:left">c += a 等效于 c = c + a</td>
</tr>
<tr>
<td style="text-align:left">-=</td>
<td style="text-align:left">减法赋值运算符</td>
<td style="text-align:left">c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td style="text-align:left">*=</td>
<td style="text-align:left">乘法赋值运算符</td>
<td style="text-align:left">c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td style="text-align:left">/=</td>
<td style="text-align:left">除法赋值运算符</td>
<td style="text-align:left">c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td style="text-align:left">%=</td>
<td style="text-align:left">取模赋值运算符</td>
<td style="text-align:left">c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td style="text-align:left">**=</td>
<td style="text-align:left">幂赋值运算符</td>
<td style="text-align:left">c **= a 等效于 c = c ** a</td>
</tr>
<tr>
<td style="text-align:left">//=</td>
<td style="text-align:left">取整除赋值运算符</td>
<td style="text-align:left">c //= a 等效于 c = c // a</td>
</tr>
<tr>
<td style="text-align:left">:=</td>
<td style="text-align:left">海象运算符，这个运算符的主要目的是在表达式中同时进行赋值和返回赋值的值。<strong>Python3.8 版本新增运算符</strong>。</td>
<td style="text-align:left">在这个示例中，赋值表达式可以避免调用 len() 两次:<code>if (n := len(a)) &gt; 10:    print(f"List is too long ({n} elements, expected &lt;= 10)")</code></td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>a = <span class="hljs-number">21</span><br>b = <span class="hljs-number">10</span><br>c = <span class="hljs-number">0</span><br> <br>c = a + b<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - c 的值为："</span>, c)<br> <br>c += a<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - c 的值为："</span>, c)<br> <br>c *= a<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - c 的值为："</span>, c)<br> <br>c /= a <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - c 的值为："</span>, c)<br> <br>c = <span class="hljs-number">2</span><br>c %= a<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"5 - c 的值为："</span>, c)<br> <br>c **= a<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"6 - c 的值为："</span>, c)<br> <br>c //= a<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"7 - c 的值为："</span>, c)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">1 - c 的值为： 31</span><br><span class="hljs-string">2 - c 的值为： 52</span><br><span class="hljs-string">3 - c 的值为： 1092</span><br><span class="hljs-string">4 - c 的值为： 52.0</span><br><span class="hljs-string">5 - c 的值为： 2</span><br><span class="hljs-string">6 - c 的值为： 2097152</span><br><span class="hljs-string">7 - c 的值为： 99864</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>在 Python 3.8 及更高版本中，引入了一种新的语法特性，称为"海象运算符"（Walrus Operator），它使用 <strong>:=</strong> 符号。这个运算符的主要目的是在表达式中同时进行赋值和返回赋值的值。</p>
<p>使用海象运算符可以在一些情况下简化代码，尤其是在需要在表达式中使用赋值结果的情况下。这对于简化循环条件或表达式中的重复计算很有用。</p>
<p>下面是一个简单的实例，演示了海象运算符的使用：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 传统写法</span><br>n = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(n)<br><br><span class="hljs-comment"># 使用海象运算符</span><br><span class="hljs-keyword">if</span> (n := <span class="hljs-number">10</span>) &gt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></tbody></table></figure>
<ol>
<li>
<p>if (n := 10) &gt; 5  : ：这是使用海象运算符（:=）的写法。海象运算符在表达式中进行赋值操作。</p>
<ul>
<li><code>(n := 10)</code>：将变量 <code>n</code> 赋值为 10，同时返回这个赋值结果。</li>
<li><code>&gt; 5</code>：检查赋值后的 <code>n</code> 是否大于 5。如果条件为真，则执行接下来的代码块。</li>
</ul>
</li>
<li>
<p><code>print(n)</code>：如果条件为真，打印变量 <code>n</code> 的值（即 10）。</p>
</li>
</ol>
<p><strong>海象运算符的优点：</strong></p>
<ul>
<li>海象运算符（<code>:=</code>）允许在表达式内部进行赋值，这可以减少代码的重复，提高代码的可读性和简洁性。</li>
<li>在上述例子中，传统写法需要单独一行来赋值 <code>n</code>，然后在 <code>if</code> 语句中进行条件检查。而使用海象运算符的写法可以在 <code>if</code> 语句中直接进行赋值和条件检查。</li>
</ul>
<h3 id="python位运算符"><a class="markdownIt-Anchor" href="#python位运算符"></a> Python位运算符</h3>
<p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p>
<p>下表中变量 a 为 60，b 为 13二进制格式如下：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell">a = 0011 1100<br><br>b = 0000 1101<br><br>-----------------<br><br>a&amp;b = 0000 1100<br><br>a|b = 0011 1101<br><br>a^b = 0011 0001<br><br>~a  = 1100 0011<br></code></pre></td></tr></tbody></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
<td style="text-align:left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td style="text-align:left">|</td>
<td style="text-align:left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td style="text-align:left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td style="text-align:left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td style="text-align:left">~</td>
<td style="text-align:left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<strong>~x</strong> 类似于 <strong>-x-1</strong></td>
<td style="text-align:left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td style="text-align:left">&lt;&lt;</td>
<td style="text-align:left">左移动运算符：运算数的各二进位全部左移若干位，由"&lt;&lt;"右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td style="text-align:left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td style="text-align:left">&gt;&gt;</td>
<td style="text-align:left">右移动运算符：把"&gt;&gt;“左边的运算数的各二进位全部右移若干位，”&gt;&gt;"右边的数指定移动的位数</td>
<td style="text-align:left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>a = <span class="hljs-number">60</span>            <span class="hljs-comment"># 60 = 0011 1100 </span><br>b = <span class="hljs-number">13</span>            <span class="hljs-comment"># 13 = 0000 1101 </span><br>c = <span class="hljs-number">0</span><br> <br>c = a &amp; b        <span class="hljs-comment"># 12 = 0000 1100</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - c 的值为："</span>, c)<br> <br>c = a | b        <span class="hljs-comment"># 61 = 0011 1101 </span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - c 的值为："</span>, c)<br> <br>c = a ^ b        <span class="hljs-comment"># 49 = 0011 0001</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - c 的值为："</span>, c)<br> <br>c = ~a           <span class="hljs-comment"># -61 = 1100 0011</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - c 的值为："</span>, c)<br> <br>c = a &lt;&lt; <span class="hljs-number">2</span>       <span class="hljs-comment"># 240 = 1111 0000</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"5 - c 的值为："</span>, c)<br> <br>c = a &gt;&gt; <span class="hljs-number">2</span>       <span class="hljs-comment"># 15 = 0000 1111</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"6 - c 的值为："</span>, c)<br><span class="hljs-string">"""</span><br><span class="hljs-string">1 - c 的值为： 12</span><br><span class="hljs-string">2 - c 的值为： 61</span><br><span class="hljs-string">3 - c 的值为： 49</span><br><span class="hljs-string">4 - c 的值为： -61</span><br><span class="hljs-string">5 - c 的值为： 240</span><br><span class="hljs-string">6 - c 的值为： 15</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="python逻辑运算符"><a class="markdownIt-Anchor" href="#python逻辑运算符"></a> Python逻辑运算符</h3>
<p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">逻辑表达式</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">and</td>
<td style="text-align:left">x and y</td>
<td style="text-align:left">布尔"与" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>
<td style="text-align:left">(a and b) 返回 20。</td>
</tr>
<tr>
<td style="text-align:left">or</td>
<td style="text-align:left">x or y</td>
<td style="text-align:left">布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td>
<td style="text-align:left">(a or b) 返回 10。</td>
</tr>
<tr>
<td style="text-align:left">not</td>
<td style="text-align:left">not x</td>
<td style="text-align:left">布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td style="text-align:left">not(a and b) 返回 False</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br> <br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">and</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - 变量 a 和 b 都为 true"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - 变量 a 和 b 有一个不为 true"</span>)<br> <br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">or</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - 变量 a 和 b 都为 true，或其中一个变量为 true"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - 变量 a 和 b 都不为 true"</span>)<br> <br><span class="hljs-comment"># 修改变量 a 的值</span><br>a = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">and</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - 变量 a 和 b 都为 true"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - 变量 a 和 b 有一个不为 true"</span>)<br> <br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">or</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - 变量 a 和 b 都为 true，或其中一个变量为 true"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - 变量 a 和 b 都不为 true"</span>)<br> <br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span>( a <span class="hljs-keyword">and</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"5 - 变量 a 和 b 都为 false，或其中一个变量为 false"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"5 - 变量 a 和 b 都为 true"</span>)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">1 - 变量 a 和 b 都为 true</span><br><span class="hljs-string">2 - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="hljs-string">3 - 变量 a 和 b 有一个不为 true</span><br><span class="hljs-string">4 - 变量 a 和 b 都为 true，或其中一个变量为 true</span><br><span class="hljs-string">5 - 变量 a 和 b 都为 false，或其中一个变量为 false</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="python成员运算符"><a class="markdownIt-Anchor" href="#python成员运算符"></a> Python成员运算符</h3>
<p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td style="text-align:left">not in</td>
<td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br> <br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - 变量 a 在给定的列表中 list 中"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - 变量 a 不在给定的列表中 list 中"</span>)<br> <br><span class="hljs-keyword">if</span> ( b <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - 变量 b 不在给定的列表中 list 中"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - 变量 b 在给定的列表中 list 中"</span>)<br> <br><span class="hljs-comment"># 修改变量 a 的值</span><br>a = <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - 变量 a 在给定的列表中 list 中"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - 变量 a 不在给定的列表中 list 中"</span>)<br><span class="hljs-string">"""</span><br><span class="hljs-string">1 - 变量 a 不在给定的列表中 list 中</span><br><span class="hljs-string">2 - 变量 b 不在给定的列表中 list 中</span><br><span class="hljs-string">3 - 变量 a 在给定的列表中 list 中</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="python身份运算符"><a class="markdownIt-Anchor" href="#python身份运算符"></a> Python身份运算符</h3>
<p>身份运算符用于比较两个对象的存储单元</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">is</td>
<td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td>
<td style="text-align:left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">is not</td>
<td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td>
<td style="text-align:left"><strong>x is not y</strong> ， 类似 <strong>id(x) != id(y)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>
</tr>
</tbody>
</table>
<p><strong>注：</strong> <a href="https://www.runoob.com/python/python-func-id.html">id()</a> 函数用于获取对象内存地址。</p>
<p>以下实例演示了Python所有身份运算符的操作：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>a = <span class="hljs-number">20</span><br>b = <span class="hljs-number">20</span><br> <br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">is</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - a 和 b 有相同的标识"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"1 - a 和 b 没有相同的标识"</span>)<br> <br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">id</span>(a) == <span class="hljs-built_in">id</span>(b) ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - a 和 b 有相同的标识"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"2 - a 和 b 没有相同的标识"</span>)<br> <br><span class="hljs-comment"># 修改变量 b 的值</span><br>b = <span class="hljs-number">30</span><br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">is</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - a 和 b 有相同的标识"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"3 - a 和 b 没有相同的标识"</span>)<br> <br><span class="hljs-keyword">if</span> ( a <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> b ):<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - a 和 b 没有相同的标识"</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"4 - a 和 b 有相同的标识"</span>)<br><span class="hljs-string">"""</span><br><span class="hljs-string">1 - a 和 b 有相同的标识</span><br><span class="hljs-string">2 - a 和 b 有相同的标识</span><br><span class="hljs-string">3 - a 和 b 没有相同的标识</span><br><span class="hljs-string">4 - a 和 b 没有相同的标识</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>is 与 == 区别：</p>
<p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;a = [1, 2, 3]</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b = a</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b is a</span> <br>True<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b == a</span><br>True<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b = a[:]</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b is a</span><br>False<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b == a</span><br>True<br></code></pre></td></tr></tbody></table></figure>
<h3 id="python运算符优先级"><a class="markdownIt-Anchor" href="#python运算符优先级"></a> Python运算符优先级</h3>
<p>以下表格列出了从最高到最低优先级的所有运算符， 相同单元格内的运算符具有相同优先级。 运算符均指二元运算，除非特别指出。 相同单元格内的运算符从左至右分组（除了幂运算是从右至左分组）：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>(expressions...)</code>,<code>[expressions...]</code>, <code>{key: value...}</code>, <code>{expressions...}</code></td>
<td style="text-align:left">圆括号的表达式</td>
</tr>
<tr>
<td style="text-align:left"><code>x[index]</code>, <code>x[index:index]</code>, <code>x(arguments...)</code>, <code>x.attribute</code></td>
<td style="text-align:left">读取，切片，调用，属性引用</td>
</tr>
<tr>
<td style="text-align:left">await x</td>
<td style="text-align:left">await 表达式</td>
</tr>
<tr>
<td style="text-align:left"><code>**</code></td>
<td style="text-align:left">乘方(指数)</td>
</tr>
<tr>
<td style="text-align:left"><code>+x</code>, <code>-x</code>, <code>~x</code></td>
<td style="text-align:left">正，负，按位非 NOT</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code>, <code>@</code>, <code>/</code>, <code>//</code>, <code>%</code></td>
<td style="text-align:left">乘，矩阵乘，除，整除，取余</td>
</tr>
<tr>
<td style="text-align:left"><code>+</code>, <code>-</code></td>
<td style="text-align:left">加和减</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>
<td style="text-align:left">移位</td>
</tr>
<tr>
<td style="text-align:left"><code>&amp;</code></td>
<td style="text-align:left">按位与 AND</td>
</tr>
<tr>
<td style="text-align:left"><code>^</code></td>
<td style="text-align:left">按位异或 XOR</td>
</tr>
<tr>
<td style="text-align:left">`</td>
<td style="text-align:left">`</td>
</tr>
<tr>
<td style="text-align:left"><code>in,not in, is,is not, &lt;, &lt;=, &gt;, &gt;=, !=, ==</code></td>
<td style="text-align:left">比较运算，包括成员检测和标识号检测</td>
</tr>
<tr>
<td style="text-align:left"><code>not x</code></td>
<td style="text-align:left">逻辑非 NOT</td>
</tr>
<tr>
<td style="text-align:left"><code>and</code></td>
<td style="text-align:left">逻辑与 AND</td>
</tr>
<tr>
<td style="text-align:left"><code>or</code></td>
<td style="text-align:left">逻辑或 OR</td>
</tr>
<tr>
<td style="text-align:left"><code>if -- else</code></td>
<td style="text-align:left">条件表达式</td>
</tr>
<tr>
<td style="text-align:left"><code>lambda</code></td>
<td style="text-align:left">lambda 表达式</td>
</tr>
<tr>
<td style="text-align:left"><code>:=</code></td>
<td style="text-align:left">赋值表达式</td>
</tr>
</tbody>
</table>
<h2 id="python3-条件控制"><a class="markdownIt-Anchor" href="#python3-条件控制"></a> Python3 条件控制</h2>
<p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。</p>
<p>可以通过下图来简单了解条件语句的执行过程:</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg" alt="1"></p>
<h3 id="if-语句"><a class="markdownIt-Anchor" href="#if-语句"></a> if 语句</h3>
<p>Python中if语句的一般形式如下所示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> condition_1:<br>    statement_block_1<br><span class="hljs-keyword">elif</span> condition_2:<br>    statement_block_2<br><span class="hljs-keyword">else</span>:<br>    statement_block_3<br></code></pre></td></tr></tbody></table></figure>
<p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p>
<p><strong>注意：</strong></p>
<ul>
<li>1、每个条件后面要使用冒号 <strong>:</strong>，表示接下来是满足条件后要执行的语句块。</li>
<li>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li>
<li>3、在 Python 中没有 <strong>switch…case</strong> 语句，但在 Python3.10 版本添加了 <strong>match…case</strong>，功能也类似，</li>
</ul>
<p>以下为if中常用的操作运算符:</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">小于</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">小于或等于</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">大于</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">大于或等于</td>
</tr>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">等于，比较两个值是否相等</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">不等于</td>
</tr>
</tbody>
</table>
<h3 id="if-嵌套"><a class="markdownIt-Anchor" href="#if-嵌套"></a> if 嵌套</h3>
<p>在嵌套 if 语句中，可以把 if…elif…else 结构放在另外一个 if…elif…else 结构中。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 表达式<span class="hljs-number">1</span>:<br>    语句<br>    <span class="hljs-keyword">if</span> 表达式<span class="hljs-number">2</span>:<br>        语句<br>    <span class="hljs-keyword">elif</span> 表达式<span class="hljs-number">3</span>:<br>        语句<br>    <span class="hljs-keyword">else</span>:<br>        语句<br><span class="hljs-keyword">elif</span> 表达式<span class="hljs-number">4</span>:<br>    语句<br><span class="hljs-keyword">else</span>:<br>    语句<br><br></code></pre></td></tr></tbody></table></figure>
<h3 id="matchcase"><a class="markdownIt-Anchor" href="#matchcase"></a> match…case</h3>
<p>Python 3.10 增加了 <strong>match…case</strong> 的条件判断，不需要再使用一连串的 <strong>if-else</strong> 来判断了。</p>
<p>match 后的对象会依次与 case 后的内容进行匹配，如果匹配成功，则执行匹配到的表达式，否则直接跳过，<strong>_</strong> 可以匹配一切。</p>
<p>语法格式如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">match</span> subject:<br>    <span class="hljs-keyword">case</span> &lt;pattern_1&gt;:<br>        &lt;action_1&gt;<br>    <span class="hljs-keyword">case</span> &lt;pattern_2&gt;:<br>        &lt;action_2&gt;<br>    <span class="hljs-keyword">case</span> &lt;pattern_3&gt;:<br>        &lt;action_3&gt;<br>    <span class="hljs-keyword">case</span> _:<br>        &lt;action_wildcard&gt;<br></code></pre></td></tr></tbody></table></figure>
<p><strong>case _:</strong> 类似于 C 和 Java 中的 <strong>default:</strong>，当其他 case 都无法匹配时，匹配这条，保证永远会匹配成功。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">http_error</span>(<span class="hljs-params">status</span>):<br>    <span class="hljs-keyword">match</span> status:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"Bad request"</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"Not found"</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">418</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"I'm a teapot"</span><br>        <span class="hljs-keyword">case</span> _:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"Something's wrong with the internet"</span><br><br>mystatus=<span class="hljs-number">400</span><br><span class="hljs-built_in">print</span>(http_error(<span class="hljs-number">400</span>))<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">Bad request</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>一个 case 也可以设置多个匹配条件，条件使用 <strong>｜</strong> 隔开，例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">...<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>|<span class="hljs-number">403</span>|<span class="hljs-number">404</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Not allowed"</span><br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3-循环语句"><a class="markdownIt-Anchor" href="#python3-循环语句"></a> Python3 循环语句</h2>
<p>本章节将为大家介绍 Python 循环语句的使用。</p>
<p>Python 中的循环语句有 for 和 while。</p>
<p>Python 循环语句的控制结构图如下所示：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/12/loop.png" alt=""></p>
<h3 id="while-循环"><a class="markdownIt-Anchor" href="#while-循环"></a> while 循环</h3>
<p>Python 中 while 语句的一般形式：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 判断条件(condition)：<br>    执行语句(statements)……<br><br></code></pre></td></tr></tbody></table></figure>
<p>同样需要注意冒号和缩进。另外，在 Python 中没有 do…while 循环。</p>
<p>以下实例使用了 while 来计算 1 到 100 的总和：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br> <br>n = <span class="hljs-number">100</span><br> <br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>counter = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> counter &lt;= n:<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + counter<br>    counter += <span class="hljs-number">1</span><br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">"1 到 %d 之和为: %d"</span> % (n,<span class="hljs-built_in">sum</span>))<br><span class="hljs-string">"""</span><br><span class="hljs-string">1 到 100 之和为: 5050</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="无限循环"><a class="markdownIt-Anchor" href="#无限循环"></a> 无限循环</h3>
<p>我们可以通过设置条件表达式永远不为 false 来实现无限循环，实例如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>var = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> var == <span class="hljs-number">1</span> :  <span class="hljs-comment"># 表达式永远为 true</span><br>   num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"输入一个数字  :"</span>))<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"你输入的数字是: "</span>, num)<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"Good bye!"</span>)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">输入一个数字  :5</span><br><span class="hljs-string">你输入的数字是:  5</span><br><span class="hljs-string">输入一个数字  :</span><br><span class="hljs-string">.....</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>你可以使用 <strong>CTRL+C</strong> 来退出当前的无限循环。</p>
<p>无限循环在服务器上客户端的实时请求非常有用。</p>
<h3 id="while-循环使用-else-语句"><a class="markdownIt-Anchor" href="#while-循环使用-else-语句"></a> while 循环使用 else 语句</h3>
<p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</p>
<p>语法格式如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> &lt;expr&gt;:<br>    &lt;statement(s)&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;additional_statement(s)&gt;<br></code></pre></td></tr></tbody></table></figure>
<p>expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。</p>
<p>循环输出数字，并判断大小：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-number">5</span>:<br>   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">" 小于 5"</span>)<br>   count = count + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (count, <span class="hljs-string">" 大于或等于 5"</span>)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="简单语句组"><a class="markdownIt-Anchor" href="#简单语句组"></a> 简单语句组</h3>
<p>类似 if 语句的语法，如果你的 while 循环体中只有一条语句，你可以将该语句与 while 写在同一行中， 如下所示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br> <br>flag = <span class="hljs-number">1</span><br> <br><span class="hljs-keyword">while</span> (flag): <span class="hljs-built_in">print</span> (<span class="hljs-string">'欢迎访问菜鸟教程!'</span>)<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">"Good bye!"</span>)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="for-语句"><a class="markdownIt-Anchor" href="#for-语句"></a> for 语句</h3>
<p>Python for 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。</p>
<p>for循环的一般格式如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> &lt;variable&gt; <span class="hljs-keyword">in</span> &lt;sequence&gt;:<br>    &lt;statements&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;statements&gt;<br></code></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>sites = [<span class="hljs-string">"Baidu"</span>, <span class="hljs-string">"Google"</span>,<span class="hljs-string">"Runoob"</span>,<span class="hljs-string">"Taobao"</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-built_in">print</span>(site)<br>    <br><span class="hljs-string">"""</span><br><span class="hljs-string">Baidu</span><br><span class="hljs-string">Google</span><br><span class="hljs-string">Runoob</span><br><span class="hljs-string">Taobao</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>也可用于打印字符串中的每个字符：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>word = <span class="hljs-string">'runoob'</span><br> <br><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> word:<br>    <span class="hljs-built_in">print</span>(letter)<br>    <br><span class="hljs-string">"""</span><br><span class="hljs-string">r</span><br><span class="hljs-string">u</span><br><span class="hljs-string">n</span><br><span class="hljs-string">o</span><br><span class="hljs-string">o</span><br><span class="hljs-string">b</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>整数范围值可以配合 range() 函数使用：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment">#  1 到 5 的所有数字：</span><br><span class="hljs-keyword">for</span> number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(number)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="forelse"><a class="markdownIt-Anchor" href="#forelse"></a> for…else</h3>
<p>在 Python 中，for…else 语句用于在循环结束后执行一段代码。</p>
<p>语法格式如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> iterable:<br>    <span class="hljs-comment"># 循环主体</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 循环结束后执行的代码</span><br></code></pre></td></tr></tbody></table></figure>
<p>当循环执行完毕（即遍历完 iterable 中的所有元素）后，会执行 else 子句中的代码，如果在循环过程中遇到了 break 语句，则会中断循环，此时不会执行 else 子句。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>  <span class="hljs-built_in">print</span>(x)<br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">"Finally finished!"</span>)<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">0</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">3</span><br><span class="hljs-string">4</span><br><span class="hljs-string">5</span><br><span class="hljs-string">Finally finished!</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>以下 for 实例中使用了 break 语句，break 语句用于跳出当前循环体，不会执行 else 子句：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br>sites = [<span class="hljs-string">"Baidu"</span>, <span class="hljs-string">"Google"</span>,<span class="hljs-string">"Runoob"</span>,<span class="hljs-string">"Taobao"</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">"Runoob"</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"菜鸟教程!"</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"循环数据 "</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"没有循环数据!"</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"完成循环!"</span>)<br><span class="hljs-string">"""</span><br><span class="hljs-string">循环数据 Baidu</span><br><span class="hljs-string">循环数据 Google</span><br><span class="hljs-string">菜鸟教程!</span><br><span class="hljs-string">完成循环!</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="range-函数"><a class="markdownIt-Anchor" href="#range-函数"></a> range() 函数</h3>
<p>如果你需要遍历数字序列，可以使用内置 range() 函数。它会生成数列，</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i)<br>...<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure>
<p>你也可以使用 range() 指定区间的值：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(5,9) :</span><br>    print(i)<br> <br>    <br>5<br>6<br>7<br>8<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span><br></code></pre></td></tr></tbody></table></figure>
<p>也可以使 range() 以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做’步长’):</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>) :<br>    <span class="hljs-built_in">print</span>(i)<br> <br>    <br><span class="hljs-number">0</span><br><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">9</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></tbody></table></figure>
<p>您可以结合 range() 和 len() 函数以遍历一个序列的索引,如下所示:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;a = [<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Baidu'</span>, <span class="hljs-string">'Runoob'</span>, <span class="hljs-string">'Taobao'</span>, <span class="hljs-string">'QQ'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i, a[i])<br><span class="hljs-meta">... </span><br><span class="hljs-number">0</span> Google<br><span class="hljs-number">1</span> Baidu<br><span class="hljs-number">2</span> Runoob<br><span class="hljs-number">3</span> Taobao<br><span class="hljs-number">4</span> QQ<br>&gt;&gt;&gt;<br></code></pre></td></tr></tbody></table></figure>
<p>还可以使用 range() 函数来创建一个列表：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br>[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>&gt;&gt;&gt;<br></code></pre></td></tr></tbody></table></figure>
<h3 id="break-和-continue-语句及循环中的-else-子句"><a class="markdownIt-Anchor" href="#break-和-continue-语句及循环中的-else-子句"></a> break 和 continue 语句及循环中的 else 子句</h3>
<p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p>
<p><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>
<p>循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。</p>
<p>如下实例用于查询质数的循环例子:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>        <span class="hljs-keyword">if</span> n % x == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(n, <span class="hljs-string">'等于'</span>, x, <span class="hljs-string">'*'</span>, n//x)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 循环中没有找到元素</span><br>        <span class="hljs-built_in">print</span>(n, <span class="hljs-string">' 是质数'</span>)<br><span class="hljs-string">"""</span><br><span class="hljs-string">2  是质数</span><br><span class="hljs-string">3  是质数</span><br><span class="hljs-string">4 等于 2 * 2</span><br><span class="hljs-string">5  是质数</span><br><span class="hljs-string">6 等于 2 * 3</span><br><span class="hljs-string">7  是质数</span><br><span class="hljs-string">8 等于 2 * 4</span><br><span class="hljs-string">9 等于 3 * 3</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="pass-语句"><a class="markdownIt-Anchor" href="#pass-语句"></a> pass 语句</h3>
<p>Python pass是空语句，是为了保持程序结构的完整性。</p>
<p>pass 不做任何事情，一般用做占位语句，如下实例</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 等待键盘中断 (Ctrl+C)</span><br></code></pre></td></tr></tbody></table></figure>
<p>最小的类:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEmptyClass</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></tbody></table></figure>
<h2 id="python-推导式"><a class="markdownIt-Anchor" href="#python-推导式"></a> Python 推导式</h2>
<p>Python 推导式是一种独特的数据处理方式，可以从一个数据序列构建另一个新的数据序列的结构体。</p>
<p>Python 推导式是一种强大且简洁的语法，适用于生成列表、字典、集合和生成器。</p>
<p>在使用推导式时，需要注意可读性，尽量保持表达式简洁，以免影响代码的可读性和可维护性。</p>
<p>Python 支持各种数据结构的推导式：</p>
<ul>
<li>列表(list)推导式</li>
<li>字典(dict)推导式</li>
<li>集合(set)推导式</li>
<li>元组(tuple)推导式</li>
</ul>
<h3 id="列表推导式"><a class="markdownIt-Anchor" href="#列表推导式"></a> 列表推导式</h3>
<p>列表推导式格式为：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表] <br>[out_exp_res <span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list]<br><br>或者 <br><br>[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表 <span class="hljs-keyword">if</span> 条件]<br>[out_exp_res <span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list <span class="hljs-keyword">if</span> condition]<br></code></pre></td></tr></tbody></table></figure>
<ul>
<li>out_exp_res：列表生成元素表达式，可以是有返回值的函数。</li>
<li>for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。</li>
<li>if condition：条件语句，可以过滤列表中不符合条件的值。</li>
</ul>
<p>过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>names = [<span class="hljs-string">'Bob'</span>,<span class="hljs-string">'Tom'</span>,<span class="hljs-string">'alice'</span>,<span class="hljs-string">'Jerry'</span>,<span class="hljs-string">'Wendy'</span>,<span class="hljs-string">'Smith'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>new_names = [name.upper()<span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name)&gt;<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(new_names)<br>[<span class="hljs-string">'ALICE'</span>, <span class="hljs-string">'JERRY'</span>, <span class="hljs-string">'WENDY'</span>, <span class="hljs-string">'SMITH'</span>]<br></code></pre></td></tr></tbody></table></figure>
<p>计算 30 以内可以被 3 整除的整数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>multiples = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(multiples)<br>[<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">27</span>]<br></code></pre></td></tr></tbody></table></figure>
<h3 id="字典推导式"><a class="markdownIt-Anchor" href="#字典推导式"></a> 字典推导式</h3>
<p>字典推导基本格式：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">{ key_expr: value_expr <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> collection }<br>或<br>{ key_expr: value_expr <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> collection <span class="hljs-keyword">if</span> condition }<br></code></pre></td></tr></tbody></table></figure>
<p>使用字符串及其长度创建字典：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">'Google'</span>,<span class="hljs-string">'Runoob'</span>, <span class="hljs-string">'Taobao'</span>]<br><span class="hljs-comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>newdict = {key:<span class="hljs-built_in">len</span>(key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> listdemo}<br><span class="hljs-meta">&gt;&gt;&gt; </span>newdict<br>{<span class="hljs-string">'Google'</span>: <span class="hljs-number">6</span>, <span class="hljs-string">'Runoob'</span>: <span class="hljs-number">6</span>, <span class="hljs-string">'Taobao'</span>: <span class="hljs-number">6</span>}<br></code></pre></td></tr></tbody></table></figure>
<p>提供三个数字，以三个数字为键，三个数字的平方为值来创建字典：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dic = {x: x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)}<br><span class="hljs-meta">&gt;&gt;&gt; </span>dic<br>{<span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">4</span>: <span class="hljs-number">16</span>, <span class="hljs-number">6</span>: <span class="hljs-number">36</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(dic)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'dict'</span>&gt;<br></code></pre></td></tr></tbody></table></figure>
<h3 id="集合推导式"><a class="markdownIt-Anchor" href="#集合推导式"></a> 集合推导式</h3>
<p>集合推导式基本格式：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">{ expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> }<br>或<br>{ expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">if</span> conditional }<br></code></pre></td></tr></tbody></table></figure>
<p>计算数字 1,2,3 的平方数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>setnew = {i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)}<br><span class="hljs-meta">&gt;&gt;&gt; </span>setnew<br>{<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>}<br></code></pre></td></tr></tbody></table></figure>
<p>判断不是 abc 的字母并输出：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = {x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">'abracadabra'</span> <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">'abc'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>{<span class="hljs-string">'d'</span>, <span class="hljs-string">'r'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">type</span>(a)<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">'set'</span>&gt;<br></code></pre></td></tr></tbody></table></figure>
<h3 id="元组推导式生成器表达式"><a class="markdownIt-Anchor" href="#元组推导式生成器表达式"></a> 元组推导式（生成器表达式）</h3>
<p>元组推导式可以利用 range 区间、元组、列表、字典和集合等数据类型，快速生成一个满足指定需求的元组。</p>
<p>元组推导式基本格式：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">(expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> )<br>或<br>(expression <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">if</span> conditional )<br></code></pre></td></tr></tbody></table></figure>
<p>元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 <strong>()</strong> 圆括号将各部分括起来，而列表推导式用的是中括号 <strong>[]</strong>，另外元组推导式返回的结果是一个生成器对象。</p>
<p>例如，我们可以使用下面的代码生成一个包含数字 1~9 的元组：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>&lt;generator <span class="hljs-built_in">object</span> &lt;genexpr&gt; at <span class="hljs-number">0x7faf6ee20a50</span>&gt;  <span class="hljs-comment"># 返回的是生成器对象</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">tuple</span>(a)       <span class="hljs-comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>)<br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3-迭代器与生成器"><a class="markdownIt-Anchor" href="#python3-迭代器与生成器"></a> Python3 迭代器与生成器</h2>
<hr>
<h3 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h3>
<p>迭代是 Python 最强大的功能之一，是访问<strong>集合</strong>元素的一种方式。</p>
<p>迭代器是一个可以记住遍历的位置的对象。</p>
<p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
<p>迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。</p>
<p>字符串，列表或元组对象都可用于创建迭代器：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))   <span class="hljs-comment"># 输出迭代器的下一个元素</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))<br><span class="hljs-number">2</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></tbody></table></figure>
<p>迭代器对象可以使用常规for语句进行遍历：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> it:<br>    <span class="hljs-built_in">print</span> (x, end=<span class="hljs-string">" "</span>)<br>    <br><span class="hljs-string">"""</span><br><span class="hljs-string">1 2 3 4</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>也可以使用 next() 函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> sys         <span class="hljs-comment"># 引入 sys 模块</span><br> <br><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br>        <br><span class="hljs-string">'''</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">3</span><br><span class="hljs-string">4</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="创建一个迭代器"><a class="markdownIt-Anchor" href="#创建一个迭代器"></a> 创建一个迭代器</h3>
<p>把一个类作为一个迭代器使用需要在类中实现两个方法 <strong>iter</strong>() 与 <strong>next</strong>() 。</p>
<p>如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 <strong>init</strong>(), 它会在对象初始化的时候执行。</p>
<p><strong>iter</strong>() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong>() 方法并通过 StopIteration 异常标识迭代的完成。</p>
<p><strong>next</strong>() 方法（Python 2 里是 next()）会返回下一个迭代器对象。</p>
<p>创建一个返回数字的迭代器，初始值为 1，逐步递增 1：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNumbers</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-variable language_">self</span>.a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br> <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>    x = <span class="hljs-variable language_">self</span>.a<br>    <span class="hljs-variable language_">self</span>.a += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> x<br> <br>myclass = MyNumbers()<br>myiter = <span class="hljs-built_in">iter</span>(myclass)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-string">'''</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">3</span><br><span class="hljs-string">4</span><br><span class="hljs-string">5</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="stopiteration"><a class="markdownIt-Anchor" href="#stopiteration"></a> StopIteration</h3>
<p>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next</strong>() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p>
<p>在 20 次迭代后停止执行：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNumbers</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-variable language_">self</span>.a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br> <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.a &lt;= <span class="hljs-number">20</span>:<br>      x = <span class="hljs-variable language_">self</span>.a<br>      <span class="hljs-variable language_">self</span>.a += <span class="hljs-number">1</span><br>      <span class="hljs-keyword">return</span> x<br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">raise</span> StopIteration<br> <br>myclass = MyNumbers()<br>myiter = <span class="hljs-built_in">iter</span>(myclass)<br> <br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myiter:<br>  <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-string">'''</span><br><span class="hljs-string">1</span><br><span class="hljs-string">2</span><br><span class="hljs-string">3</span><br><span class="hljs-string">4</span><br><span class="hljs-string">5</span><br><span class="hljs-string">6</span><br><span class="hljs-string">7</span><br><span class="hljs-string">8</span><br><span class="hljs-string">9</span><br><span class="hljs-string">10</span><br><span class="hljs-string">11</span><br><span class="hljs-string">12</span><br><span class="hljs-string">13</span><br><span class="hljs-string">14</span><br><span class="hljs-string">15</span><br><span class="hljs-string">16</span><br><span class="hljs-string">17</span><br><span class="hljs-string">18</span><br><span class="hljs-string">19</span><br><span class="hljs-string">20</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="生成器"><a class="markdownIt-Anchor" href="#生成器"></a> 生成器</h3>
<p>在 Python 中，使用了 <strong>yield</strong> 的函数被称为生成器（generator）。</p>
<p><strong>yield</strong> 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中逐步产生值，而不是一次性返回所有结果。</p>
<p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p>
<p>当在生成器函数中使用 <strong>yield</strong> 语句时，函数的执行将会暂停，并将 <strong>yield</strong> 后面的表达式作为当前迭代的值返回。</p>
<p>然后，每次调用生成器的 <strong>next()</strong> 方法或使用 <strong>for</strong> 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 <strong>yield</strong> 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。</p>
<p>调用一个生成器函数，返回的是一个迭代器对象。</p>
<p>下面是一个简单的示例，展示了生成器函数的使用：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">yield</span> n<br>        n -= <span class="hljs-number">1</span><br> <br><span class="hljs-comment"># 创建生成器对象</span><br>generator = countdown(<span class="hljs-number">5</span>)<br> <br><span class="hljs-comment"># 通过迭代生成器获取值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: 5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: 4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: 3</span><br> <br><span class="hljs-comment"># 使用 for 循环迭代生成器</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> generator:<br>    <span class="hljs-built_in">print</span>(value)  <span class="hljs-comment"># 输出: 2 1</span><br><span class="hljs-string">'''</span><br><span class="hljs-string">5</span><br><span class="hljs-string">4</span><br><span class="hljs-string">3</span><br><span class="hljs-string">2</span><br><span class="hljs-string">1</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>以上实例中，<strong>countdown</strong> 函数是一个生成器函数。它使用 yield 语句逐步产生从 n 到 1 的倒数数字。在每次调用 yield 语句时，函数会返回当前的倒数值，并在下一次调用时从上次暂停的地方继续执行。</p>
<p>通过创建生成器对象并使用 next() 函数或 for 循环迭代生成器，我们可以逐步获取生成器函数产生的值。在这个例子中，我们首先使用 next() 函数获取前三个倒数值，然后通过 for 循环获取剩下的两个倒数值。</p>
<p>生成器函数的优势是它们可以按需生成值，避免一次性生成大量数据并占用大量内存。此外，生成器还可以与其他迭代工具（如for循环）无缝配合使用，提供简洁和高效的迭代方式。</p>
<p>以下实例使用 yield 实现斐波那契数列：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> sys<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>): <span class="hljs-comment"># 生成器函数 - 斐波那契</span><br>    a, b, counter = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> (counter &gt; n): <br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b<br>        counter += <span class="hljs-number">1</span><br>f = fibonacci(<span class="hljs-number">10</span>) <span class="hljs-comment"># f 是一个迭代器，由生成器返回生成</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(f), end=<span class="hljs-string">" "</span>)<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br>        <br><span class="hljs-string">'''</span><br><span class="hljs-string">0 1 1 2 3 5 8 13 21 34 55</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3-函数"><a class="markdownIt-Anchor" href="#python3-函数"></a> Python3 函数</h2>
<p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p>
<p>函数能提高应用的模块性，和代码的重复利用率。Python提供了许多内建函数，比如print()。但也可以自己创建函数，这被叫做用户自定义函数。</p>
<h3 id="定义一个函数"><a class="markdownIt-Anchor" href="#定义一个函数"></a> 定义一个函数</h3>
<p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>
<ul>
<li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li>
<li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号 <strong>:</strong> 起始，并且缩进。</li>
<li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/05/py-tup-10-26-1.png" alt=""></p>
<h3 id="函数调用"><a class="markdownIt-Anchor" href="#函数调用"></a> 函数调用</h3>
<p>定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。</p>
<p>这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。</p>
<p>如下实例调用了 <strong>printme()</strong> 函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment"># 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printme</span>(<span class="hljs-params"> <span class="hljs-built_in">str</span> </span>):<br>   <span class="hljs-comment"># 打印任何传入的字符串</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment"># 调用函数</span><br>printme(<span class="hljs-string">"我要调用用户自定义函数!"</span>)<br>printme(<span class="hljs-string">"再次调用同一函数"</span>)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="参数传递"><a class="markdownIt-Anchor" href="#参数传递"></a> 参数传递</h3>
<p>在 python 中，类型属于对象，对象有不同类型的区分，变量是没有类型的：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>a=<span class="hljs-string">"Runoob"</span><br></code></pre></td></tr></tbody></table></figure>
<p>以上代码中，<strong>[1,2,3]</strong> 是 List 类型，<strong>“Runoob”</strong> 是 String 类型，而变量 a 是没有类型，它仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p>
<h3 id="可更改mutable与不可更改immutable对象"><a class="markdownIt-Anchor" href="#可更改mutable与不可更改immutable对象"></a> 可更改(mutable)与不可更改(immutable)对象</h3>
<p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p>
<ul>
<li>**不可变类型：**变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</li>
<li>**可变类型：**变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>
</ul>
<p>python 函数的参数传递：</p>
<ul>
<li>**不可变类型：**类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li>
<li>**可变类型：**类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li>
</ul>
<p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p>
<h3 id="python-传不可变对象实例"><a class="markdownIt-Anchor" href="#python-传不可变对象实例"></a> python 传不可变对象实例</h3>
<p>通过 <strong>id()</strong> 函数来查看内存地址变化：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))   <span class="hljs-comment"># 指向的是同一个对象</span><br>    a=<span class="hljs-number">10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))   <span class="hljs-comment"># 一个新对象</span><br> <br>a=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br>change(a)<br><span class="hljs-string">'''</span><br><span class="hljs-string">4379369136</span><br><span class="hljs-string">4379369136</span><br><span class="hljs-string">4379369424</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>可以看见在调用函数前后，形参和实参指向的是同一个对象（对象 id 相同），在函数内部修改形参后，形参指向的是不同的 id。</p>
<h3 id="传可变对象实例"><a class="markdownIt-Anchor" href="#传可变对象实例"></a> 传可变对象实例</h3>
<p>可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">changeme</span>(<span class="hljs-params"> mylist </span>):<br>   <span class="hljs-string">"修改传入的列表"</span><br>   mylist.append([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"函数内取值: "</span>, mylist)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment"># 调用changeme函数</span><br>mylist = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>]<br>changeme( mylist )<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"函数外取值: "</span>, mylist)<br><span class="hljs-string">'''</span><br><span class="hljs-string">函数内取值:  [10, 20, 30, [1, 2, 3, 4]]</span><br><span class="hljs-string">函数外取值:  [10, 20, 30, [1, 2, 3, 4]]</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>传入函数的和在末尾添加新内容的对象用的是同一个引用。</p>
<h3 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h3>
<p>以下是调用函数时可使用的正式参数类型：</p>
<ul>
<li>必需参数</li>
<li>关键字参数</li>
<li>默认参数</li>
<li>不定长参数</li>
</ul>
<h4 id="必需参数"><a class="markdownIt-Anchor" href="#必需参数"></a> 必需参数</h4>
<p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>
<p>调用 printme() 函数，你必须传入一个参数，不然会出现语法错误：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment">#可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printme</span>(<span class="hljs-params"> <span class="hljs-built_in">str</span> </span>):<br>   <span class="hljs-string">"打印任何传入的字符串"</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment"># 调用 printme 函数，不加参数会报错</span><br>printme()<br><span class="hljs-string">'''</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File "test.py", line 10, in &lt;module&gt;</span><br><span class="hljs-string">    printme()</span><br><span class="hljs-string">TypeError: printme() missing 1 required positional argument: 'str'</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="关键字参数"><a class="markdownIt-Anchor" href="#关键字参数"></a> 关键字参数</h4>
<p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p>
<p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p>
<p>以下实例在函数 printme() 调用时使用参数名：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment">#可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printme</span>(<span class="hljs-params"> <span class="hljs-built_in">str</span> </span>):<br>   <span class="hljs-string">"打印任何传入的字符串"</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-built_in">str</span>)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment">#调用printme函数</span><br>printme( <span class="hljs-built_in">str</span> = <span class="hljs-string">"菜鸟教程"</span>)<br></code></pre></td></tr></tbody></table></figure>
<p>以下实例中演示了函数参数的使用不需要使用指定顺序：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment">#可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> name, age </span>):<br>   <span class="hljs-string">"打印任何传入的字符串"</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"名字: "</span>, name)<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"年龄: "</span>, age)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment">#调用printinfo函数</span><br>printinfo( age=<span class="hljs-number">50</span>, name=<span class="hljs-string">"runoob"</span> )<br><br><span class="hljs-string">'''</span><br><span class="hljs-string">名字:  runoob</span><br><span class="hljs-string">年龄:  50</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="默认参数"><a class="markdownIt-Anchor" href="#默认参数"></a> 默认参数</h4>
<p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment">#可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> name, age = <span class="hljs-number">35</span> </span>):<br>   <span class="hljs-string">"打印任何传入的字符串"</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"名字: "</span>, name)<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"年龄: "</span>, age)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment">#调用printinfo函数</span><br>printinfo( age=<span class="hljs-number">50</span>, name=<span class="hljs-string">"runoob"</span> )<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"------------------------"</span>)<br>printinfo( name=<span class="hljs-string">"runoob"</span> )<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">名字:  runoob</span><br><span class="hljs-string">年龄:  50</span><br><span class="hljs-string">------------------------</span><br><span class="hljs-string">名字:  runoob</span><br><span class="hljs-string">年龄:  35</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="不定长参数"><a class="markdownIt-Anchor" href="#不定长参数"></a> 不定长参数</h4>
<p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">functionname</span>(<span class="hljs-params">[formal_args,] *var_args_tuple </span>):<br>   <span class="hljs-string">"函数_文档字符串"</span><br>   function_suite<br>   <span class="hljs-keyword">return</span> [expression]<br></code></pre></td></tr></tbody></table></figure>
<p>加了星号 ***** 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>  <br><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> arg1, *vartuple </span>):<br>   <span class="hljs-string">"打印任何传入的参数"</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"输出: "</span>)<br>   <span class="hljs-built_in">print</span> (arg1)<br>   <span class="hljs-built_in">print</span> (vartuple)<br> <br><span class="hljs-comment"># 调用printinfo 函数</span><br>printinfo( <span class="hljs-number">70</span>, <span class="hljs-number">60</span>, <span class="hljs-number">50</span> )<br><span class="hljs-string">'''</span><br><span class="hljs-string">输出: </span><br><span class="hljs-string">70</span><br><span class="hljs-string">(60, 50)</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> arg1, *vartuple </span>):<br>   <span class="hljs-string">"打印任何传入的参数"</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"输出: "</span>)<br>   <span class="hljs-built_in">print</span> (arg1)<br>   <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> vartuple:<br>      <span class="hljs-built_in">print</span> (var)<br>   <span class="hljs-keyword">return</span><br> <br><span class="hljs-comment"># 调用printinfo 函数</span><br>printinfo( <span class="hljs-number">10</span> )<br>printinfo( <span class="hljs-number">70</span>, <span class="hljs-number">60</span>, <span class="hljs-number">50</span> )<br><br><span class="hljs-string">"""</span><br><span class="hljs-string">输出:</span><br><span class="hljs-string">10</span><br><span class="hljs-string">输出:</span><br><span class="hljs-string">70</span><br><span class="hljs-string">60</span><br><span class="hljs-string">50</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>还有一种就是参数带两个星号 **基本语法如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">functionname</span>(<span class="hljs-params">[formal_args,] **var_args_dict </span>):<br>   <span class="hljs-string">"函数_文档字符串"</span><br>   function_suite<br>   <span class="hljs-keyword">return</span> [expression]<br><br></code></pre></td></tr></tbody></table></figure>
<p>加了两个星号 *<strong>*</strong> 的参数会以字典的形式导入。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br>  <br><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printinfo</span>(<span class="hljs-params"> arg1, **vardict </span>):<br>   <span class="hljs-string">"打印任何传入的参数"</span><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"输出: "</span>)<br>   <span class="hljs-built_in">print</span> (arg1)<br>   <span class="hljs-built_in">print</span> (vardict)<br> <br><span class="hljs-comment"># 调用printinfo 函数</span><br>printinfo(<span class="hljs-number">1</span>, a=<span class="hljs-number">2</span>,b=<span class="hljs-number">3</span>)<br><span class="hljs-string">'''</span><br><span class="hljs-string">输出: </span><br><span class="hljs-string">1</span><br><span class="hljs-string">{'a': 2, 'b': 3}</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>声明函数时，参数中星号 ***** 可以单独出现，例如:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a,b,*,c</span>):<br>    <span class="hljs-keyword">return</span> a+b+c<br></code></pre></td></tr></tbody></table></figure>
<p>如果单独出现星号 *****，则星号 ***** 后的参数必须用关键字传入：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a,b,*,c</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> a+b+c<br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)   <span class="hljs-comment"># 报错</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">"&lt;stdin&gt;"</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: f() takes <span class="hljs-number">2</span> positional arguments but <span class="hljs-number">3</span> were given<br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,c=<span class="hljs-number">3</span>) <span class="hljs-comment"># 正常</span><br><span class="hljs-number">6</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></tbody></table></figure>
<h3 id="匿名函数"><a class="markdownIt-Anchor" href="#匿名函数"></a> 匿名函数</h3>
<p>Python 使用 <strong>lambda</strong> 来创建匿名函数。</p>
<p>所谓匿名，意即不再使用 <strong>def</strong> 语句这样标准的形式定义一个函数。</p>
<ul>
<li><strong>lambda</strong> 只是一个表达式，函数体比 <strong>def</strong> 简单很多。</li>
<li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。</li>
<li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li>
<li>虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，内联函数的目的是调用小函数时不占用栈内存从而减少函数调用的开销，提高代码的执行速度。</li>
</ul>
<h4 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h4>
<p>lambda 函数的语法只包含一个语句，如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression<br></code></pre></td></tr></tbody></table></figure>
<p>设置参数 a 加上 10:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a : a + <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>))<br><span class="hljs-string">'''</span><br><span class="hljs-string">15</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>以下实例匿名函数设置两个参数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-keyword">lambda</span> arg1, arg2: arg1 + arg2<br> <br><span class="hljs-comment"># 调用sum函数</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">"相加后的值为 : "</span>, <span class="hljs-built_in">sum</span>( <span class="hljs-number">10</span>, <span class="hljs-number">20</span> ))<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"相加后的值为 : "</span>, <span class="hljs-built_in">sum</span>( <span class="hljs-number">20</span>, <span class="hljs-number">20</span> ))<br><span class="hljs-string">"""</span><br><span class="hljs-string">相加后的值为 :  30</span><br><span class="hljs-string">相加后的值为 :  40</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></tbody></table></figure>
<p>我们可以将匿名函数封装在一个函数内，这样可以使用同样的代码来创建多个匿名函数。</p>
<p>以下实例将匿名函数封装在 myfunc 函数中，通过传入不同的参数来创建不同的匿名函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">n</span>):<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> a : a * n<br> <br>mydoubler = myfunc(<span class="hljs-number">2</span>)<br>mytripler = myfunc(<span class="hljs-number">3</span>)<br> <br><span class="hljs-built_in">print</span>(mydoubler(<span class="hljs-number">11</span>))<br><span class="hljs-built_in">print</span>(mytripler(<span class="hljs-number">11</span>))<br><span class="hljs-string">'''</span><br><span class="hljs-string">22</span><br><span class="hljs-string">33</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="return-语句"><a class="markdownIt-Anchor" href="#return-语句"></a> return 语句</h3>
<p><strong>return [表达式]</strong> 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的 return 语句返回 None。之前的例子都没有示范如何返回数值，以下实例演示了 return 语句的用法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-comment"># 可写函数说明</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"> arg1, arg2 </span>):<br>   <span class="hljs-comment"># 返回2个参数的和."</span><br>   total = arg1 + arg2<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">"函数内 : "</span>, total)<br>   <span class="hljs-keyword">return</span> total<br> <br><span class="hljs-comment"># 调用sum函数</span><br>total = <span class="hljs-built_in">sum</span>( <span class="hljs-number">10</span>, <span class="hljs-number">20</span> )<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"函数外 : "</span>, total)<br><span class="hljs-string">'''</span><br><span class="hljs-string">函数内 :  30</span><br><span class="hljs-string">函数外 :  30</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="强制位置参数"><a class="markdownIt-Anchor" href="#强制位置参数"></a> 强制位置参数</h3>
<p>Python3.8 新增了一个函数形参语法 <strong>/</strong> 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。</p>
<p>在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a, b, /, c, d, *, e, f</span>):<br>    <span class="hljs-built_in">print</span>(a, b, c, d, e, f)<br>    <br><span class="hljs-comment"># 正确使用</span><br>f(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, d=<span class="hljs-number">40</span>, e=<span class="hljs-number">50</span>, f=<span class="hljs-number">60</span>)<br><span class="hljs-comment"># 错误使用</span><br>f(<span class="hljs-number">10</span>, b=<span class="hljs-number">20</span>, c=<span class="hljs-number">30</span>, d=<span class="hljs-number">40</span>, e=<span class="hljs-number">50</span>, f=<span class="hljs-number">60</span>)   <span class="hljs-comment"># b 不能使用关键字参数的形式</span><br>f(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, f=<span class="hljs-number">60</span>)           <span class="hljs-comment"># e 必须使用关键字参数的形式</span><br></code></pre></td></tr></tbody></table></figure>
<h2 id="python-lambda匿名函数"><a class="markdownIt-Anchor" href="#python-lambda匿名函数"></a> Python lambda（匿名函数）</h2>
<p>Python 使用 <strong>lambda</strong> 来创建匿名函数。</p>
<p>lambda 函数是一种小型、匿名的、内联函数，它可以具有任意数量的参数，但只能有一个表达式。</p>
<p>匿名函数不需要使用 <strong>def</strong> 关键字定义完整函数。</p>
<p>lambda 函数通常用于编写简单的、单行的函数，通常在需要函数作为参数传递的情况下使用，例如在 map()、filter()、reduce() 等函数中。</p>
<p><strong>lambda 函数特点：</strong></p>
<ul>
<li>lambda 函数是匿名的，它们没有函数名称，只能通过赋值给变量或作为参数传递给其他函数来使用。</li>
<li>lambda 函数通常只包含一行代码，这使得它们适用于编写简单的函数。</li>
</ul>
<p><strong>lambda 语法格式：</strong></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><code class="hljs markdown">lambda arguments: expression<br><span class="hljs-bullet">-</span> lambda是 Python 的关键字，用于定义 lambda 函数。<br><span class="hljs-bullet">-</span> arguments 是参数列表，可以包含零个或多个参数，但必须在冒号(:)前指定。<br><span class="hljs-bullet">-</span> expression 是一个表达式，用于计算并返回函数的结果。<br></code></pre></td></tr></tbody></table></figure>
<p>以下的 lambda 函数没有参数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">f = <span class="hljs-keyword">lambda</span>: <span class="hljs-string">"Hello, world!"</span><br><span class="hljs-built_in">print</span>(f())  <span class="hljs-comment"># 输出: Hello, world!</span><br></code></pre></td></tr></tbody></table></figure>
<p>以下实例使用 lambda 创建匿名函数，设置一个函数参数 a，函数计算参数 a 加 10，并返回结果：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a : a + <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>))<br><span class="hljs-string">'''15'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>lambda 函数也可以设置多个参数，参数使用逗号 <strong>,</strong> 隔开：</p>
<p>以下实例使用 lambda 创建匿名函数，函数参数 a 与 b 相乘，并返回结果：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a, b : a * b<br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>))<br><span class="hljs-string">'''30'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>以下实例使用 lambda 创建匿名函数，函数参数 a、b 与 c 相加，并返回结果：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">x = <span class="hljs-keyword">lambda</span> a, b, c : a + b + c<br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>))<br><span class="hljs-string">'''13'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>lambda 函数通常与内置函数如 map()、filter() 和 reduce() 一起使用，以便在集合上执行操作。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>squared = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x**<span class="hljs-number">2</span>, numbers))<br><span class="hljs-built_in">print</span>(squared)  <span class="hljs-comment"># 输出: [1, 4, 9, 16, 25]</span><br></code></pre></td></tr></tbody></table></figure>
<p>使用 lambda 函数与 filter() 一起，筛选偶数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>even_numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, numbers))<br><span class="hljs-built_in">print</span>(even_numbers)  <span class="hljs-comment"># 输出：[2, 4, 6, 8]</span><br></code></pre></td></tr></tbody></table></figure>
<p>下面是一个使用 reduce() 和 lambda 表达式演示如何计算一个序列的累积乘积：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br> <br>numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br> <br><span class="hljs-comment"># 使用 reduce() 和 lambda 函数计算乘积</span><br>product = reduce(<span class="hljs-keyword">lambda</span> x, y: x * y, numbers)<br> <br><span class="hljs-built_in">print</span>(product)  <span class="hljs-comment"># 输出：120</span><br></code></pre></td></tr></tbody></table></figure>
<p>在上面的实例中，reduce() 函数通过遍历 numbers 列表，并使用 lambda 函数将累积的结果不断更新，最终得到了 <strong>1 * 2 * 3 * 4 * 5 = 120</strong> 的结果。</p>
<h2 id="python-装饰器"><a class="markdownIt-Anchor" href="#python-装饰器"></a> Python 装饰器</h2>
<p>装饰器（decorators）是 Python 中的一种高级功能，它允许你动态地修改函数或类的行为。</p>
<p>装饰器是一种函数，它接受一个函数作为参数，并返回一个新的函数或修改原来的函数。</p>
<img src="https://www.runoob.com/wp-content/uploads/2024/03/decorators-python-1.png" alt="装饰器解释" style="zoom:33%;">
<p>装饰器的语法使用 <strong>@decorator_name</strong> 来应用在函数或方法上。</p>
<p>Python 还提供了一些内置的装饰器，比如 <strong>@staticmethod</strong> 和 <strong>@classmethod</strong>，用于定义静态方法和类方法。</p>
<p><strong>装饰器的应用场景：</strong></p>
<ul>
<li><strong>日志记录</strong>: 装饰器可用于记录函数的调用信息、参数和返回值。</li>
<li><strong>性能分析</strong>: 可以使用装饰器来测量函数的执行时间。</li>
<li><strong>权限控制</strong>: 装饰器可用于限制对某些函数的访问权限。</li>
<li><strong>缓存</strong>: 装饰器可用于实现函数结果的缓存，以提高性能。</li>
</ul>
<h3 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h3>
<p>Python 装饰允许在不修改原有函数代码的基础上，动态地增加或修改函数的功能，装饰器本质上是一个接收函数作为输入并返回一个新的包装过后的函数的对象。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator_function</span>(<span class="hljs-params">original_function</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># 这里是在调用原始函数前添加的新功能</span><br>        before_call_code()<br>        <br>        result = original_function(*args, **kwargs)<br>        <br>        <span class="hljs-comment"># 这里是在调用原始函数后添加的新功能</span><br>        after_call_code()<br>        <br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-comment"># 使用装饰器</span><br><span class="hljs-meta">@decorator_function</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">target_function</span>(<span class="hljs-params">arg1, arg2</span>):<br>    <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 原始函数的实现</span><br></code></pre></td></tr></tbody></table></figure>
<p>**解析：**decorator 是一个装饰器函数，它接受一个函数 func 作为参数，并返回一个内部函数 wrapper，在 wrapper 函数内部，你可以执行一些额外的操作，然后调用原始函数 func，并返回其结果。</p>
<ul>
<li><code>decorator_function</code> 是装饰器，它接收一个函数 <code>original_function</code> 作为参数。</li>
<li><code>wrapper</code> 是内部函数，它是实际会被调用的新函数，它包裹了原始函数的调用，并在其前后增加了额外的行为。</li>
<li>当我们使用 <code>@decorator_function</code> 前缀在 <code>target_function</code> 定义前，Python会自动将 <code>target_function</code> 作为参数传递给 <code>decorator_function</code>，然后将返回的 <code>wrapper</code> 函数替换掉原来的 <code>target_function</code>。</li>
</ul>
<h3 id="使用装饰器"><a class="markdownIt-Anchor" href="#使用装饰器"></a> 使用装饰器</h3>
<p>装饰器通过 <strong>@</strong> 符号应用在函数定义之前，例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@time_logger</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">target_function</span>():<br>    <span class="hljs-keyword">pass</span><br>--------------------<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">target_function</span>():<br>    <span class="hljs-keyword">pass</span><br>target_function = time_logger(target_function)<br></code></pre></td></tr></tbody></table></figure>
<p>这会将 target_function 函数传递给 decorator 装饰器，并将返回的函数重新赋值给 target_function。从而，每次调用 target_function 时，实际上是调用了经过装饰器处理后的函数。</p>
<p>通过装饰器，开发者可以在保持代码整洁的同时，灵活且高效地扩展程序的功能。</p>
<p>以下是一个简单的装饰器示例，它会在函数执行前后打印日志：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"在原函数之前执行"</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"在原函数之后执行"</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@my_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello!"</span>)<br><br>say_hello()<br><span class="hljs-string">'''</span><br><span class="hljs-string">在原函数之前执行</span><br><span class="hljs-string">Hello!</span><br><span class="hljs-string">在原函数之后执行</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<ul>
<li>my_decorator 是一个装饰器函数，它接受 say_hello 作为参数，并返回 wrapper 函数。</li>
<li>@my_decorator 将 say_hello 替换为 wrapper。</li>
</ul>
<h3 id="带参数的装饰器"><a class="markdownIt-Anchor" href="#带参数的装饰器"></a> 带参数的装饰器</h3>
<p>如果原函数需要参数，可以在装饰器的 wrapper 函数中传递参数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"在原函数之前执行"</span>)<br>        func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"在原函数之后执行"</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@my_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f"Hello, <span class="hljs-subst">{name}</span>!"</span>)<br><br>greet(<span class="hljs-string">"Alice"</span>)<br><span class="hljs-string">'''</span><br><span class="hljs-string">在原函数之前执行</span><br><span class="hljs-string">Hello, Alice!</span><br><span class="hljs-string">在原函数之后执行</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>以上代码代码定义了一个装饰器 my_decorator，它会在被装饰的函数执行前后分别打印一条消息。装饰器通过 wrapper 函数包裹原函数，并在调用原函数前后添加额外操作。</p>
<p>装饰器本身也可以接受参数，此时需要额外定义一个外层函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">repeat</span>(<span class="hljs-params">num_times</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_times):<br>                func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@repeat(<span class="hljs-params"><span class="hljs-number">3</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello!"</span>)<br><br>say_hello()<br><br><span class="hljs-string">'''</span><br><span class="hljs-string">Hello!</span><br><span class="hljs-string">Hello!</span><br><span class="hljs-string">Hello!</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<p>repeat 函数是一个装饰器工厂，它接受一个参数 num_times，返回一个装饰器 decorator。decorator 接受一个函数 func，并返回一个 wrapper 函数。wrapper 函数会调用 func 函数 num_times 次。使用 @repeat(3) 装饰s ay_hell 函数后，调用 say_hello 会打印 “Hello!” 三次。</p>
<img src="https://www.runoob.com/wp-content/uploads/2024/03/decorators-python-2.png" style="zoom:33%;">
<h3 id="类装饰器"><a class="markdownIt-Anchor" href="#类装饰器"></a> 类装饰器</h3>
<p>除了函数装饰器，Python 还支持类装饰器。类装饰器是包含 <strong>_<em>call_</em></strong> 方法的类，它接受一个函数作为参数，并返回一个新的函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Wrapper</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>            <span class="hljs-variable language_">self</span>.wrapped = cls(*args, **kwargs)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"在类方法之前执行"</span>)<br>            <span class="hljs-variable language_">self</span>.wrapped.display()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">"在类方法之后执行"</span>)<br>    <span class="hljs-keyword">return</span> Wrapper<br><br><span class="hljs-meta">@my_decorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">display</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"这是 MyClass 的 display 方法"</span>)<br><br>obj = MyClass()<br>obj.display()<br><span class="hljs-string">'''</span><br><span class="hljs-string">在类方法之前执行</span><br><span class="hljs-string">这是 MyClass 的 display 方法</span><br><span class="hljs-string">在类方法之后执行</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="内置装饰器"><a class="markdownIt-Anchor" href="#内置装饰器"></a> 内置装饰器</h3>
<p>Python 提供了一些内置的装饰器，例如：</p>
<ol>
<li><strong><code>@staticmethod</code></strong>: 将方法定义为静态方法，不需要实例化类即可调用。</li>
<li><strong><code>@classmethod</code></strong>: 将方法定义为类方法，第一个参数是类本身（通常命名为 <code>cls</code>）。</li>
<li><strong><code>@property</code></strong>: 将方法转换为属性，使其可以像属性一样访问。</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">static_method</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"This is a static method."</span>)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">class_method</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f"This is a class method of <span class="hljs-subst">{cls.__name__}</span>."</span>)<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._name<br><br><span class="hljs-meta">    @name.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-variable language_">self</span>._name = value<br><br><span class="hljs-comment"># 使用</span><br>MyClass.static_method()<br>MyClass.class_method()<br><br>obj = MyClass()<br>obj.name = <span class="hljs-string">"Alice"</span><br><span class="hljs-built_in">print</span>(obj.name)<br></code></pre></td></tr></tbody></table></figure>
<h3 id="多个装饰器的堆叠"><a class="markdownIt-Anchor" href="#多个装饰器的堆叠"></a> 多个装饰器的堆叠</h3>
<p>你可以将多个装饰器堆叠在一起，它们会按照从下到上的顺序依次应用。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator1</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Decorator 1"</span>)<br>        func()<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator2</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"Decorator 2"</span>)<br>        func()<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@decorator1</span><br><span class="hljs-meta">@decorator2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Hello!"</span>)<br><br>say_hello()<br><br><span class="hljs-string">'''</span><br><span class="hljs-string">Decorator 1</span><br><span class="hljs-string">Decorator 2</span><br><span class="hljs-string">Hello!</span><br><span class="hljs-string">'''</span><br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3-数据结构"><a class="markdownIt-Anchor" href="#python3-数据结构"></a> Python3 数据结构</h2>
<p>结合前面所学的知识点来学习Python数据结构。</p>
<hr>
<h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3>
<p>Python中列表是可变的，这是它区别于字符串和元组的最重要的特点，一句话概括即：列表可以修改，而字符串和元组不能。</p>
<p>以下是 Python 中列表的方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">list.append(x)</td>
<td style="text-align:left">把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。</td>
</tr>
<tr>
<td style="text-align:left">list.extend(L)</td>
<td style="text-align:left">通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。</td>
</tr>
<tr>
<td style="text-align:left">list.insert(i, x)</td>
<td style="text-align:left">在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td>
</tr>
<tr>
<td style="text-align:left">list.remove(x)</td>
<td style="text-align:left">删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.pop([i])</td>
<td style="text-align:left">从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）</td>
</tr>
<tr>
<td style="text-align:left">list.clear()</td>
<td style="text-align:left">移除列表中的所有项，等于del a[:]。</td>
</tr>
<tr>
<td style="text-align:left">list.index(x)</td>
<td style="text-align:left">返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.count(x)</td>
<td style="text-align:left">返回 x 在列表中出现的次数。</td>
</tr>
<tr>
<td style="text-align:left">list.sort()</td>
<td style="text-align:left">对列表中的元素进行排序。</td>
</tr>
<tr>
<td style="text-align:left">list.reverse()</td>
<td style="text-align:left">倒排列表中的元素。</td>
</tr>
<tr>
<td style="text-align:left">list.copy()</td>
<td style="text-align:left">返回列表的浅复制，等于a[:]。</td>
</tr>
</tbody>
</table>
<p>下面示例演示了列表的大部分方法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = [<span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1234.5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a.count(<span class="hljs-number">333</span>), a.count(<span class="hljs-number">66.25</span>), a.count(<span class="hljs-string">'x'</span>))<br><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.insert(<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.append(<span class="hljs-number">333</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1234.5</span>, <span class="hljs-number">333</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.index(<span class="hljs-number">333</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.remove(<span class="hljs-number">333</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">66.25</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1234.5</span>, <span class="hljs-number">333</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.reverse()<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">333</span>, <span class="hljs-number">1234.5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">333</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">66.25</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.sort()<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1234.5</span>]<br></code></pre></td></tr></tbody></table></figure>
<h3 id="将列表当做栈使用"><a class="markdownIt-Anchor" href="#将列表当做栈使用"></a> 将列表当做栈使用</h3>
<p>在 Python 中，可以使用列表（list）来实现栈的功能。栈是一种后进先出（LIFO, Last-In-First-Out）数据结构，意味着最后添加的元素最先被移除。列表提供了一些方法，使其非常适合用于栈操作，特别是 <strong>append()</strong> 和 <strong>pop()</strong> 方法。</p>
<p>用 append() 方法可以把一个元素添加到栈顶，用不指定索引的 pop() 方法可以把一个元素从栈顶释放出来。</p>
<h4 id="栈操作"><a class="markdownIt-Anchor" href="#栈操作"></a> 栈操作</h4>
<ul>
<li><strong>压入（Push）</strong>: 将一个元素添加到栈的顶端。</li>
<li><strong>弹出（Pop）</strong>: 移除并返回栈顶元素。</li>
<li><strong>查看栈顶元素（Peek/Top）</strong>: 返回栈顶元素而不移除它。</li>
<li><strong>检查是否为空（IsEmpty）</strong>: 检查栈是否为空。</li>
<li><strong>获取栈的大小（Size）</strong>: 获取栈中元素的数量。</li>
</ul>
<p>以下是如何在 Python 中使用列表实现这些操作的详细说明：</p>
<h4 id="1-创建一个空栈"><a class="markdownIt-Anchor" href="#1-创建一个空栈"></a> 1、创建一个空栈</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">stack = []<br></code></pre></td></tr></tbody></table></figure>
<h4 id="2-压入push操作"><a class="markdownIt-Anchor" href="#2-压入push操作"></a> 2、压入（Push）操作</h4>
<p>使用 append() 方法将元素添加到栈的顶端：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">stack.append(<span class="hljs-number">1</span>)<br>stack.append(<span class="hljs-number">2</span>)<br>stack.append(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(stack)  <span class="hljs-comment"># 输出: [1, 2, 3]</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="3-弹出pop操作"><a class="markdownIt-Anchor" href="#3-弹出pop操作"></a> 3、弹出（Pop）操作</h4>
<p>使用 pop() 方法移除并返回栈顶元素：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">top_element = stack.pop()<br><span class="hljs-built_in">print</span>(top_element)  <span class="hljs-comment"># 输出: 3</span><br><span class="hljs-built_in">print</span>(stack)        <span class="hljs-comment"># 输出: [1, 2]</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="4-查看栈顶元素peektop"><a class="markdownIt-Anchor" href="#4-查看栈顶元素peektop"></a> 4、查看栈顶元素（Peek/Top）</h4>
<p>直接访问列表的最后一个元素（不移除）：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">top_element = stack[-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(top_element)  <span class="hljs-comment"># 输出: 2</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="5-检查是否为空isempty"><a class="markdownIt-Anchor" href="#5-检查是否为空isempty"></a> 5、检查是否为空（IsEmpty）</h4>
<p>检查列表是否为空：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">is_empty = <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(is_empty)  <span class="hljs-comment"># 输出: False</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="6-获取栈的大小size"><a class="markdownIt-Anchor" href="#6-获取栈的大小size"></a> 6、获取栈的大小（Size）</h4>
<p>使用 len() 函数获取栈中元素的数量：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">size = <span class="hljs-built_in">len</span>(stack)<br><span class="hljs-built_in">print</span>(size)  <span class="hljs-comment"># 输出: 2</span><br></code></pre></td></tr></tbody></table></figure>
<p>以下是一个完整的实例，展示了如何使用上述操作来实现一个简单的栈：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.stack = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-variable language_">self</span>.stack.append(item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.stack.pop()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">"pop from empty stack"</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">peek</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.stack[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">"peek from empty stack"</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.stack) == <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.stack)<br><br><span class="hljs-comment"># 使用示例</span><br>stack = Stack()<br>stack.push(<span class="hljs-number">1</span>)<br>stack.push(<span class="hljs-number">2</span>)<br>stack.push(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"栈顶元素:"</span>, stack.peek())  <span class="hljs-comment"># 输出: 栈顶元素: 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"栈大小:"</span>, stack.size())    <span class="hljs-comment"># 输出: 栈大小: 3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"弹出元素:"</span>, stack.pop())  <span class="hljs-comment"># 输出: 弹出元素: 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"栈是否为空:"</span>, stack.is_empty())  <span class="hljs-comment"># 输出: 栈是否为空: False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"栈大小:"</span>, stack.size())    <span class="hljs-comment"># 输出: 栈大小: 2</span><br></code></pre></td></tr></tbody></table></figure>
<p>以上代码中，我们定义了一个 Stack 类，封装了列表作为底层数据结构，并实现了栈的基本操作。</p>
<h3 id="将列表当作队列使用"><a class="markdownIt-Anchor" href="#将列表当作队列使用"></a> 将列表当作队列使用</h3>
<p>在 Python 中，列表（list）可以用作队列（queue），但由于列表的特点，直接使用列表来实现队列并不是最优的选择。</p>
<p>队列是一种先进先出（FIFO, First-In-First-Out）的数据结构，意味着最早添加的元素最先被移除。</p>
<p>使用列表时，如果频繁地在列表的开头插入或删除元素，性能会受到影响，因为这些操作的时间复杂度是 O(n)。为了解决这个问题，Python 提供了 collections.deque，它是双端队列，可以在两端高效地添加和删除元素。</p>
<h4 id="使用-collectionsdeque-实现队列"><a class="markdownIt-Anchor" href="#使用-collectionsdeque-实现队列"></a> 使用 collections.deque 实现队列</h4>
<p>collections.deque 是 Python 标准库的一部分，非常适合用于实现队列。</p>
<p>以下是使用 deque 实现队列的示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-comment"># 创建一个空队列</span><br>queue = deque()<br><br><span class="hljs-comment"># 向队尾添加元素</span><br>queue.append(<span class="hljs-string">'a'</span>)<br>queue.append(<span class="hljs-string">'b'</span>)<br>queue.append(<span class="hljs-string">'c'</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列状态:"</span>, queue)  <span class="hljs-comment"># 输出: 队列状态: deque(['a', 'b', 'c'])</span><br><br><span class="hljs-comment"># 从队首移除元素</span><br>first_element = queue.popleft()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"移除的元素:"</span>, first_element)  <span class="hljs-comment"># 输出: 移除的元素: a</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列状态:"</span>, queue)            <span class="hljs-comment"># 输出: 队列状态: deque(['b', 'c'])</span><br><br><span class="hljs-comment"># 查看队首元素（不移除）</span><br>front_element = queue[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队首元素:"</span>, front_element)    <span class="hljs-comment"># 输出: 队首元素: b</span><br><br><span class="hljs-comment"># 检查队列是否为空</span><br>is_empty = <span class="hljs-built_in">len</span>(queue) == <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列是否为空:"</span>, is_empty)     <span class="hljs-comment"># 输出: 队列是否为空: False</span><br><br><span class="hljs-comment"># 获取队列大小</span><br>size = <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列大小:"</span>, size)            <span class="hljs-comment"># 输出: 队列大小: 2</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="使用列表实现队列"><a class="markdownIt-Anchor" href="#使用列表实现队列"></a> 使用列表实现队列</h4>
<p>虽然 deque更高效，但如果坚持使用列表来实现队列，也可以这么做。以下是如何使用列表实现队列的示例：</p>
<p><strong>1. 创建队列</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">queue = []<br></code></pre></td></tr></tbody></table></figure>
<p><strong>2. 向队尾添加元素</strong></p>
<p>使用 append() 方法将元素添加到队尾：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">queue.append(<span class="hljs-string">'a'</span>)<br>queue.append(<span class="hljs-string">'b'</span>)<br>queue.append(<span class="hljs-string">'c'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列状态:"</span>, queue)  <span class="hljs-comment"># 输出: 队列状态: ['a', 'b', 'c']</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>3. 从队首移除元素</strong></p>
<p>使用 pop(0) 方法从队首移除元素：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">first_element = queue.pop(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"移除的元素:"</span>, first_element)  <span class="hljs-comment"># 输出: 移除的元素: a</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列状态:"</span>, queue)            <span class="hljs-comment"># 输出: 队列状态: ['b', 'c']</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>4. 查看队首元素（不移除）</strong></p>
<p>直接访问列表的第一个元素：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">front_element = queue[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队首元素:"</span>, front_element)    <span class="hljs-comment"># 输出: 队首元素: b</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>5. 检查队列是否为空</strong></p>
<p>检查列表是否为空：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">is_empty = <span class="hljs-built_in">len</span>(queue) == <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列是否为空:"</span>, is_empty)     <span class="hljs-comment"># 输出: 队列是否为空: False</span><br></code></pre></td></tr></tbody></table></figure>
<p><strong>6. 获取队列大小</strong></p>
<p>使用 len() 函数获取队列的大小：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">size = <span class="hljs-built_in">len</span>(queue)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列大小:"</span>, size)            <span class="hljs-comment"># 输出: 队列大小: 2</span><br></code></pre></td></tr></tbody></table></figure>
<h4 id="实例使用列表实现队列"><a class="markdownIt-Anchor" href="#实例使用列表实现队列"></a> 实例（使用列表实现队列）</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.queue = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-variable language_">self</span>.queue.append(item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dequeue</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.queue.pop(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">"dequeue from empty queue"</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">peek</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_empty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.queue[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> IndexError(<span class="hljs-string">"peek from empty queue"</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.queue) == <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.queue)<br><br><span class="hljs-comment"># 使用示例</span><br>queue = Queue()<br>queue.enqueue(<span class="hljs-string">'a'</span>)<br>queue.enqueue(<span class="hljs-string">'b'</span>)<br>queue.enqueue(<span class="hljs-string">'c'</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队首元素:"</span>, queue.peek())    <span class="hljs-comment"># 输出: 队首元素: a</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列大小:"</span>, queue.size())    <span class="hljs-comment"># 输出: 队列大小: 3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"移除的元素:"</span>, queue.dequeue())  <span class="hljs-comment"># 输出: 移除的元素: a</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列是否为空:"</span>, queue.is_empty())  <span class="hljs-comment"># 输出: 队列是否为空: False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">"队列大小:"</span>, queue.size())    <span class="hljs-comment"># 输出: 队列大小: 2</span><br></code></pre></td></tr></tbody></table></figure>
<p>虽然可以使用列表来实现队列，但使用 collections.deque 会更高效和简洁。它提供了 O(1) 时间复杂度的添加和删除操作，非常适合队列这种数据结构。</p>
<h3 id="列表推导式-2"><a class="markdownIt-Anchor" href="#列表推导式-2"></a> 列表推导式</h3>
<p>列表推导式提供了从序列创建列表的简单途径。通常应用程序将一些操作应用于某个序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列。</p>
<p>每个列表推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的列表。如果希望表达式推导出一个元组，就必须使用括号。</p>
<p>这里我们将列表中每个数值乘三，获得一个新的列表：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>vec = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-number">3</span>*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> vec]<br>[<span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>]<br></code></pre></td></tr></tbody></table></figure>
<p>现在我们玩一点小花样：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[[x, x**<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> vec]<br>[[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">16</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">36</span>]]<br></code></pre></td></tr></tbody></table></figure>
<p>这里我们对序列里每一个元素逐个调用某方法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>freshfruit = [<span class="hljs-string">'  banana'</span>, <span class="hljs-string">'  loganberry '</span>, <span class="hljs-string">'passion fruit  '</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[weapon.strip() <span class="hljs-keyword">for</span> weapon <span class="hljs-keyword">in</span> freshfruit]<br>[<span class="hljs-string">'banana'</span>, <span class="hljs-string">'loganberry'</span>, <span class="hljs-string">'passion fruit'</span>]<br></code></pre></td></tr></tbody></table></figure>
<p>我们可以用 if 子句作为过滤器：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-number">3</span>*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> vec <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">3</span>]<br>[<span class="hljs-number">12</span>, <span class="hljs-number">18</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-number">3</span>*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> vec <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">2</span>]<br>[]<br></code></pre></td></tr></tbody></table></figure>
<p>以下是一些关于循环和其它技巧的演示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>vec1 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>vec2 = [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[x*y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> vec1 <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> vec2]<br>[<span class="hljs-number">8</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">18</span>, <span class="hljs-number">16</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">36</span>, <span class="hljs-number">24</span>, <span class="hljs-number">18</span>, -<span class="hljs-number">54</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[x+y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> vec1 <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> vec2]<br>[<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>[vec1[i]*vec2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(vec1))]<br>[<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, -<span class="hljs-number">54</span>]<br></code></pre></td></tr></tbody></table></figure>
<p>列表推导式可以使用复杂表达式或嵌套函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[<span class="hljs-built_in">str</span>(<span class="hljs-built_in">round</span>(<span class="hljs-number">355</span>/<span class="hljs-number">113</span>, i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)]<br>[<span class="hljs-string">'3.1'</span>, <span class="hljs-string">'3.14'</span>, <span class="hljs-string">'3.142'</span>, <span class="hljs-string">'3.1416'</span>, <span class="hljs-string">'3.14159'</span>]<br></code></pre></td></tr></tbody></table></figure>
<h3 id="嵌套列表解析"><a class="markdownIt-Anchor" href="#嵌套列表解析"></a> 嵌套列表解析</h3>
<p>Python的列表还可以嵌套。</p>
<p>以下实例展示了3X4的矩阵列表：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>matrix = [<br><span class="hljs-meta">... </span>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br><span class="hljs-meta">... </span>    [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],<br><span class="hljs-meta">... </span>    [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>],<br><span class="hljs-meta">... </span>]<br><br><span class="hljs-comment"># 以下实例将3X4的矩阵列表转换为4X3列表：</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>[[row[i] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>]]<br><br><span class="hljs-comment"># 另外的方法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>transposed = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-meta">... </span>    transposed.append([row[i] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix])<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>transposed<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>]]<br><br><span class="hljs-comment"># 又一种方法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>transposed = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-comment"># the following 3 lines implement the nested listcomp</span><br><span class="hljs-meta">... </span>    transposed_row = []<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix:<br><span class="hljs-meta">... </span>        transposed_row.append(row[i])<br><span class="hljs-meta">... </span>    transposed.append(transposed_row)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>transposed<br>[[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>]]<br></code></pre></td></tr></tbody></table></figure>
<h3 id="del-语句"><a class="markdownIt-Anchor" href="#del-语句"></a> del 语句</h3>
<p>使用 del 语句可以从一个列表中根据索引来删除一个元素，而不是值来删除元素。这与使用 pop() 返回一个值不同。可以用 del 语句从列表中删除一个切割，或清空整个列表（我们以前介绍的方法是给该切割赋一个空列表）。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = [-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1234.5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> a[<span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">1</span>, <span class="hljs-number">66.25</span>, <span class="hljs-number">333</span>, <span class="hljs-number">333</span>, <span class="hljs-number">1234.5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> a[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[<span class="hljs-number">1</span>, <span class="hljs-number">66.25</span>, <span class="hljs-number">1234.5</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> a[:]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>[]<br></code></pre></td></tr></tbody></table></figure>
<h3 id="元组和序列"><a class="markdownIt-Anchor" href="#元组和序列"></a> 元组和序列</h3>
<p>元组由若干逗号分隔的值组成，例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>t = <span class="hljs-number">12345</span>, <span class="hljs-number">54321</span>, <span class="hljs-string">'hello!'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t[<span class="hljs-number">0</span>]<br><span class="hljs-number">12345</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t<br>(<span class="hljs-number">12345</span>, <span class="hljs-number">54321</span>, <span class="hljs-string">'hello!'</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tuples may be nested:</span><br><span class="hljs-meta">... </span>u = t, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>u<br>((<span class="hljs-number">12345</span>, <span class="hljs-number">54321</span>, <span class="hljs-string">'hello!'</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<br></code></pre></td></tr></tbody></table></figure>
<h3 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h3>
<p>集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。</p>
<p>可以用大括号({})创建集合。注意：如果要创建一个空集合，你必须用 set() 而不是 {} ；后者创建一个空的字典，</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>basket = {<span class="hljs-string">'apple'</span>, <span class="hljs-string">'orange'</span>, <span class="hljs-string">'apple'</span>, <span class="hljs-string">'pear'</span>, <span class="hljs-string">'orange'</span>, <span class="hljs-string">'banana'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(basket)                      <span class="hljs-comment"># 删除重复的</span><br>{<span class="hljs-string">'orange'</span>, <span class="hljs-string">'banana'</span>, <span class="hljs-string">'pear'</span>, <span class="hljs-string">'apple'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'orange'</span> <span class="hljs-keyword">in</span> basket                 <span class="hljs-comment"># 检测成员</span><br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'crabgrass'</span> <span class="hljs-keyword">in</span> basket<br><span class="hljs-literal">False</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 以下演示了两个集合的操作</span><br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">set</span>(<span class="hljs-string">'abracadabra'</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-built_in">set</span>(<span class="hljs-string">'alacazam'</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a                                  <span class="hljs-comment"># a 中唯一的字母</span><br>{<span class="hljs-string">'a'</span>, <span class="hljs-string">'r'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>a - b                              <span class="hljs-comment"># 在 a 中的字母，但不在 b 中</span><br>{<span class="hljs-string">'r'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'b'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>a | b                              <span class="hljs-comment"># 在 a 或 b 中的字母</span><br>{<span class="hljs-string">'a'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'r'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'m'</span>, <span class="hljs-string">'z'</span>, <span class="hljs-string">'l'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="hljs-comment"># 在 a 和 b 中都有的字母</span><br>{<span class="hljs-string">'a'</span>, <span class="hljs-string">'c'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>a ^ b                              <span class="hljs-comment"># 在 a 或 b 中的字母，但不同时在 a 和 b 中</span><br>{<span class="hljs-string">'r'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'m'</span>, <span class="hljs-string">'z'</span>, <span class="hljs-string">'l'</span>}<br></code></pre></td></tr></tbody></table></figure>
<h3 id="字典"><a class="markdownIt-Anchor" href="#字典"></a> 字典</h3>
<p>另一个非常有用的 Python 内建数据类型是字典。</p>
<p>序列是以连续的整数为索引，与此不同的是，字典以关键字为索引，关键字可以是任意不可变类型，通常用字符串或数值。</p>
<p>理解字典的最佳方式是把它看做无序的键=&gt;值对集合。在同一个字典之内，关键字必须是互不相同。</p>
<p>一对大括号创建一个空的字典：{}。</p>
<p>这是一个字典运用的简单例子：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>tel = {<span class="hljs-string">'jack'</span>: <span class="hljs-number">4098</span>, <span class="hljs-string">'sape'</span>: <span class="hljs-number">4139</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>tel[<span class="hljs-string">'guido'</span>] = <span class="hljs-number">4127</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tel<br>{<span class="hljs-string">'sape'</span>: <span class="hljs-number">4139</span>, <span class="hljs-string">'guido'</span>: <span class="hljs-number">4127</span>, <span class="hljs-string">'jack'</span>: <span class="hljs-number">4098</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>tel[<span class="hljs-string">'jack'</span>]<br><span class="hljs-number">4098</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> tel[<span class="hljs-string">'sape'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>tel[<span class="hljs-string">'irv'</span>] = <span class="hljs-number">4127</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tel<br>{<span class="hljs-string">'guido'</span>: <span class="hljs-number">4127</span>, <span class="hljs-string">'irv'</span>: <span class="hljs-number">4127</span>, <span class="hljs-string">'jack'</span>: <span class="hljs-number">4098</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(tel.keys())<br>[<span class="hljs-string">'irv'</span>, <span class="hljs-string">'guido'</span>, <span class="hljs-string">'jack'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">sorted</span>(tel.keys())<br>[<span class="hljs-string">'guido'</span>, <span class="hljs-string">'irv'</span>, <span class="hljs-string">'jack'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'guido'</span> <span class="hljs-keyword">in</span> tel<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'jack'</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> tel<br><span class="hljs-literal">False</span><br></code></pre></td></tr></tbody></table></figure>
<p>构造函数 dict() 直接从键值对元组列表中构建字典。如果有固定的模式，列表推导式指定特定的键值对：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>([(<span class="hljs-string">'sape'</span>, <span class="hljs-number">4139</span>), (<span class="hljs-string">'guido'</span>, <span class="hljs-number">4127</span>), (<span class="hljs-string">'jack'</span>, <span class="hljs-number">4098</span>)])<br>{<span class="hljs-string">'sape'</span>: <span class="hljs-number">4139</span>, <span class="hljs-string">'jack'</span>: <span class="hljs-number">4098</span>, <span class="hljs-string">'guido'</span>: <span class="hljs-number">4127</span>}<br></code></pre></td></tr></tbody></table></figure>
<p>此外，字典推导可以用来创建任意键和值的表达式词典：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>{x: x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)}<br>{<span class="hljs-number">2</span>: <span class="hljs-number">4</span>, <span class="hljs-number">4</span>: <span class="hljs-number">16</span>, <span class="hljs-number">6</span>: <span class="hljs-number">36</span>}<br></code></pre></td></tr></tbody></table></figure>
<p>如果关键字只是简单的字符串，使用关键字参数指定键值对有时候更方便：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">dict</span>(sape=<span class="hljs-number">4139</span>, guido=<span class="hljs-number">4127</span>, jack=<span class="hljs-number">4098</span>)<br>{<span class="hljs-string">'sape'</span>: <span class="hljs-number">4139</span>, <span class="hljs-string">'jack'</span>: <span class="hljs-number">4098</span>, <span class="hljs-string">'guido'</span>: <span class="hljs-number">4127</span>}<br></code></pre></td></tr></tbody></table></figure>
<h3 id="遍历技巧"><a class="markdownIt-Anchor" href="#遍历技巧"></a> 遍历技巧</h3>
<p>在字典中遍历时，关键字和对应的值可以使用 items() 方法同时解读出来：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>knights = {<span class="hljs-string">'gallahad'</span>: <span class="hljs-string">'the pure'</span>, <span class="hljs-string">'robin'</span>: <span class="hljs-string">'the brave'</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> knights.items():<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(k, v)<br>...<br>gallahad the pure<br>robin the brave<br></code></pre></td></tr></tbody></table></figure>
<p>在序列中遍历时，索引位置和对应值可以使用 enumerate() 函数同时得到：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>([<span class="hljs-string">'tic'</span>, <span class="hljs-string">'tac'</span>, <span class="hljs-string">'toe'</span>]):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i, v)<br>...<br><span class="hljs-number">0</span> tic<br><span class="hljs-number">1</span> tac<br><span class="hljs-number">2</span> toe<br></code></pre></td></tr></tbody></table></figure>
<p>同时遍历两个或更多的序列，可以使用 zip() 组合：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>questions = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'quest'</span>, <span class="hljs-string">'favorite color'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>answers = [<span class="hljs-string">'lancelot'</span>, <span class="hljs-string">'the holy grail'</span>, <span class="hljs-string">'blue'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> q, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(questions, answers):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'What is your {0}?  It is {1}.'</span>.<span class="hljs-built_in">format</span>(q, a))<br>...<br>What <span class="hljs-keyword">is</span> your name?  It <span class="hljs-keyword">is</span> lancelot.<br>What <span class="hljs-keyword">is</span> your quest?  It <span class="hljs-keyword">is</span> the holy grail.<br>What <span class="hljs-keyword">is</span> your favorite color?  It <span class="hljs-keyword">is</span> blue.<br></code></pre></td></tr></tbody></table></figure>
<p>要反向遍历一个序列，首先指定这个序列，然后调用 reversed() 函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(i)<br>...<br><span class="hljs-number">9</span><br><span class="hljs-number">7</span><br><span class="hljs-number">5</span><br><span class="hljs-number">3</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure>
<p>要按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>basket = [<span class="hljs-string">'apple'</span>, <span class="hljs-string">'orange'</span>, <span class="hljs-string">'apple'</span>, <span class="hljs-string">'pear'</span>, <span class="hljs-string">'orange'</span>, <span class="hljs-string">'banana'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(basket)):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(f)<br>...<br>apple<br>banana<br>orange<br>pear<br></code></pre></td></tr></tbody></table></figure>
<h2 id="python3-模块"><a class="markdownIt-Anchor" href="#python3-模块"></a> Python3 模块</h2>
<p>在前面的几个章节中我们基本上是用 python 解释器来编程，如果你从 Python 解释器退出再进入，那么你定义的所有的方法和变量就都消失了。</p>
<p>为此 Python 提供了一个办法，把这些定义存放在文件中，为一些脚本或者交互式的解释器实例使用，这个文件被称为模块。</p>
<p>Python 中的模块（Module）是一个包含 Python 定义和语句的文件，文件名就是模块名加上 <strong>.py</strong> 后缀。</p>
<p>模块可以包含函数、类、变量以及可执行的代码。通过模块，我们可以将代码组织成可重用的单元，便于管理和维护。</p>
<h3 id="模块的作用"><a class="markdownIt-Anchor" href="#模块的作用"></a> 模块的作用</h3>
<ul>
<li><strong>代码复用</strong>：将常用的功能封装到模块中，可以在多个程序中重复使用。</li>
<li><strong>命名空间管理</strong>：模块可以避免命名冲突，不同模块中的同名函数或变量不会互相干扰。</li>
<li><strong>代码组织</strong>：将代码按功能划分到不同的模块中，使程序结构更清晰。</li>
</ul>
<p>下面是一个使用 python 标准库中模块的例子。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># 文件名: using_sys.py</span><br> <br><span class="hljs-keyword">import</span> sys<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">'命令行参数如下:'</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sys.argv:<br>   <span class="hljs-built_in">print</span>(i)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">'\n\nPython 路径为：'</span>, sys.path, <span class="hljs-string">'\n'</span>)<br><br><span class="hljs-comment"># -------------------------</span><br>$ python using_sys.py 参数<span class="hljs-number">1</span> 参数<span class="hljs-number">2</span><br>命令行参数如下:<br>using_sys.py<br>参数<span class="hljs-number">1</span><br>参数<span class="hljs-number">2</span><br><br><br>Python 路径为： [<span class="hljs-string">'/root'</span>, <span class="hljs-string">'/usr/lib/python3.4'</span>, <span class="hljs-string">'/usr/lib/python3.4/plat-x86_64-linux-gnu'</span>, <span class="hljs-string">'/usr/lib/python3.4/lib-dynload'</span>, <span class="hljs-string">'/usr/local/lib/python3.4/dist-packages'</span>, <span class="hljs-string">'/usr/lib/python3/dist-packages'</span>] <br></code></pre></td></tr></tbody></table></figure>
<ul>
<li>1、import sys 引入 python 标准库中的 <a href="http://sys.py">sys.py</a> 模块；这是引入某一模块的方法。</li>
<li>2、sys.argv 是一个包含命令行参数的列表。</li>
<li>3、sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表。</li>
</ul>
<h3 id="import-语句"><a class="markdownIt-Anchor" href="#import-语句"></a> import 语句</h3>
<p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句，语法如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> module1[, module2[,... moduleN]<br></code></pre></td></tr></tbody></table></figure>
<p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。</p>
<p>搜索路径时一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support，需要把命令放在脚本的顶端：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># Filename: support.py</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_func</span>(<span class="hljs-params"> par </span>):<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">"Hello : "</span>, par)<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></tbody></table></figure>
<p><a href="http://test.py">test.py</a> 引入 support 模块：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># Filename: test.py</span><br> <br><span class="hljs-comment"># 导入模块</span><br><span class="hljs-keyword">import</span> support<br> <br><span class="hljs-comment"># 现在可以调用模块里包含的函数了</span><br>support.print_func(<span class="hljs-string">"Runoob"</span>)<br><br><span class="hljs-comment">#</span><br>$ python3 test.py <br>Hello :  Runoob<br></code></pre></td></tr></tbody></table></figure>
<p>一个模块只会被导入一次，不管你执行了多少次 <strong>import</strong>。这样可以防止导入模块被一遍又一遍地执行。</p>
<p>当我们使用 import 语句的时候，Python 解释器是怎样找到对应的文件的呢？</p>
<p>这就涉及到 Python 的搜索路径，搜索路径是由一系列目录名组成的，Python 解释器就依次从这些目录中去寻找所引入的模块。</p>
<h3 id="模块的搜索路径"><a class="markdownIt-Anchor" href="#模块的搜索路径"></a> 模块的搜索路径</h3>
<p>当导入一个模块时，Python 会按照以下顺序查找模块：</p>
<ol>
<li>当前目录。</li>
<li>环境变量 <code>PYTHONPATH</code> 指定的目录。</li>
<li>Python 标准库目录。</li>
<li><code>.pth</code> 文件中指定的目录。</li>
</ol>
<p>搜索路径是在 Python 编译或安装的时候确定的，安装新的库应该也会修改。搜索路径被存储在 sys 模块中的 path 变量，做一个简单的实验，在交互式解释器中，输入以下代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.path<br>[<span class="hljs-string">''</span>, <span class="hljs-string">'/usr/lib/python3.4'</span>, <span class="hljs-string">'/usr/lib/python3.4/plat-x86_64-linux-gnu'</span>, <span class="hljs-string">'/usr/lib/python3.4/lib-dynload'</span>, <span class="hljs-string">'/usr/local/lib/python3.4/dist-packages'</span>, <span class="hljs-string">'/usr/lib/python3/dist-packages'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><br>sys.path 输出是一个列表，其中第一项是空串 <span class="hljs-string">''</span>，代表当前目录（若是从一个脚本中打印出来的话，可以更清楚地看出是哪个目录），亦即我们执行 python 解释器的目录（对于脚本的话就是运行的脚本所在的目录）。<br><br>因此若像我一样在当前目录下存在与要引入模块同名的文件，就会把要引入的模块屏蔽掉。<br><br>了解了搜索路径的概念，就可以在脚本中修改 sys.path 来引入一些不在搜索路径中的模块。<br></code></pre></td></tr></tbody></table></figure>
<h3 id="from-import-语句"><a class="markdownIt-Anchor" href="#from-import-语句"></a> from … import 语句</h3>
<p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> modname <span class="hljs-keyword">import</span> name1[, name2[, ... nameN]]<br></code></pre></td></tr></tbody></table></figure>
<p>这个声明不会把整个模块导入到当前的命名空间中，它只会将模块里的某个函数引入进来。</p>
<h3 id="给模块起别名"><a class="markdownIt-Anchor" href="#给模块起别名"></a> 给模块起别名</h3>
<p>使用 <strong>as</strong> 关键字为模块或函数起别名：</p>
<h3 id="from-import-语句-2"><a class="markdownIt-Anchor" href="#from-import-语句-2"></a> from … import * 语句</h3>
<p>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：这提供了一个简单的方法来导入一个模块中的所有项目。</p>
<p><mark>不推荐，容易引起命名冲突。</mark></p>
<h3 id="name-属性"><a class="markdownIt-Anchor" href="#name-属性"></a> <strong>name</strong> 属性</h3>
<p>一个模块被另一个程序第一次引入时，其主程序将运行。</p>
<p>如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用 <strong><strong>name</strong></strong> 属性来使该程序块仅在该模块自身运行时执行。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># Filename: using_name.py</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">'程序自身在运行'</span>)<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">'我来自另一模块'</span>)<br><br>------------<br>$ python using_name.py<br>程序自身在运行<br>--------------<br>$ python<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> using_name<br>我来自另一模块<br>&gt;&gt;&gt;<br><br></code></pre></td></tr></tbody></table></figure>
<h3 id="dir-函数"><a class="markdownIt-Anchor" href="#dir-函数"></a> dir() 函数</h3>
<p>内置的函数 dir() 可以找到模块内定义的所有名称。以一个字符串列表的形式返回</p>
<h3 id="标准模块"><a class="markdownIt-Anchor" href="#标准模块"></a> 标准模块</h3>
<p>Python 本身带着一些标准的模块库，在 Python 库参考文档中将会介绍到（就是后面的"库参考文档"）。</p>
<table>
<thead>
<tr>
<th style="text-align:left">模块名</th>
<th style="text-align:left">功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>math</code></td>
<td style="text-align:left">数学运算（如平方根、三角函数等）</td>
</tr>
<tr>
<td style="text-align:left"><code>os</code></td>
<td style="text-align:left">操作系统相关功能（如文件、目录操作）</td>
</tr>
<tr>
<td style="text-align:left"><code>sys</code></td>
<td style="text-align:left">系统相关的参数和函数</td>
</tr>
<tr>
<td style="text-align:left"><code>random</code></td>
<td style="text-align:left">生成随机数</td>
</tr>
<tr>
<td style="text-align:left"><code>datetime</code></td>
<td style="text-align:left">处理日期和时间</td>
</tr>
<tr>
<td style="text-align:left"><code>json</code></td>
<td style="text-align:left">处理 JSON 数据</td>
</tr>
<tr>
<td style="text-align:left"><code>re</code></td>
<td style="text-align:left">正则表达式操作</td>
</tr>
<tr>
<td style="text-align:left"><code>collections</code></td>
<td style="text-align:left">提供额外的数据结构（如 defaultdict、deque）</td>
</tr>
<tr>
<td style="text-align:left"><code>itertools</code></td>
<td style="text-align:left">提供迭代器工具</td>
</tr>
<tr>
<td style="text-align:left"><code>functools</code></td>
<td style="text-align:left">高阶函数工具（如 reduce、lru_cache）</td>
</tr>
</tbody>
</table>
<p>有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。</p>
<p>这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。</p>
<p>应该注意到这有一个特别的模块 sys ，它内置在每一个 Python 解析器中。变量 sys.ps1 和 sys.ps2 定义了主提示符和副提示符所对应的字符串:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.ps1<br><span class="hljs-string">'&gt;&gt;&gt; '</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.ps2<br><span class="hljs-string">'... '</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>sys.ps1 = <span class="hljs-string">'C&gt; '</span><br>C&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">'Runoob!'</span>)<br>Runoob!<br>C&gt; <br><br></code></pre></td></tr></tbody></table></figure>
<h3 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h3>
<p>包是一种管理 Python 模块命名空间的形式，采用"点模块名称"。</p>
<p>比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B 。</p>
<p>就好像使用模块的时候，你不用担心不同模块之间的全局变量相互影响一样，采用点模块名称这种形式也不用担心不同库之间的模块重名的情况。</p>
<p>这样不同的作者都可以提供 NumPy 模块，或者是 Python 图形库。</p>
<p>注意当使用 <strong>from package import item</strong> 这种形式的时候，对应的 item 既可以是包里面的子模块（子包），或者包里面定义的其他名称，比如函数，类或者变量。</p>
<p>import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 <strong>:exc:ImportError</strong> 异常。</p>
<p>反之，如果使用形如 <strong>import item.subitem.subsubitem</strong> 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。</p>
<h3 id="从一个包中导入"><a class="markdownIt-Anchor" href="#从一个包中导入"></a> 从一个包中导入*</h3>
<p>如果我们使用 <strong>from sound.effects import *</strong> 会发生什么呢？</p>
<p>Python 会进入文件系统，找到这个包里面所有的子模块，然后一个一个的把它们都导入进来。</p>
<p>但这个方法在 Windows 平台上工作的就不是非常好，因为 Windows 是一个不区分大小写的系统。</p>
<p>在 Windows 平台上，我们无法确定一个叫做 <a href="http://ECHO.py">ECHO.py</a> 的文件导入为模块是 echo 还是 Echo，或者是 ECHO。</p>
<p>为了解决这个问题，我们只需要提供一个精确包的索引。</p>
<p>导入语句遵循如下规则：如果包定义文件 <strong><strong>init</strong>.py</strong> 存在一个叫做 <strong><strong>all</strong></strong> 的列表变量，那么在使用 <strong>from package import *</strong> 的时候就把这个列表中的所有名字作为包内容导入。</p>
<p>作为包的作者，可别忘了在更新包之后保证 <strong><strong>all</strong></strong> 也更新了啊。</p>
<p>以下实例在 file:sounds/effects/<strong>init</strong>.py 中包含如下代码:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python">__all__ = [<span class="hljs-string">"echo"</span>, <span class="hljs-string">"surround"</span>, <span class="hljs-string">"reverse"</span>]<br></code></pre></td></tr></tbody></table></figure>
<p>这表示当你使用from sound.effects import *这种用法时，你只会导入包里面这三个子模块。</p>
<h2 id="python-_name_"><a class="markdownIt-Anchor" href="#python-_name_"></a> Python _<em>name</em>_</h2>
<p>在 Python 中，<strong><strong>name</strong></strong> 和 <strong><strong>main</strong></strong> 是两个与模块和脚本执行相关的特殊变量。</p>
<p><strong>_<em>name</em>_</strong> 和 <strong>__main_</strong>_ 通常用于控制代码的执行方式，尤其是在模块既可以作为独立脚本运行，也可以被其他模块导入时。</p>
<p><strong>_<em>name</em>_</strong> 是一个内置变量，用于表示当前模块的名称。</p>
<p><strong>_<em>name</em>_</strong> 的值取决于模块是如何被使用的：</p>
<p>当模块作为主程序运行时：<strong>_<em>name</em>_</strong> 的值被设置为 <strong>“_<em>main</em>_”</strong>。</p>
<p>当模块被导入时：<strong>_<em>name</em>_</strong> 的值被设置为模块的文件名（不包括 <strong>.py</strong> 扩展名）。</p>
<hr>
<p><strong><strong>main</strong></strong> 是一个特殊的字符串，用于表示当前模块是作为主程序运行的。</p>
<p><strong><strong>main</strong></strong> 通常与 <strong>name</strong> 变量一起使用，以确定模块是被导入还是作为独立脚本运行。</p>
<p>在 Python 中，常见的做法是在模块的末尾添加以下代码块：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    <span class="hljs-comment"># 这里的代码只有在模块作为主程序运行时才会执行</span><br>    main()<br></code></pre></td></tr></tbody></table></figure>
<p>这种模式允许模块在被导入时不会执行某些代码，而只有在作为独立脚本运行时才会执行这些代码。</p>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<ul>
<li><code>__name__</code> 是一个内置变量，表示当前模块的名称。</li>
<li>当模块作为主程序运行时，<code>__name__</code> 的值是 <code>"__main__"</code>。</li>
<li>当模块被导入时，<code>__name__</code> 的值是模块的文件名。</li>
<li>使用 <code>if __name__ == "__main__":</code> 可以控制模块在被导入时不会执行某些代码，而只有在作为独立脚本运行时才会执行这些代码。</li>
</ul>
<h2 id="python3-输入和输出"><a class="markdownIt-Anchor" href="#python3-输入和输出"></a> Python3 输入和输出</h2>
<h3 id="输出格式美化"><a class="markdownIt-Anchor" href="#输出格式美化"></a> 输出格式美化</h3>
<p>Python两种输出值的方式: 表达式语句和 print() 函数。</p>
<p>第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。</p>
<p>如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。</p>
<p>如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。</p>
<ul>
<li><strong>str()：</strong> 函数返回一个用户易读的表达形式。</li>
<li><strong>repr()：</strong> 产生一个解释器易读的表达形式。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">'Hello, Runoob'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(s)<br><span class="hljs-string">'Hello, Runoob'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">repr</span>(s)<br><span class="hljs-string">"'Hello, Runoob'"</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>/<span class="hljs-number">7</span>)<br><span class="hljs-string">'0.14285714285714285'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>x = <span class="hljs-number">10</span> * <span class="hljs-number">3.25</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y = <span class="hljs-number">200</span> * <span class="hljs-number">200</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">'x 的值为： '</span> + <span class="hljs-built_in">repr</span>(x) + <span class="hljs-string">',  y 的值为：'</span> + <span class="hljs-built_in">repr</span>(y) + <span class="hljs-string">'...'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br>x 的值为： <span class="hljs-number">32.5</span>,  y 的值为：<span class="hljs-number">40000.</span>..<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment">#  repr() 函数可以转义字符串中的特殊字符</span><br><span class="hljs-meta">... </span>hello = <span class="hljs-string">'hello, runoob\n'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>hellos = <span class="hljs-built_in">repr</span>(hello)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(hellos)<br><span class="hljs-string">'hello, runoob\n'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># repr() 的参数可以是 Python 的任何对象</span><br><span class="hljs-meta">... </span><span class="hljs-built_in">repr</span>((x, y, (<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Runoob'</span>)))<br><span class="hljs-string">"(32.5, 40000, ('Google', 'Runoob'))"</span><br></code></pre></td></tr></tbody></table></figure>
<p>这里有两种方式输出一个平方与立方的表:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(x).rjust(<span class="hljs-number">2</span>), <span class="hljs-built_in">repr</span>(x*x).rjust(<span class="hljs-number">3</span>), end=<span class="hljs-string">' '</span>)<br><span class="hljs-meta">... </span>    <span class="hljs-comment"># 注意前一行 'end' 的使用</span><br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(x*x*x).rjust(<span class="hljs-number">4</span>))<br>...<br> <span class="hljs-number">1</span>   <span class="hljs-number">1</span>    <span class="hljs-number">1</span><br> <span class="hljs-number">2</span>   <span class="hljs-number">4</span>    <span class="hljs-number">8</span><br> <span class="hljs-number">3</span>   <span class="hljs-number">9</span>   <span class="hljs-number">27</span><br> <span class="hljs-number">4</span>  <span class="hljs-number">16</span>   <span class="hljs-number">64</span><br> <span class="hljs-number">5</span>  <span class="hljs-number">25</span>  <span class="hljs-number">125</span><br> <span class="hljs-number">6</span>  <span class="hljs-number">36</span>  <span class="hljs-number">216</span><br> <span class="hljs-number">7</span>  <span class="hljs-number">49</span>  <span class="hljs-number">343</span><br> <span class="hljs-number">8</span>  <span class="hljs-number">64</span>  <span class="hljs-number">512</span><br> <span class="hljs-number">9</span>  <span class="hljs-number">81</span>  <span class="hljs-number">729</span><br><span class="hljs-number">10</span> <span class="hljs-number">100</span> <span class="hljs-number">1000</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'{0:2d} {1:3d} {2:4d}'</span>.<span class="hljs-built_in">format</span>(x, x*x, x*x*x))<br>...<br> <span class="hljs-number">1</span>   <span class="hljs-number">1</span>    <span class="hljs-number">1</span><br> <span class="hljs-number">2</span>   <span class="hljs-number">4</span>    <span class="hljs-number">8</span><br> <span class="hljs-number">3</span>   <span class="hljs-number">9</span>   <span class="hljs-number">27</span><br> <span class="hljs-number">4</span>  <span class="hljs-number">16</span>   <span class="hljs-number">64</span><br> <span class="hljs-number">5</span>  <span class="hljs-number">25</span>  <span class="hljs-number">125</span><br> <span class="hljs-number">6</span>  <span class="hljs-number">36</span>  <span class="hljs-number">216</span><br> <span class="hljs-number">7</span>  <span class="hljs-number">49</span>  <span class="hljs-number">343</span><br> <span class="hljs-number">8</span>  <span class="hljs-number">64</span>  <span class="hljs-number">512</span><br> <span class="hljs-number">9</span>  <span class="hljs-number">81</span>  <span class="hljs-number">729</span><br><span class="hljs-number">10</span> <span class="hljs-number">100</span> <span class="hljs-number">1000</span><br></code></pre></td></tr></tbody></table></figure>
<p>**注意：**在第一个例子中, 每列间的空格由 print() 添加。</p>
<p>这个例子展示了字符串对象的 rjust() 方法, 它可以将字符串靠右, 并在左边填充空格。</p>
<p>还有类似的方法, 如 ljust() 和 center()。 这些方法并不会写任何东西, 它们仅仅返回新的字符串。</p>
<p>另一个方法 zfill(), 它会在数字的左边填充 0，如下所示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'12'</span>.zfill(<span class="hljs-number">5</span>)<br><span class="hljs-string">'00012'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'-3.14'</span>.zfill(<span class="hljs-number">7</span>)<br><span class="hljs-string">'-003.14'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">'3.14159265359'</span>.zfill(<span class="hljs-number">5</span>)<br><span class="hljs-string">'3.14159265359'</span><br></code></pre></td></tr></tbody></table></figure>
<p>str.format() 的基本使用如下:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'{}网址： "{}!"'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">'菜鸟教程'</span>, <span class="hljs-string">'www.runoob.com'</span>))<br>菜鸟教程网址： <span class="hljs-string">"www.runoob.com!"</span><br></code></pre></td></tr></tbody></table></figure>
<p>括号及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。</p>
<p>在括号中的数字用于指向传入对象在 format() 中的位置，如下所示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'{0} 和 {1}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Runoob'</span>))<br>Google 和 Runoob<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'{1} 和 {0}'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Runoob'</span>))<br>Runoob 和 Google<br></code></pre></td></tr></tbody></table></figure>
<p>如果在 format() 中使用了关键字参数, 那么它们的值会指向使用该名字的参数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'{name}网址： {site}'</span>.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">'菜鸟教程'</span>, site=<span class="hljs-string">'www.runoob.com'</span>))<br>菜鸟教程网址： www.runoob.com<br></code></pre></td></tr></tbody></table></figure>
<p>位置及关键字参数可以任意的结合:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'站点列表 {0}, {1}, 和 {other}。'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">'Google'</span>, <span class="hljs-string">'Runoob'</span>, other=<span class="hljs-string">'Taobao'</span>))<br>站点列表 Google, Runoob, 和 Taobao。<br></code></pre></td></tr></tbody></table></figure>
<p><strong>!a</strong> (使用 <strong>ascii()</strong>), <strong>!s</strong> (使用 <strong>str()</strong>) 和 <strong>!r</strong> (使用 <strong>repr()</strong>) 可以用于在格式化某个值之前对其进行转化:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> math<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'常量 PI 的值近似为： {}。'</span>.<span class="hljs-built_in">format</span>(math.pi))<br>常量 PI 的值近似为： <span class="hljs-number">3.141592653589793</span>。<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'常量 PI 的值近似为： {!r}。'</span>.<span class="hljs-built_in">format</span>(math.pi))<br>常量 PI 的值近似为： <span class="hljs-number">3.141592653589793</span>。<br></code></pre></td></tr></tbody></table></figure>
<p>在 <strong>:</strong> 后传入一个整数, 可以保证该域至少有这么多的宽度。 用于美化表格时很有用。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>table = {<span class="hljs-string">'Google'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'Runoob'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'Taobao'</span>: <span class="hljs-number">3</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> name, number <span class="hljs-keyword">in</span> table.items():<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'{0:10} ==&gt; {1:10d}'</span>.<span class="hljs-built_in">format</span>(name, number))<br><span class="hljs-meta">... </span><br>Google     ==&gt;          <span class="hljs-number">1</span><br>Runoob     ==&gt;          <span class="hljs-number">2</span><br>Taobao     ==&gt;          <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure>
<p>如果你有一个很长的格式化字符串, 而你不想将它们分开, 那么在格式化时通过变量名而非位置会是很好的事情。</p>
<p>最简单的就是传入一个字典, 然后使用方括号 <strong>[ ]</strong> 来访问键值 :</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>table = {<span class="hljs-string">'Google'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'Runoob'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'Taobao'</span>: <span class="hljs-number">3</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'Runoob: {0[Runoob]:d}; Google: {0[Google]:d}; Taobao: {0[Taobao]:d}'</span>.<span class="hljs-built_in">format</span>(table))<br>Runoob: <span class="hljs-number">2</span>; Google: <span class="hljs-number">1</span>; Taobao: <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure>
<p>也可以通过在 table 变量前使用 *<strong>*</strong> 来实现相同的功能：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>table = {<span class="hljs-string">'Google'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'Runoob'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'Taobao'</span>: <span class="hljs-number">3</span>}<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'Runoob: {Runoob:d}; Google: {Google:d}; Taobao: {Taobao:d}'</span>.<span class="hljs-built_in">format</span>(**table))<br>Runoob: <span class="hljs-number">2</span>; Google: <span class="hljs-number">1</span>; Taobao: <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure>
<h3 id="旧式字符串格式化"><a class="markdownIt-Anchor" href="#旧式字符串格式化"></a> 旧式字符串格式化</h3>
<p><strong>%</strong> 操作符也可以实现字符串格式化。 它将左边的参数作为类似 <strong>sprintf()</strong> 式的格式化字符串, 而将右边的代入, 然后返回格式化后的字符串. 例如:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> math<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">'常量 PI 的值近似为：%5.3f。'</span> % math.pi)<br>常量 PI 的值近似为：<span class="hljs-number">3.142</span>。<br></code></pre></td></tr></tbody></table></figure>
<p>因为 str.format() 是比较新的函数， 大多数的 Python 代码仍然使用 % 操作符。但是因为这种旧式的格式化最终会从该语言中移除, 应该更多的使用 str.format().</p>
<h3 id="读取键盘输入"><a class="markdownIt-Anchor" href="#读取键盘输入"></a> 读取键盘输入</h3>
<p>Python 提供了 [input() 内置函数]从标准输入读入一行文本，默认的标准输入是键盘。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">"请输入："</span>);<br><span class="hljs-built_in">print</span> (<span class="hljs-string">"你输入的内容是: "</span>, <span class="hljs-built_in">str</span>)<br><br><span class="hljs-comment">#-----------</span><br>请输入：python<br>你输入的内容是:  python<br></code></pre></td></tr></tbody></table></figure>
<h3 id="读和写文件"><a class="markdownIt-Anchor" href="#读和写文件"></a> 读和写文件</h3>
<p>打开文件后必须记得close()</p>
<p>open() 将会返回一个 file 对象，基本语法格式如下:</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">open</span><span class="hljs-params">(filename, mode)</span></span><br></code></pre></td></tr></tbody></table></figure>
<ul>
<li>filename：包含了你要访问的文件名称的字符串值。</li>
<li>mode：决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读®。</li>
</ul>
<p>不同模式打开文件的完全列表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">r</td>
<td style="text-align:left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td style="text-align:left">rb</td>
<td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:left">r+</td>
<td style="text-align:left">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:left">rb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:left">wb</td>
<td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:left">w+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:left">wb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:left">ab</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:left">a+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td style="text-align:left">ab+</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody>
</table>
<p><img src="https://github.com/user-attachments/assets/daa120a1-7578-41c1-b135-2960d8b68d64" alt="Image"></p>
<p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-close.html">file.close()</a>关闭文件。关闭后文件不能再进行读写操作。</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-flush.html">file.flush()</a>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-fileno.html">file.fileno()</a>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-isatty.html">file.isatty()</a>如果文件连接到一个终端设备返回 True，否则返回 False。</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-next.html">file.next()</a>**Python 3 中的 File 对象不支持 next() 方法。**返回文件下一行。</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">[file.read(<a href="https://www.runoob.com/python3/python3-file-read.html">size])</a>从文件读取指定的字节数，如果未给定或为负则读取所有。</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">[file.readline(<a href="https://www.runoob.com/python3/python3-file-readline.html">size])</a>读取整行，包括 “\n” 字符。</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">[file.readlines(<a href="https://www.runoob.com/python3/python3-file-readlines.html">sizeint])</a>读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left">[file.seek(offset<a href="https://www.runoob.com/python3/python3-file-seek.html">, whence])</a>移动文件读取指针到指定位置</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-tell.html">file.tell()</a>返回文件当前位置。</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">[file.truncate(<a href="https://www.runoob.com/python3/python3-file-truncate.html">size])</a>从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 windows 系统下的换行代表2个字符大小。</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-write.html">file.write(str)</a>将字符串写入文件，返回的是写入的字符长度。</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left"><a href="https://www.runoob.com/python3/python3-file-writelines.html">file.writelines(sequence)</a>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody>
</table>
<h3 id="pickle-模块"><a class="markdownIt-Anchor" href="#pickle-模块"></a> pickle 模块</h3>
<p>python的pickle模块实现了基本的数据序列和反序列化。</p>
<p>通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储。</p>
<p>通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。</p>
<p>基本接口：</p>
<figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><code class="hljs gradle">pickle.<span class="hljs-keyword">dump</span>(obj, <span class="hljs-keyword">file</span>, [,protocol])<br></code></pre></td></tr></tbody></table></figure>
<p>有了 pickle 这个对象, 就能对 file 以读取的形式打开:</p>
<figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">x</span> <span class="hljs-operator">=</span> pickle.load(file)<br></code></pre></td></tr></tbody></table></figure>
<p>**注解：**从 file 中读取一个字符串，并将它重构为原来的python对象。</p>
<p><strong>file:</strong> 类文件对象，有read()和readline()接口。</p>
<h2 id="python3-os-文件目录方法"><a class="markdownIt-Anchor" href="#python3-os-文件目录方法"></a> Python3 OS 文件/目录方法</h2>
<p><code>os</code> 模块是 Python 标准库中的一个重要模块，它提供了与操作系统交互的功能。</p>
<p>通过 <code>os</code> 模块，你可以执行文件操作、目录操作、环境变量管理、进程管理等任务。</p>
<p><code>os</code> 模块是跨平台的，这意味着你可以在不同的操作系统（如 Windows、Linux、macOS）上使用相同的代码。</p>
<p>在使用 <code>os</code> 模块之前，你需要先导入它。导入 <code>os</code> 模块的代码如下：</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>应用插件列表</title>
    <url>//posts/315e2be4/</url>
    <content><![CDATA[<h4 id="手机"><a class="markdownIt-Anchor" href="#手机"></a> <strong>手机</strong></h4>
<blockquote>
<p>翻墙：google play store–zotero----Gmail–维基百科–Github–Reddit–TG–google浏览器–clash–Blogger–</p>
<p>Youtube----Quora–Harmonic–Discord–Z-lib–claude–Beago–ChatGPT–X–</p>
<p>生活：1. 微信读书–Readest–zpod----知乎–豆瓣–百度贴吧–完美钢琴–唱准音</p>
<ol start="2">
<li>
<p>12306–交管12123–高德地图–安居客–58同城–懂车帝----虎扑–下厨房</p>
</li>
<li>
<p>智联招聘–BOSS直聘–安居客–58同城–赶集直招–鱼泡直聘</p>
</li>
<li>
<p>淘宝–京东–美团–阿里巴巴–闲鱼</p>
</li>
</ol>
<p>工具：edge–欧陆词典–HiDictionary—wps便签–省心英语----多邻国–阿里云–编程狮–准点天气–</p>
<p>办公：网易邮箱—百度网盘</p>
<p>兴趣：听戏–围棋–昊昊听书–识典古籍</p>
</blockquote>
<hr>
<h4 id="电脑"><a class="markdownIt-Anchor" href="#电脑"></a> <strong>电脑</strong></h4>
<p>解压软件：<a href="https://www.bandisoft.com/bandizip/">Bandizip</a> 、<a href="https://www.7-zip.org/">7-zip</a></p>
<p>媒体播放录屏：<a href="http://www.potplayercn.com/">Potplayer</a>、<a href="https://obsproject.com/zh-cn/download">OBS Studio</a>、<a href="https://www.bandicam.cn/">班迪录屏</a></p>
<p>视频编辑：Bandicut</p>
<p>卸载工具：<a href="https://uninstall-tools.com/">Uninstall Tool</a>、<a href="https://geekuninstaller.com/">Geek</a>、<a href="https://www.wisecleaner.com.cn/wise-force-deleter.html">Wise Force Deleter</a></p>
<p>桌面-查找工具：<a href="http://www.winstep.net/nexus.asp">Nexus 桌面整理工具</a>、<a href="https://www.stardock.com/products/fences/">Stardock Fence</a>、<a href="https://www.voidtools.com/zh-cn/downloads/">Everything</a></p>
<p>截图工具：<a href="https://zh.snipaste.com/">Snipaste</a>、<a href="https://pixpin.cn/">PixPin</a></p>
<p>远程控制：<a href="https://www.todesk.com/">ToDesk</a>、<a href="https://sunlogin.oray.com/">向日葵</a></p>
<p>办公：Office、<a href="https://www.drawio.com/">Draw.io</a>、<a href="https://typora.io/">Typora</a>、<a href="https://www.adobe.com/acrobat.html">Adobe Acrobat</a>、<a href="https://www.zotero.org/">Zotero</a>、<a href="https://www.sumatrapdfreader.org/free-pdf-reader">Sumatra PDF</a>、<a href="https://pandoc.org/">Pandoc - index</a></p>
<p>开发文本：<a href="https://www.sublimetext.com/">Sublime Text</a>、<a href="https://code.visualstudio.com/">VS Code</a>、<a href="https://www.jetbrains.com/pycharm/">Pycharm</a>、<a href="https://www.jetbrains.com/idea/">IDEA</a>、<a href="https://www.jetbrains.com.cn/clion/">Clion</a>、<a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio</a>、<a href="https://www.anaconda.com/products/navigator">Anaconda Navigater</a> 、<a href="https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion#resources">VMware</a>、<a href="https://www.docker.com/">Docker</a>、<a href="https://zealdocs.org/">Zeal</a>、<a href="https://www.xshell.com/zh/xshell/">Xshell</a>、<a href="https://dbeaver.io/download/">DBeaver</a>、<a href="https://www.navicat.com.cn/">Navicat</a>、<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a></p>
<p>其它：<a href="%EF%BC%88https://www.bypass.cn/%EF%BC%89">Bypass</a>、Readest[电子书阅读]</p>
<hr>
<h4 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> <strong>插件</strong></h4>
<p>zotero connector、iTab标签页、AIX智能下载器、沙拉查词、黑暗模式 - 夜眼、AdGuard 广告拦截器、SuperCopy 超级复制、篡改猴、类似的网站 - 发现相关网站</p>
<hr>
<h4 id="公众号"><a class="markdownIt-Anchor" href="#公众号"></a> <strong>公众号</strong></h4>
]]></content>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>20250417</title>
    <url>//posts/8773a83b/</url>
    <content><![CDATA[<p>我昨天下午回了学校，路上打车，因为比较疲累，热，饿等原因导致我又晕车了；然后半路下车，骑车回学校，果然骑车是比跑步要轻松的 对于我来说，。</p>
<p>然后，换一个环境 周围的环境变化了之后，不久我就感觉到了内心的那种感觉的变化，那是一种绵绵不绝 的隐藏在内心深处的东西；</p>
<p>已经有几天没有写这个日志的东西了，说实话，除了大部分的烦恼，也没有好写的了，连烦恼也不至于罄竹难书，基本上都写完了，或许有所减弱，</p>
<p>等一段时间，或者说等我好起来 有所好转了，我应该可以渐渐的书写更多的所思所想 更加的有逻辑性的。</p>
]]></content>
      <categories>
        <category>遨游的蒲公英</category>
      </categories>
  </entry>
</search>
